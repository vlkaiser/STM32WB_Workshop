
HandsOn_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001334  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001470  08001470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001510  08001510  00011510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  08001518  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  08001524  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08001524  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000abb3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ac2  00000000  00000000  0002abf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bfe  00000000  00000000  0002c6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007a0  00000000  00000000  0002f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d88  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001f3b5  00000000  00000000  000307e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000703a  00000000  00000000  0004fb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000c898a  00000000  00000000  00056bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0011f559  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010c0  00000000  00000000  0011f5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08001458 	.word	0x08001458

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08001458 	.word	0x08001458

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800017e:	4c10      	ldr	r4, [pc, #64]	; (80001c0 <HAL_InitTick+0x44>)
 8000180:	6823      	ldr	r3, [r4, #0]
{
 8000182:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000184:	b90b      	cbnz	r3, 800018a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000186:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000188:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800018a:	f000 fe25 	bl	8000dd8 <HAL_RCC_GetHCLKFreq>
 800018e:	6822      	ldr	r2, [r4, #0]
 8000190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000194:	fbb3 f3f2 	udiv	r3, r3, r2
 8000198:	fbb0 f0f3 	udiv	r0, r0, r3
 800019c:	f000 f89c 	bl	80002d8 <HAL_SYSTICK_Config>
 80001a0:	4604      	mov	r4, r0
 80001a2:	2800      	cmp	r0, #0
 80001a4:	d1ef      	bne.n	8000186 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	2d0f      	cmp	r5, #15
 80001a8:	d8ed      	bhi.n	8000186 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001aa:	4602      	mov	r2, r0
 80001ac:	4629      	mov	r1, r5
 80001ae:	f04f 30ff 	mov.w	r0, #4294967295
 80001b2:	f000 f85d 	bl	8000270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <HAL_InitTick+0x48>)
 80001b8:	4620      	mov	r0, r4
 80001ba:	601d      	str	r5, [r3, #0]
 80001bc:	e7e4      	b.n	8000188 <HAL_InitTick+0xc>
 80001be:	bf00      	nop
 80001c0:	20000004 	.word	0x20000004
 80001c4:	20000008 	.word	0x20000008

080001c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <HAL_Init+0x28>)
 80001ca:	6813      	ldr	r3, [r2, #0]
 80001cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80001d0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	f000 f839 	bl	800024c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001da:	2000      	movs	r0, #0
 80001dc:	f7ff ffce 	bl	800017c <HAL_InitTick>
 80001e0:	4604      	mov	r4, r0
 80001e2:	b918      	cbnz	r0, 80001ec <HAL_Init+0x24>
    HAL_MspInit();
 80001e4:	f001 f852 	bl	800128c <HAL_MspInit>
}
 80001e8:	4620      	mov	r0, r4
 80001ea:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001ec:	2401      	movs	r4, #1
 80001ee:	e7fb      	b.n	80001e8 <HAL_Init+0x20>
 80001f0:	58004000 	.word	0x58004000

080001f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <HAL_IncTick+0x10>)
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <HAL_IncTick+0x14>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	6809      	ldr	r1, [r1, #0]
 80001fc:	440b      	add	r3, r1
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	2000002c 	.word	0x2000002c
 8000208:	20000004 	.word	0x20000004

0800020c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800020c:	4b01      	ldr	r3, [pc, #4]	; (8000214 <HAL_GetTick+0x8>)
 800020e:	6818      	ldr	r0, [r3, #0]
}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	2000002c 	.word	0x2000002c

08000218 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000218:	4b01      	ldr	r3, [pc, #4]	; (8000220 <HAL_GetTickPrio+0x8>)
 800021a:	6818      	ldr	r0, [r3, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000008 	.word	0x20000008

08000224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000224:	b538      	push	{r3, r4, r5, lr}
 8000226:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800022c:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 800022e:	bf1c      	itt	ne
 8000230:	4b05      	ldrne	r3, [pc, #20]	; (8000248 <HAL_Delay+0x24>)
 8000232:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 8000234:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 8000236:	bf18      	it	ne
 8000238:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800023a:	f7ff ffe7 	bl	800020c <HAL_GetTick>
 800023e:	1b40      	subs	r0, r0, r5
 8000240:	42a0      	cmp	r0, r4
 8000242:	d3fa      	bcc.n	800023a <HAL_Delay+0x16>
    {
    }
  }
 8000244:	bd38      	pop	{r3, r4, r5, pc}
 8000246:	bf00      	nop
 8000248:	20000004 	.word	0x20000004

0800024c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800024c:	4a07      	ldr	r2, [pc, #28]	; (800026c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800024e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000250:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000254:	041b      	lsls	r3, r3, #16
 8000256:	0c1b      	lsrs	r3, r3, #16
 8000258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800025c:	0200      	lsls	r0, r0, #8
 800025e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000262:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000266:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000268:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800026a:	4770      	bx	lr
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000272:	b570      	push	{r4, r5, r6, lr}
 8000274:	68dc      	ldr	r4, [r3, #12]
 8000276:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800027a:	f1c4 0507 	rsb	r5, r4, #7
 800027e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000280:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000284:	bf28      	it	cs
 8000286:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000288:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	bf8c      	ite	hi
 8000294:	3c03      	subhi	r4, #3
 8000296:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	ea21 0303 	bic.w	r3, r1, r3
 800029c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800029e:	fa06 f404 	lsl.w	r4, r6, r4
 80002a2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 80002a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	bfa8      	it	ge
 80002ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80002b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b6:	bfbc      	itt	lt
 80002b8:	f000 000f 	andlt.w	r0, r0, #15
 80002bc:	4a05      	ldrlt	r2, [pc, #20]	; (80002d4 <HAL_NVIC_SetPriority+0x64>)
 80002be:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	bfaa      	itet	ge
 80002c2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002cc:	bd70      	pop	{r4, r5, r6, pc}
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00
 80002d4:	e000ed14 	.word	0xe000ed14

080002d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d8:	3801      	subs	r0, #1
 80002da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002de:	d20a      	bcs.n	80002f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	21f0      	movs	r1, #240	; 0xf0
 80002e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000308:	4a55      	ldr	r2, [pc, #340]	; (8000460 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800030a:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 800030e:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000310:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000314:	fa38 f403 	lsrs.w	r4, r8, r3
 8000318:	d101      	bne.n	800031e <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 800031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800031e:	2401      	movs	r4, #1
 8000320:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000324:	ea1a 0508 	ands.w	r5, sl, r8
 8000328:	f000 808f 	beq.w	800044a <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800032c:	684c      	ldr	r4, [r1, #4]
 800032e:	f024 0b10 	bic.w	fp, r4, #16
 8000332:	f1bb 0f02 	cmp.w	fp, #2
 8000336:	d111      	bne.n	800035c <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8000338:	08df      	lsrs	r7, r3, #3
 800033a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800033e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000342:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000344:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000348:	fa09 fe0c 	lsl.w	lr, r9, ip
 800034c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000350:	690e      	ldr	r6, [r1, #16]
 8000352:	fa06 f60c 	lsl.w	r6, r6, ip
 8000356:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 800035a:	623e      	str	r6, [r7, #32]
 800035c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000360:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000362:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000364:	fa07 f70e 	lsl.w	r7, r7, lr
 8000368:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800036a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800036e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000370:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000374:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000378:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800037c:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000380:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000382:	d811      	bhi.n	80003a8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000384:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000386:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800038a:	68ce      	ldr	r6, [r1, #12]
 800038c:	fa06 fc0e 	lsl.w	ip, r6, lr
 8000390:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8000394:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000396:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000398:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800039c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003a0:	409e      	lsls	r6, r3
 80003a2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003a6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003a8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80003aa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80003ac:	688e      	ldr	r6, [r1, #8]
 80003ae:	fa06 f60e 	lsl.w	r6, r6, lr
 80003b2:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003b4:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003b6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003b8:	d547      	bpl.n	800044a <HAL_GPIO_Init+0x146>
 80003ba:	f023 0703 	bic.w	r7, r3, #3
 80003be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003c2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80003c6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80003ca:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80003cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80003d0:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003d4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80003d8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003dc:	d037      	beq.n	800044e <HAL_GPIO_Init+0x14a>
 80003de:	4e21      	ldr	r6, [pc, #132]	; (8000464 <HAL_GPIO_Init+0x160>)
 80003e0:	42b0      	cmp	r0, r6
 80003e2:	d036      	beq.n	8000452 <HAL_GPIO_Init+0x14e>
 80003e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80003e8:	42b0      	cmp	r0, r6
 80003ea:	d034      	beq.n	8000456 <HAL_GPIO_Init+0x152>
 80003ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80003f0:	42b0      	cmp	r0, r6
 80003f2:	d032      	beq.n	800045a <HAL_GPIO_Init+0x156>
 80003f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80003f8:	42b0      	cmp	r0, r6
 80003fa:	bf14      	ite	ne
 80003fc:	2607      	movne	r6, #7
 80003fe:	2604      	moveq	r6, #4
 8000400:	fa06 f60c 	lsl.w	r6, r6, ip
 8000404:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000408:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800040a:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800040e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000410:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000414:	bf0c      	ite	eq
 8000416:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000418:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800041a:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 800041e:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000422:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000426:	bf0c      	ite	eq
 8000428:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800042a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800042c:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000430:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000432:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000436:	bf0c      	ite	eq
 8000438:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800043a:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800043c:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800043e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000440:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000442:	bf54      	ite	pl
 8000444:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000446:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000448:	6056      	str	r6, [r2, #4]
    position++;
 800044a:	3301      	adds	r3, #1
 800044c:	e762      	b.n	8000314 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800044e:	2600      	movs	r6, #0
 8000450:	e7d6      	b.n	8000400 <HAL_GPIO_Init+0xfc>
 8000452:	2601      	movs	r6, #1
 8000454:	e7d4      	b.n	8000400 <HAL_GPIO_Init+0xfc>
 8000456:	2602      	movs	r6, #2
 8000458:	e7d2      	b.n	8000400 <HAL_GPIO_Init+0xfc>
 800045a:	2603      	movs	r6, #3
 800045c:	e7d0      	b.n	8000400 <HAL_GPIO_Init+0xfc>
 800045e:	bf00      	nop
 8000460:	58000800 	.word	0x58000800
 8000464:	48000400 	.word	0x48000400

08000468 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000468:	b10a      	cbz	r2, 800046e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800046a:	6181      	str	r1, [r0, #24]
 800046c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800046e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000470:	4770      	bx	lr

08000472 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000472:	6943      	ldr	r3, [r0, #20]
 8000474:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000478:	bf08      	it	eq
 800047a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800047c:	6181      	str	r1, [r0, #24]
  }
}
 800047e:	4770      	bx	lr

08000480 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000480:	4a02      	ldr	r2, [pc, #8]	; (800048c <HAL_PWR_EnableBkUpAccess+0xc>)
 8000482:	6813      	ldr	r3, [r2, #0]
 8000484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000488:	6013      	str	r3, [r2, #0]
}
 800048a:	4770      	bx	lr
 800048c:	58000400 	.word	0x58000400

08000490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <HAL_PWREx_GetVoltageRange+0xc>)
 8000492:	6818      	ldr	r0, [r3, #0]
}
 8000494:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	58000400 	.word	0x58000400

080004a0 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a4:	6818      	ldr	r0, [r3, #0]
}
 80004a6:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80004aa:	4770      	bx	lr

080004ac <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6818      	ldr	r0, [r3, #0]
}
 80004b2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80004b6:	4770      	bx	lr

080004b8 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80004c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80004c4:	4770      	bx	lr

080004c6 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6818      	ldr	r0, [r3, #0]
}
 80004cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80004d0:	4770      	bx	lr

080004d2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80004d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004d6:	6813      	ldr	r3, [r2, #0]
 80004d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004dc:	4318      	orrs	r0, r3
 80004de:	6010      	str	r0, [r2, #0]
}
 80004e0:	4770      	bx	lr

080004e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80004e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if(msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80004ec:	28b0      	cmp	r0, #176	; 0xb0
 80004ee:	bf28      	it	cs
 80004f0:	20b0      	movcs	r0, #176	; 0xb0
 80004f2:	4770      	bx	lr

080004f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80004f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004f8:	6853      	ldr	r3, [r2, #4]
 80004fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80004fe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000502:	6050      	str	r0, [r2, #4]
}
 8000504:	4770      	bx	lr

08000506 <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050a:	6818      	ldr	r0, [r3, #0]
}
 800050c:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000510:	4770      	bx	lr
	...

08000514 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 8000514:	28b0      	cmp	r0, #176	; 0xb0
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000518:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800051a:	bf98      	it	ls
 800051c:	0900      	lsrls	r0, r0, #4
{
 800051e:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8000520:	bf8c      	ite	hi
 8000522:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8000524:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000528:	4c2b      	ldr	r4, [pc, #172]	; (80005d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800052a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8000534:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000538:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8000544:	fbb5 f5f3 	udiv	r5, r5, r3
 8000548:	f7ff ffa2 	bl	8000490 <HAL_PWREx_GetVoltageRange>
 800054c:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800054e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000552:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8000554:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000558:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800055c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8000560:	ac08      	add	r4, sp, #32
 8000562:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000566:	d017      	beq.n	8000598 <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000568:	2d06      	cmp	r5, #6
 800056a:	d924      	bls.n	80005b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
 800056c:	2d0c      	cmp	r5, #12
 800056e:	d924      	bls.n	80005ba <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8000570:	2d10      	cmp	r5, #16
 8000572:	d924      	bls.n	80005be <RCC_SetFlashLatencyFromMSIRange+0xaa>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8000574:	2400      	movs	r4, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000576:	4d1a      	ldr	r5, [pc, #104]	; (80005e0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8000578:	682b      	ldr	r3, [r5, #0]
 800057a:	f023 0307 	bic.w	r3, r3, #7
 800057e:	4323      	orrs	r3, r4
 8000580:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000582:	f7ff fe43 	bl	800020c <HAL_GetTick>
 8000586:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8000588:	682b      	ldr	r3, [r5, #0]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	429c      	cmp	r4, r3
 8000590:	d117      	bne.n	80005c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000592:	2000      	movs	r0, #0
}
 8000594:	b009      	add	sp, #36	; 0x24
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000598:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800059a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800059e:	4295      	cmp	r5, r2
 80005a0:	d805      	bhi.n	80005ae <RCC_SetFlashLatencyFromMSIRange+0x9a>
        latency = FLASH_LATENCY_RANGE[index];
 80005a2:	aa08      	add	r2, sp, #32
 80005a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80005a8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80005ac:	e7e3      	b.n	8000576 <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80005ae:	3301      	adds	r3, #1
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d1f2      	bne.n	800059a <RCC_SetFlashLatencyFromMSIRange+0x86>
 80005b4:	e7de      	b.n	8000574 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	e7f3      	b.n	80005a2 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e7f1      	b.n	80005a2 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 80005be:	2302      	movs	r3, #2
 80005c0:	e7ef      	b.n	80005a2 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80005c2:	f7ff fe23 	bl	800020c <HAL_GetTick>
 80005c6:	1b80      	subs	r0, r0, r6
 80005c8:	2802      	cmp	r0, #2
 80005ca:	d9dd      	bls.n	8000588 <RCC_SetFlashLatencyFromMSIRange+0x74>
      return HAL_TIMEOUT;
 80005cc:	2003      	movs	r0, #3
 80005ce:	e7e1      	b.n	8000594 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80005d0:	080014d0 	.word	0x080014d0
 80005d4:	08001490 	.word	0x08001490
 80005d8:	08001470 	.word	0x08001470
 80005dc:	000f4240 	.word	0x000f4240
 80005e0:	58004000 	.word	0x58004000

080005e4 <HAL_RCC_OscConfig>:
{
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(RCC_OscInitStruct == NULL)
 80005e6:	4604      	mov	r4, r0
 80005e8:	b908      	cbnz	r0, 80005ee <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80005ea:	2001      	movs	r0, #1
 80005ec:	e080      	b.n	80006f0 <HAL_RCC_OscConfig+0x10c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80005ee:	6803      	ldr	r3, [r0, #0]
 80005f0:	069e      	lsls	r6, r3, #26
 80005f2:	d529      	bpl.n	8000648 <HAL_RCC_OscConfig+0x64>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005f8:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80005fa:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80005fc:	f013 030c 	ands.w	r3, r3, #12
 8000600:	d005      	beq.n	800060e <HAL_RCC_OscConfig+0x2a>
 8000602:	2b0c      	cmp	r3, #12
 8000604:	d159      	bne.n	80006ba <HAL_RCC_OscConfig+0xd6>
 8000606:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800060a:	2b01      	cmp	r3, #1
 800060c:	d155      	bne.n	80006ba <HAL_RCC_OscConfig+0xd6>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800060e:	f7ff ff5a 	bl	80004c6 <LL_RCC_MSI_IsReady>
 8000612:	b110      	cbz	r0, 800061a <HAL_RCC_OscConfig+0x36>
 8000614:	69e3      	ldr	r3, [r4, #28]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0e7      	beq.n	80005ea <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800061a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800061c:	f7ff ff61 	bl	80004e2 <LL_RCC_MSI_GetRange>
 8000620:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000622:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000624:	d93e      	bls.n	80006a4 <HAL_RCC_OscConfig+0xc0>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000626:	f7ff ff75 	bl	8000514 <RCC_SetFlashLatencyFromMSIRange>
 800062a:	2800      	cmp	r0, #0
 800062c:	d1dd      	bne.n	80005ea <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800062e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000630:	f7ff ff4f 	bl	80004d2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000634:	6a20      	ldr	r0, [r4, #32]
 8000636:	f7ff ff5d 	bl	80004f4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();  
 800063a:	f000 fe67 	bl	800130c <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff fd9c 	bl	800017c <HAL_InitTick>
 8000644:	2800      	cmp	r0, #0
 8000646:	d1d0      	bne.n	80005ea <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	07dd      	lsls	r5, r3, #31
 800064c:	d462      	bmi.n	8000714 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	0798      	lsls	r0, r3, #30
 8000652:	f100 80ad 	bmi.w	80007b0 <HAL_RCC_OscConfig+0x1cc>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8000656:	6823      	ldr	r3, [r4, #0]
 8000658:	f013 0f18 	tst.w	r3, #24
 800065c:	f040 80ee 	bne.w	800083c <HAL_RCC_OscConfig+0x258>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	0759      	lsls	r1, r3, #29
 8000664:	f100 8186 	bmi.w	8000974 <HAL_RCC_OscConfig+0x390>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	0659      	lsls	r1, r3, #25
 800066c:	f140 81eb 	bpl.w	8000a46 <HAL_RCC_OscConfig+0x462>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000672:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 81d2 	beq.w	8000a20 <HAL_RCC_OscConfig+0x43c>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800067c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000688:	f7ff fdc0 	bl	800020c <HAL_GetTick>
 800068c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800068e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000692:	079a      	lsls	r2, r3, #30
 8000694:	f100 81d7 	bmi.w	8000a46 <HAL_RCC_OscConfig+0x462>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000698:	f7ff fdb8 	bl	800020c <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f5      	bls.n	800068e <HAL_RCC_OscConfig+0xaa>
 80006a2:	e024      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006a4:	f7ff ff15 	bl	80004d2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006a8:	6a20      	ldr	r0, [r4, #32]
 80006aa:	f7ff ff23 	bl	80004f4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006b0:	f7ff ff30 	bl	8000514 <RCC_SetFlashLatencyFromMSIRange>
 80006b4:	2800      	cmp	r0, #0
 80006b6:	d0c0      	beq.n	800063a <HAL_RCC_OscConfig+0x56>
 80006b8:	e797      	b.n	80005ea <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80006ba:	69e2      	ldr	r2, [r4, #28]
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	b1ba      	cbz	r2, 80006f2 <HAL_RCC_OscConfig+0x10e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	f042 0201 	orr.w	r2, r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ca:	f7ff fd9f 	bl	800020c <HAL_GetTick>
 80006ce:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80006d0:	f7ff fef9 	bl	80004c6 <LL_RCC_MSI_IsReady>
 80006d4:	b130      	cbz	r0, 80006e4 <HAL_RCC_OscConfig+0x100>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006d8:	f7ff fefb 	bl	80004d2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006dc:	6a20      	ldr	r0, [r4, #32]
 80006de:	f7ff ff09 	bl	80004f4 <LL_RCC_MSI_SetCalibTrimming>
 80006e2:	e7b1      	b.n	8000648 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80006e4:	f7ff fd92 	bl	800020c <HAL_GetTick>
 80006e8:	1b40      	subs	r0, r0, r5
 80006ea:	2802      	cmp	r0, #2
 80006ec:	d9f0      	bls.n	80006d0 <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 80006ee:	2003      	movs	r0, #3
}
 80006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	f022 0201 	bic.w	r2, r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006fa:	f7ff fd87 	bl	800020c <HAL_GetTick>
 80006fe:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8000700:	f7ff fee1 	bl	80004c6 <LL_RCC_MSI_IsReady>
 8000704:	2800      	cmp	r0, #0
 8000706:	d09f      	beq.n	8000648 <HAL_RCC_OscConfig+0x64>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000708:	f7ff fd80 	bl	800020c <HAL_GetTick>
 800070c:	1b40      	subs	r0, r0, r5
 800070e:	2802      	cmp	r0, #2
 8000710:	d9f6      	bls.n	8000700 <HAL_RCC_OscConfig+0x11c>
 8000712:	e7ec      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000718:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800071a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800071c:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000720:	2b08      	cmp	r3, #8
 8000722:	d005      	beq.n	8000730 <HAL_RCC_OscConfig+0x14c>
 8000724:	2b0c      	cmp	r3, #12
 8000726:	d10b      	bne.n	8000740 <HAL_RCC_OscConfig+0x15c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000728:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800072c:	2b03      	cmp	r3, #3
 800072e:	d107      	bne.n	8000740 <HAL_RCC_OscConfig+0x15c>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000730:	f7ff feb6 	bl	80004a0 <LL_RCC_HSE_IsReady>
 8000734:	2800      	cmp	r0, #0
 8000736:	d08a      	beq.n	800064e <HAL_RCC_OscConfig+0x6a>
 8000738:	6863      	ldr	r3, [r4, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d187      	bne.n	800064e <HAL_RCC_OscConfig+0x6a>
 800073e:	e754      	b.n	80005ea <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000740:	6862      	ldr	r2, [r4, #4]
 8000742:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074a:	d111      	bne.n	8000770 <HAL_RCC_OscConfig+0x18c>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000754:	f7ff fd5a 	bl	800020c <HAL_GetTick>
 8000758:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 800075a:	f7ff fea1 	bl	80004a0 <LL_RCC_HSE_IsReady>
 800075e:	2800      	cmp	r0, #0
 8000760:	f47f af75 	bne.w	800064e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000764:	f7ff fd52 	bl	800020c <HAL_GetTick>
 8000768:	1b40      	subs	r0, r0, r5
 800076a:	2864      	cmp	r0, #100	; 0x64
 800076c:	d9f5      	bls.n	800075a <HAL_RCC_OscConfig+0x176>
 800076e:	e7be      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000770:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000774:	d104      	bne.n	8000780 <HAL_RCC_OscConfig+0x19c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e7e5      	b.n	800074c <HAL_RCC_OscConfig+0x168>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000780:	6819      	ldr	r1, [r3, #0]
 8000782:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000786:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800078e:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000790:	2a00      	cmp	r2, #0
 8000792:	d1df      	bne.n	8000754 <HAL_RCC_OscConfig+0x170>
        tickstart = HAL_GetTick();
 8000794:	f7ff fd3a 	bl	800020c <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 800079a:	f7ff fe81 	bl	80004a0 <LL_RCC_HSE_IsReady>
 800079e:	2800      	cmp	r0, #0
 80007a0:	f43f af55 	beq.w	800064e <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007a4:	f7ff fd32 	bl	800020c <HAL_GetTick>
 80007a8:	1b40      	subs	r0, r0, r5
 80007aa:	2864      	cmp	r0, #100	; 0x64
 80007ac:	d9f5      	bls.n	800079a <HAL_RCC_OscConfig+0x1b6>
 80007ae:	e79e      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b4:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80007b6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007b8:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d005      	beq.n	80007cc <HAL_RCC_OscConfig+0x1e8>
 80007c0:	2b0c      	cmp	r3, #12
 80007c2:	d114      	bne.n	80007ee <HAL_RCC_OscConfig+0x20a>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80007c4:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d110      	bne.n	80007ee <HAL_RCC_OscConfig+0x20a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80007cc:	f7ff fe6e 	bl	80004ac <LL_RCC_HSI_IsReady>
 80007d0:	b118      	cbz	r0, 80007da <HAL_RCC_OscConfig+0x1f6>
 80007d2:	68e3      	ldr	r3, [r4, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f43f af08 	beq.w	80005ea <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007de:	6921      	ldr	r1, [r4, #16]
 80007e0:	6853      	ldr	r3, [r2, #4]
 80007e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80007e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80007ea:	6053      	str	r3, [r2, #4]
 80007ec:	e733      	b.n	8000656 <HAL_RCC_OscConfig+0x72>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007ee:	68e2      	ldr	r2, [r4, #12]
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	b182      	cbz	r2, 8000818 <HAL_RCC_OscConfig+0x234>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007fe:	f7ff fd05 	bl	800020c <HAL_GetTick>
 8000802:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8000804:	f7ff fe52 	bl	80004ac <LL_RCC_HSI_IsReady>
 8000808:	2800      	cmp	r0, #0
 800080a:	d1e6      	bne.n	80007da <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800080c:	f7ff fcfe 	bl	800020c <HAL_GetTick>
 8000810:	1b40      	subs	r0, r0, r5
 8000812:	2802      	cmp	r0, #2
 8000814:	d9f6      	bls.n	8000804 <HAL_RCC_OscConfig+0x220>
 8000816:	e76a      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800081e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000820:	f7ff fcf4 	bl	800020c <HAL_GetTick>
 8000824:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8000826:	f7ff fe41 	bl	80004ac <LL_RCC_HSI_IsReady>
 800082a:	2800      	cmp	r0, #0
 800082c:	f43f af13 	beq.w	8000656 <HAL_RCC_OscConfig+0x72>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000830:	f7ff fcec 	bl	800020c <HAL_GetTick>
 8000834:	1b40      	subs	r0, r0, r5
 8000836:	2802      	cmp	r0, #2
 8000838:	d9f5      	bls.n	8000826 <HAL_RCC_OscConfig+0x242>
 800083a:	e758      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800083c:	6962      	ldr	r2, [r4, #20]
 800083e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000842:	2a00      	cmp	r2, #0
 8000844:	d06f      	beq.n	8000926 <HAL_RCC_OscConfig+0x342>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8000846:	06da      	lsls	r2, r3, #27
 8000848:	d547      	bpl.n	80008da <HAL_RCC_OscConfig+0x2f6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 800084a:	f7ff fe35 	bl	80004b8 <LL_RCC_LSI1_IsReady>
 800084e:	b358      	cbz	r0, 80008a8 <HAL_RCC_OscConfig+0x2c4>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000850:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000854:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8000860:	f7ff fcd4 	bl	800020c <HAL_GetTick>
 8000864:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000866:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800086a:	071b      	lsls	r3, r3, #28
 800086c:	d52f      	bpl.n	80008ce <HAL_RCC_OscConfig+0x2ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800086e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000872:	69a2      	ldr	r2, [r4, #24]
 8000874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800087c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000880:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000884:	f023 0301 	bic.w	r3, r3, #1
 8000888:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800088c:	f7ff fcbe 	bl	800020c <HAL_GetTick>
 8000890:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8000892:	f7ff fe11 	bl	80004b8 <LL_RCC_LSI1_IsReady>
 8000896:	2800      	cmp	r0, #0
 8000898:	f43f aee2 	beq.w	8000660 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800089c:	f7ff fcb6 	bl	800020c <HAL_GetTick>
 80008a0:	1b40      	subs	r0, r0, r5
 80008a2:	2802      	cmp	r0, #2
 80008a4:	d9f5      	bls.n	8000892 <HAL_RCC_OscConfig+0x2ae>
 80008a6:	e722      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80008a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80008b4:	f7ff fcaa 	bl	800020c <HAL_GetTick>
 80008b8:	4605      	mov	r5, r0
          while(LL_RCC_LSI1_IsReady() == 0U)
 80008ba:	f7ff fdfd 	bl	80004b8 <LL_RCC_LSI1_IsReady>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d1c6      	bne.n	8000850 <HAL_RCC_OscConfig+0x26c>
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80008c2:	f7ff fca3 	bl	800020c <HAL_GetTick>
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	2802      	cmp	r0, #2
 80008ca:	d9f6      	bls.n	80008ba <HAL_RCC_OscConfig+0x2d6>
 80008cc:	e70f      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80008ce:	f7ff fc9d 	bl	800020c <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2803      	cmp	r0, #3
 80008d6:	d9c6      	bls.n	8000866 <HAL_RCC_OscConfig+0x282>
 80008d8:	e709      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
 80008da:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80008e6:	f7ff fc91 	bl	800020c <HAL_GetTick>
 80008ea:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 80008ec:	f7ff fde4 	bl	80004b8 <LL_RCC_LSI1_IsReady>
 80008f0:	b198      	cbz	r0, 800091a <HAL_RCC_OscConfig+0x336>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80008f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80008f6:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80008f8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80008fc:	f022 0204 	bic.w	r2, r2, #4
 8000900:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000904:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000908:	071f      	lsls	r7, r3, #28
 800090a:	f57f aea9 	bpl.w	8000660 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800090e:	f7ff fc7d 	bl	800020c <HAL_GetTick>
 8000912:	1b80      	subs	r0, r0, r6
 8000914:	2803      	cmp	r0, #3
 8000916:	d9f5      	bls.n	8000904 <HAL_RCC_OscConfig+0x320>
 8000918:	e6e9      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800091a:	f7ff fc77 	bl	800020c <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	2802      	cmp	r0, #2
 8000922:	d9e3      	bls.n	80008ec <HAL_RCC_OscConfig+0x308>
 8000924:	e6e3      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000926:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800092a:	f023 0304 	bic.w	r3, r3, #4
 800092e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000932:	f7ff fc6b 	bl	800020c <HAL_GetTick>
 8000936:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000938:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800093c:	0718      	lsls	r0, r3, #28
 800093e:	d413      	bmi.n	8000968 <HAL_RCC_OscConfig+0x384>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000940:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800094c:	f7ff fc5e 	bl	800020c <HAL_GetTick>
 8000950:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8000952:	f7ff fdb1 	bl	80004b8 <LL_RCC_LSI1_IsReady>
 8000956:	2800      	cmp	r0, #0
 8000958:	f43f ae82 	beq.w	8000660 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800095c:	f7ff fc56 	bl	800020c <HAL_GetTick>
 8000960:	1b40      	subs	r0, r0, r5
 8000962:	2802      	cmp	r0, #2
 8000964:	d9f5      	bls.n	8000952 <HAL_RCC_OscConfig+0x36e>
 8000966:	e6c2      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8000968:	f7ff fc50 	bl	800020c <HAL_GetTick>
 800096c:	1b80      	subs	r0, r0, r6
 800096e:	2803      	cmp	r0, #3
 8000970:	d9e2      	bls.n	8000938 <HAL_RCC_OscConfig+0x354>
 8000972:	e6bc      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000974:	4d75      	ldr	r5, [pc, #468]	; (8000b4c <HAL_RCC_OscConfig+0x568>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05d9      	lsls	r1, r3, #23
 800097a:	d51c      	bpl.n	80009b6 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000984:	d125      	bne.n	80009d2 <HAL_RCC_OscConfig+0x3ee>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000986:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000992:	f7ff fc3b 	bl	800020c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000996:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800099a:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800099c:	f241 3588 	movw	r5, #5000	; 0x1388
 80009a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009a4:	079b      	lsls	r3, r3, #30
 80009a6:	f53f ae5f 	bmi.w	8000668 <HAL_RCC_OscConfig+0x84>
 80009aa:	f7ff fc2f 	bl	800020c <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	42a8      	cmp	r0, r5
 80009b2:	d9f5      	bls.n	80009a0 <HAL_RCC_OscConfig+0x3bc>
 80009b4:	e69b      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
      HAL_PWR_EnableBkUpAccess();
 80009b6:	f7ff fd63 	bl	8000480 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80009ba:	f7ff fc27 	bl	800020c <HAL_GetTick>
 80009be:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	05da      	lsls	r2, r3, #23
 80009c4:	d4da      	bmi.n	800097c <HAL_RCC_OscConfig+0x398>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c6:	f7ff fc21 	bl	800020c <HAL_GetTick>
 80009ca:	1b80      	subs	r0, r0, r6
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9f7      	bls.n	80009c0 <HAL_RCC_OscConfig+0x3dc>
 80009d0:	e68d      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d2:	2b05      	cmp	r3, #5
 80009d4:	d106      	bne.n	80009e4 <HAL_RCC_OscConfig+0x400>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80009d6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80009e2:	e7d0      	b.n	8000986 <HAL_RCC_OscConfig+0x3a2>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80009e4:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80009f0:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80009f4:	f022 0204 	bic.w	r2, r2, #4
 80009f8:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1c8      	bne.n	8000992 <HAL_RCC_OscConfig+0x3ae>
      tickstart = HAL_GetTick();
 8000a00:	f7ff fc04 	bl	800020c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a04:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000a0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	f57f ae2a 	bpl.w	8000668 <HAL_RCC_OscConfig+0x84>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a14:	f7ff fbfa 	bl	800020c <HAL_GetTick>
 8000a18:	1bc0      	subs	r0, r0, r7
 8000a1a:	42b0      	cmp	r0, r6
 8000a1c:	d9f5      	bls.n	8000a0a <HAL_RCC_OscConfig+0x426>
 8000a1e:	e666      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000a20:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000a24:	f023 0301 	bic.w	r3, r3, #1
 8000a28:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fbee 	bl	800020c <HAL_GetTick>
 8000a30:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000a32:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d505      	bpl.n	8000a46 <HAL_RCC_OscConfig+0x462>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a3a:	f7ff fbe7 	bl	800020c <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9f6      	bls.n	8000a32 <HAL_RCC_OscConfig+0x44e>
 8000a44:	e653      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a48:	b909      	cbnz	r1, 8000a4e <HAL_RCC_OscConfig+0x46a>
  return HAL_OK;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	e650      	b.n	80006f0 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a58:	2a0c      	cmp	r2, #12
 8000a5a:	d050      	beq.n	8000afe <HAL_RCC_OscConfig+0x51a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000a5c:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a5e:	2902      	cmp	r1, #2
 8000a60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	d133      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x4ec>
        tickstart = HAL_GetTick();
 8000a68:	f7ff fbd0 	bl	800020c <HAL_GetTick>
 8000a6c:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000a6e:	f7ff fd4a 	bl	8000506 <LL_RCC_PLL_IsReady>
 8000a72:	bb38      	cbnz	r0, 8000ac4 <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a74:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8000a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	68d0      	ldr	r0, [r2, #12]
 8000a80:	4933      	ldr	r1, [pc, #204]	; (8000b50 <HAL_RCC_OscConfig+0x56c>)
 8000a82:	4001      	ands	r1, r0
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000a98:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000aa2:	68d3      	ldr	r3, [r2, #12]
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fbaf 	bl	800020c <HAL_GetTick>
 8000aae:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8000ab0:	f7ff fd29 	bl	8000506 <LL_RCC_PLL_IsReady>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1c8      	bne.n	8000a4a <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ab8:	f7ff fba8 	bl	800020c <HAL_GetTick>
 8000abc:	1b00      	subs	r0, r0, r4
 8000abe:	2802      	cmp	r0, #2
 8000ac0:	d9f6      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x4cc>
 8000ac2:	e614      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ac4:	f7ff fba2 	bl	800020c <HAL_GetTick>
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9cf      	bls.n	8000a6e <HAL_RCC_OscConfig+0x48a>
 8000ace:	e60e      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	f022 0203 	bic.w	r2, r2, #3
 8000ad6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8000ade:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ae2:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fb92 	bl	800020c <HAL_GetTick>
 8000ae8:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8000aea:	f7ff fd0c 	bl	8000506 <LL_RCC_PLL_IsReady>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d0ab      	beq.n	8000a4a <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000af2:	f7ff fb8b 	bl	800020c <HAL_GetTick>
 8000af6:	1b00      	subs	r0, r0, r4
 8000af8:	2802      	cmp	r0, #2
 8000afa:	d9f6      	bls.n	8000aea <HAL_RCC_OscConfig+0x506>
 8000afc:	e5f7      	b.n	80006ee <HAL_RCC_OscConfig+0x10a>
      uint32_t pllcfgr = RCC->PLLCFGR;
 8000afe:	68d8      	ldr	r0, [r3, #12]
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b02:	f000 0203 	and.w	r2, r0, #3
 8000b06:	429a      	cmp	r2, r3
 8000b08:	f47f ad6f 	bne.w	80005ea <HAL_RCC_OscConfig+0x6>
 8000b0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b0e:	f000 0370 	and.w	r3, r0, #112	; 0x70
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f47f ad69 	bne.w	80005ea <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b1a:	f3c0 2306 	ubfx	r3, r0, #8, #7
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f47f ad63 	bne.w	80005ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b26:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	f47f ad5d 	bne.w	80005ea <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b30:	6c22      	ldr	r2, [r4, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000b32:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b36:	4293      	cmp	r3, r2
 8000b38:	f47f ad57 	bne.w	80005ea <HAL_RCC_OscConfig+0x6>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000b3e:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 8000b42:	1ac0      	subs	r0, r0, r3
 8000b44:	bf18      	it	ne
 8000b46:	2001      	movne	r0, #1
 8000b48:	e5d2      	b.n	80006f0 <HAL_RCC_OscConfig+0x10c>
 8000b4a:	bf00      	nop
 8000b4c:	58000400 	.word	0x58000400
 8000b50:	11c1808c 	.word	0x11c1808c

08000b54 <HAL_RCC_ClockConfig>:
{
 8000b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	b910      	cbnz	r0, 8000b64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
}
 8000b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b64:	4e73      	ldr	r6, [pc, #460]	; (8000d34 <HAL_RCC_ClockConfig+0x1e0>)
 8000b66:	6833      	ldr	r3, [r6, #0]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d316      	bcc.n	8000b9e <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	079a      	lsls	r2, r3, #30
 8000b74:	d527      	bpl.n	8000bc6 <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b76:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000b7a:	68a2      	ldr	r2, [r4, #8]
 8000b7c:	68b3      	ldr	r3, [r6, #8]
 8000b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000b86:	f7ff fb41 	bl	800020c <HAL_GetTick>
 8000b8a:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000b8c:	68b3      	ldr	r3, [r6, #8]
 8000b8e:	03db      	lsls	r3, r3, #15
 8000b90:	d419      	bmi.n	8000bc6 <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8000b92:	f7ff fb3b 	bl	800020c <HAL_GetTick>
 8000b96:	1bc0      	subs	r0, r0, r7
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9f7      	bls.n	8000b8c <HAL_RCC_ClockConfig+0x38>
 8000b9c:	e011      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9e:	6833      	ldr	r3, [r6, #0]
 8000ba0:	f023 0307 	bic.w	r3, r3, #7
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000ba8:	f7ff fb30 	bl	800020c <HAL_GetTick>
 8000bac:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bae:	6833      	ldr	r3, [r6, #0]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d0db      	beq.n	8000b70 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000bb8:	f7ff fb28 	bl	800020c <HAL_GetTick>
 8000bbc:	1bc0      	subs	r0, r0, r7
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9f5      	bls.n	8000bae <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	e7cc      	b.n	8000b60 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	0698      	lsls	r0, r3, #26
 8000bca:	d516      	bpl.n	8000bfa <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000bcc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000bd0:	6962      	ldr	r2, [r4, #20]
 8000bd2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000be0:	f7ff fb14 	bl	800020c <HAL_GetTick>
 8000be4:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000be6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000bea:	0399      	lsls	r1, r3, #14
 8000bec:	d405      	bmi.n	8000bfa <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8000bee:	f7ff fb0d 	bl	800020c <HAL_GetTick>
 8000bf2:	1bc0      	subs	r0, r0, r7
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d9f6      	bls.n	8000be6 <HAL_RCC_ClockConfig+0x92>
 8000bf8:	e7e3      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	065a      	lsls	r2, r3, #25
 8000bfe:	d517      	bpl.n	8000c30 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000c00:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000c04:	69a2      	ldr	r2, [r4, #24]
 8000c06:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000c0a:	f023 030f 	bic.w	r3, r3, #15
 8000c0e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8000c12:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8000c16:	f7ff faf9 	bl	800020c <HAL_GetTick>
 8000c1a:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000c1c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8000c20:	03db      	lsls	r3, r3, #15
 8000c22:	d405      	bmi.n	8000c30 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8000c24:	f7ff faf2 	bl	800020c <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9f6      	bls.n	8000c1c <HAL_RCC_ClockConfig+0xc8>
 8000c2e:	e7c8      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	075e      	lsls	r6, r3, #29
 8000c34:	d513      	bpl.n	8000c5e <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c36:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000c3a:	68e2      	ldr	r2, [r4, #12]
 8000c3c:	68b3      	ldr	r3, [r6, #8]
 8000c3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c46:	f7ff fae1 	bl	800020c <HAL_GetTick>
 8000c4a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000c4c:	68b3      	ldr	r3, [r6, #8]
 8000c4e:	0398      	lsls	r0, r3, #14
 8000c50:	d405      	bmi.n	8000c5e <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8000c52:	f7ff fadb 	bl	800020c <HAL_GetTick>
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f7      	bls.n	8000c4c <HAL_RCC_ClockConfig+0xf8>
 8000c5c:	e7b1      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	0719      	lsls	r1, r3, #28
 8000c62:	d514      	bpl.n	8000c8e <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c64:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8000c68:	6922      	ldr	r2, [r4, #16]
 8000c6a:	68b3      	ldr	r3, [r6, #8]
 8000c6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c74:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c76:	f7ff fac9 	bl	800020c <HAL_GetTick>
 8000c7a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000c7c:	68b3      	ldr	r3, [r6, #8]
 8000c7e:	035a      	lsls	r2, r3, #13
 8000c80:	d405      	bmi.n	8000c8e <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8000c82:	f7ff fac3 	bl	800020c <HAL_GetTick>
 8000c86:	1bc0      	subs	r0, r0, r7
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d9f7      	bls.n	8000c7c <HAL_RCC_ClockConfig+0x128>
 8000c8c:	e799      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	07db      	lsls	r3, r3, #31
 8000c92:	d40d      	bmi.n	8000cb0 <HAL_RCC_ClockConfig+0x15c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c94:	4c27      	ldr	r4, [pc, #156]	; (8000d34 <HAL_RCC_ClockConfig+0x1e0>)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d835      	bhi.n	8000d0c <HAL_RCC_ClockConfig+0x1b8>
  SystemCoreClockUpdate();
 8000ca0:	f000 fb34 	bl	800130c <SystemCoreClockUpdate>
  return HAL_InitTick (HAL_GetTickPrio());
 8000ca4:	f7ff fab8 	bl	8000218 <HAL_GetTickPrio>
}
 8000ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick (HAL_GetTickPrio());
 8000cac:	f7ff ba66 	b.w	800017c <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cb0:	6863      	ldr	r3, [r4, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d11e      	bne.n	8000cf4 <HAL_RCC_ClockConfig+0x1a0>
      if (LL_RCC_HSE_IsReady() == 0U)
 8000cb6:	f7ff fbf3 	bl	80004a0 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	f43f af4f 	beq.w	8000b5e <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cc0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8000cc4:	6862      	ldr	r2, [r4, #4]
 8000cc6:	68b3      	ldr	r3, [r6, #8]
 8000cc8:	f023 0303 	bic.w	r3, r3, #3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cd0:	f7ff fa9c 	bl	800020c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cd8:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cda:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cdc:	6862      	ldr	r2, [r4, #4]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ce6:	d0d5      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce8:	f7ff fa90 	bl	800020c <HAL_GetTick>
 8000cec:	1bc0      	subs	r0, r0, r7
 8000cee:	4540      	cmp	r0, r8
 8000cf0:	d9f3      	bls.n	8000cda <HAL_RCC_ClockConfig+0x186>
 8000cf2:	e766      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d102      	bne.n	8000cfe <HAL_RCC_ClockConfig+0x1aa>
      if (LL_RCC_PLL_IsReady() == 0U)
 8000cf8:	f7ff fc05 	bl	8000506 <LL_RCC_PLL_IsReady>
 8000cfc:	e7dd      	b.n	8000cba <HAL_RCC_ClockConfig+0x166>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000cfe:	b913      	cbnz	r3, 8000d06 <HAL_RCC_ClockConfig+0x1b2>
      if (LL_RCC_MSI_IsReady() == 0U)
 8000d00:	f7ff fbe1 	bl	80004c6 <LL_RCC_MSI_IsReady>
 8000d04:	e7d9      	b.n	8000cba <HAL_RCC_ClockConfig+0x166>
      if (LL_RCC_HSI_IsReady() == 0U)
 8000d06:	f7ff fbd1 	bl	80004ac <LL_RCC_HSI_IsReady>
 8000d0a:	e7d6      	b.n	8000cba <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	f023 0307 	bic.w	r3, r3, #7
 8000d12:	432b      	orrs	r3, r5
 8000d14:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000d16:	f7ff fa79 	bl	800020c <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d0bc      	beq.n	8000ca0 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000d26:	f7ff fa71 	bl	800020c <HAL_GetTick>
 8000d2a:	1b80      	subs	r0, r0, r6
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d9f5      	bls.n	8000d1c <HAL_RCC_ClockConfig+0x1c8>
 8000d30:	e747      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
 8000d32:	bf00      	nop
 8000d34:	58004000 	.word	0x58004000

08000d38 <HAL_RCC_GetSysClockFreq>:
 8000d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8000d3c:	b508      	push	{r3, lr}
 8000d3e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d40:	f013 030c 	ands.w	r3, r3, #12
 8000d44:	d107      	bne.n	8000d56 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000d46:	f7ff fbcc 	bl	80004e2 <LL_RCC_MSI_GetRange>
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_RCC_GetSysClockFreq+0x90>)
 8000d4c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8000d50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8000d54:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d033      	beq.n	8000dc2 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d107      	bne.n	8000d6e <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d5e:	6813      	ldr	r3, [r2, #0]
       sysclockfreq = HSE_VALUE;
 8000d60:	481a      	ldr	r0, [pc, #104]	; (8000dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8000d62:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d68:	bf08      	it	eq
 8000d6a:	4618      	moveq	r0, r3
 8000d6c:	e7f2      	b.n	8000d54 <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000d6e:	68d3      	ldr	r3, [r2, #12]
 8000d70:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d022      	beq.n	8000dbe <HAL_RCC_GetSysClockFreq+0x86>
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d118      	bne.n	8000dae <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000d7c:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = HSE_VALUE / 2U;
 8000d7e:	4813      	ldr	r0, [pc, #76]	; (8000dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8000d80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d86:	bf18      	it	ne
 8000d88:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8e:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000d90:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000d92:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000d94:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8000d98:	4358      	muls	r0, r3
 8000d9a:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da4:	0f53      	lsrs	r3, r2, #29
 8000da6:	3301      	adds	r3, #1
 8000da8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dac:	e7d2      	b.n	8000d54 <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000dae:	f7ff fb98 	bl	80004e2 <LL_RCC_MSI_GetRange>
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_RCC_GetSysClockFreq+0x90>)
 8000db4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8000db8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dbc:	e7e5      	b.n	8000d8a <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000dc0:	e7e3      	b.n	8000d8a <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000dc4:	e7c6      	b.n	8000d54 <HAL_RCC_GetSysClockFreq+0x1c>
 8000dc6:	bf00      	nop
 8000dc8:	080014d0 	.word	0x080014d0
 8000dcc:	003d0900 	.word	0x003d0900
 8000dd0:	007a1200 	.word	0x007a1200
 8000dd4:	00f42400 	.word	0x00f42400

08000dd8 <HAL_RCC_GetHCLKFreq>:
{
 8000dd8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8000dda:	f7ff ffad 	bl	8000d38 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_RCC_GetHCLKFreq+0x1c>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000dee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	08001490 	.word	0x08001490

08000df8 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfc:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8000e00:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000e04:	4770      	bx	lr

08000e06 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8000e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0a:	0902      	lsrs	r2, r0, #4
 8000e0c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000e10:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8000e14:	0100      	lsls	r0, r0, #4
 8000e16:	ea23 0302 	bic.w	r3, r3, r2
 8000e1a:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8000e1e:	4318      	orrs	r0, r3
 8000e20:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8000e24:	4770      	bx	lr

08000e26 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8000e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	4770      	bx	lr

08000e34 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e38:	6813      	ldr	r3, [r2, #0]
 8000e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	4770      	bx	lr

08000e42 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	6818      	ldr	r0, [r3, #0]
}
 8000e48:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8000e4c:	4770      	bx	lr

08000e4e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8000e50:	6805      	ldr	r5, [r0, #0]
 8000e52:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8000e56:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8000e58:	d043      	beq.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8000e5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e60:	d015      	beq.n	8000e8e <HAL_RCCEx_PeriphCLKConfig+0x40>
 8000e62:	d802      	bhi.n	8000e6a <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8000e64:	b1d3      	cbz	r3, 8000e9c <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8000e66:	2501      	movs	r5, #1
 8000e68:	e03b      	b.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8000e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e6e:	d002      	beq.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8000e70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e74:	d1f7      	bne.n	8000e66 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e80:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e84:	430b      	orrs	r3, r1
 8000e86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e029      	b.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8000e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e92:	68d3      	ldr	r3, [r2, #12]
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	60d3      	str	r3, [r2, #12]
 8000e9a:	e7ec      	b.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8000e9c:	f7ff ffca 	bl	8000e34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000ea0:	f7ff f9b4 	bl	800020c <HAL_GetTick>
 8000ea4:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8000ea6:	f7ff ffcc 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 8000eaa:	b9a0      	cbnz	r0, 8000ed6 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8000eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb0:	6861      	ldr	r1, [r4, #4]
 8000eb2:	6913      	ldr	r3, [r2, #16]
 8000eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000eb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ebc:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8000ebe:	6913      	ldr	r3, [r2, #16]
 8000ec0:	68a1      	ldr	r1, [r4, #8]
 8000ec2:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8000eca:	f7ff ffac 	bl	8000e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ece:	f7ff f99d 	bl	800020c <HAL_GetTick>
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	e0ba      	b.n	800104c <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000ed6:	f7ff f999 	bl	800020c <HAL_GetTick>
 8000eda:	1b40      	subs	r0, r0, r5
 8000edc:	2802      	cmp	r0, #2
 8000ede:	d9e2      	bls.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8000ee0:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	051a      	lsls	r2, r3, #20
 8000ee6:	d515      	bpl.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000ee8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8000eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eee:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8000ef2:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8000ef6:	42bb      	cmp	r3, r7
 8000ef8:	d00c      	beq.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8000efa:	f7ff fac1 	bl	8000480 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000efe:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8000f02:	2f00      	cmp	r7, #0
 8000f04:	f040 80ad 	bne.w	8001062 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8000f08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	07df      	lsls	r7, r3, #31
 8000f18:	d509      	bpl.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8000f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1e:	69a0      	ldr	r0, [r4, #24]
 8000f20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8000f24:	f022 0203 	bic.w	r2, r2, #3
 8000f28:	4302      	orrs	r2, r0
 8000f2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f2e:	079e      	lsls	r6, r3, #30
 8000f30:	d509      	bpl.n	8000f46 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f36:	69e0      	ldr	r0, [r4, #28]
 8000f38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8000f3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f40:	4302      	orrs	r2, r0
 8000f42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f46:	06d8      	lsls	r0, r3, #27
 8000f48:	d50c      	bpl.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8000f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8000f4c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8000f50:	0c31      	lsrs	r1, r6, #16
 8000f52:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8000f56:	0409      	lsls	r1, r1, #16
 8000f58:	ea22 0201 	bic.w	r2, r2, r1
 8000f5c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f60:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8000f64:	0699      	lsls	r1, r3, #26
 8000f66:	d50c      	bpl.n	8000f82 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8000f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f6a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8000f6e:	0c31      	lsrs	r1, r6, #16
 8000f70:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8000f74:	0409      	lsls	r1, r1, #16
 8000f76:	ea22 0201 	bic.w	r2, r2, r1
 8000f7a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f7e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f82:	075a      	lsls	r2, r3, #29
 8000f84:	d502      	bpl.n	8000f8c <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f86:	6a20      	ldr	r0, [r4, #32]
 8000f88:	f7ff ff3d 	bl	8000e06 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	071b      	lsls	r3, r3, #28
 8000f90:	d502      	bpl.n	8000f98 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f94:	f7ff ff37 	bl	8000e06 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	05df      	lsls	r7, r3, #23
 8000f9c:	d510      	bpl.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x172>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8000f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fa4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000fa8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000fac:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8000fae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8000fb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000fb6:	d17c      	bne.n	80010b2 <HAL_RCCEx_PeriphCLKConfig+0x264>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8000fb8:	68d3      	ldr	r3, [r2, #12]
 8000fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fbe:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	0596      	lsls	r6, r2, #22
 8000fc4:	d509      	bpl.n	8000fda <HAL_RCCEx_PeriphCLKConfig+0x18c>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8000fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000fcc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fd0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000fda:	0550      	lsls	r0, r2, #21
 8000fdc:	d511      	bpl.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000fe2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000fe4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000fe8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fec:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8000fee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000ff2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ff6:	f040 8093 	bne.w	8001120 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8000ffa:	68d3      	ldr	r3, [r2, #12]
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001002:	6822      	ldr	r2, [r4, #0]
 8001004:	04d1      	lsls	r1, r2, #19
 8001006:	d509      	bpl.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800100c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800100e:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001012:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001016:	4303      	orrs	r3, r0
 8001018:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800101c:	0493      	lsls	r3, r2, #18
 800101e:	d50d      	bpl.n	800103c <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001024:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001026:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001028:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800102c:	430b      	orrs	r3, r1
 800102e:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001030:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001032:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001034:	f023 0303 	bic.w	r3, r3, #3
 8001038:	430b      	orrs	r3, r1
 800103a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800103c:	4628      	mov	r0, r5
 800103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001040:	f7ff f8e4 	bl	800020c <HAL_GetTick>
 8001044:	1b40      	subs	r0, r0, r5
 8001046:	2802      	cmp	r0, #2
 8001048:	f63f af4a 	bhi.w	8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800104c:	f7ff fef9 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 8001050:	2801      	cmp	r0, #1
 8001052:	d1f5      	bne.n	8001040 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001058:	6961      	ldr	r1, [r4, #20]
 800105a:	6913      	ldr	r3, [r2, #16]
 800105c:	430b      	orrs	r3, r1
 800105e:	6113      	str	r3, [r2, #16]
 8001060:	e709      	b.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001062:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001066:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800106a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800106e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001072:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001076:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800107a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800107c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001080:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8001082:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001086:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800108a:	07db      	lsls	r3, r3, #31
 800108c:	f57f af42 	bpl.w	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8001090:	f7ff f8bc 	bl	800020c <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001098:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 800109a:	f7ff fead 	bl	8000df8 <LL_RCC_LSE_IsReady>
 800109e:	2801      	cmp	r0, #1
 80010a0:	f43f af38 	beq.w	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xc6>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a4:	f7ff f8b2 	bl	800020c <HAL_GetTick>
 80010a8:	1b80      	subs	r0, r0, r6
 80010aa:	42b8      	cmp	r0, r7
 80010ac:	d9f5      	bls.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x24c>
              ret = HAL_TIMEOUT;
 80010ae:	2503      	movs	r5, #3
 80010b0:	e730      	b.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80010b2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80010b6:	d183      	bne.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x172>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80010b8:	f7ff febc 	bl	8000e34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80010bc:	f7ff f8a6 	bl	800020c <HAL_GetTick>
 80010c0:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80010c2:	f7ff febe 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 80010c6:	b9a0      	cbnz	r0, 80010f2 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80010c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010cc:	6861      	ldr	r1, [r4, #4]
 80010ce:	6913      	ldr	r3, [r2, #16]
 80010d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010d8:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80010da:	6913      	ldr	r3, [r2, #16]
 80010dc:	68e1      	ldr	r1, [r4, #12]
 80010de:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80010e6:	f7ff fe9e 	bl	8000e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010ea:	f7ff f88f 	bl	800020c <HAL_GetTick>
 80010ee:	4606      	mov	r6, r0
 80010f0:	e00b      	b.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010f2:	f7ff f88b 	bl	800020c <HAL_GetTick>
 80010f6:	1b80      	subs	r0, r0, r6
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9e2      	bls.n	80010c2 <HAL_RCCEx_PeriphCLKConfig+0x274>
              ret = HAL_TIMEOUT;
 80010fc:	2503      	movs	r5, #3
 80010fe:	e75f      	b.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x172>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001100:	f7ff f884 	bl	800020c <HAL_GetTick>
 8001104:	1b80      	subs	r0, r0, r6
 8001106:	2802      	cmp	r0, #2
 8001108:	d8f8      	bhi.n	80010fc <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800110a:	f7ff fe9a 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 800110e:	2801      	cmp	r0, #1
 8001110:	d1f6      	bne.n	8001100 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	6961      	ldr	r1, [r4, #20]
 8001118:	6913      	ldr	r3, [r2, #16]
 800111a:	430b      	orrs	r3, r1
 800111c:	6113      	str	r3, [r2, #16]
 800111e:	e74f      	b.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x172>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001120:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8001124:	f47f af6d 	bne.w	8001002 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001128:	f7ff fe84 	bl	8000e34 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800112c:	f7ff f86e 	bl	800020c <HAL_GetTick>
 8001130:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001132:	f7ff fe86 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 8001136:	b9a0      	cbnz	r0, 8001162 <HAL_RCCEx_PeriphCLKConfig+0x314>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800113c:	6861      	ldr	r1, [r4, #4]
 800113e:	6913      	ldr	r3, [r2, #16]
 8001140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001144:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001148:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800114a:	6913      	ldr	r3, [r2, #16]
 800114c:	6921      	ldr	r1, [r4, #16]
 800114e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001152:	430b      	orrs	r3, r1
 8001154:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001156:	f7ff fe66 	bl	8000e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800115a:	f7ff f857 	bl	800020c <HAL_GetTick>
 800115e:	4606      	mov	r6, r0
 8001160:	e00b      	b.n	800117a <HAL_RCCEx_PeriphCLKConfig+0x32c>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001162:	f7ff f853 	bl	800020c <HAL_GetTick>
 8001166:	1b80      	subs	r0, r0, r6
 8001168:	2802      	cmp	r0, #2
 800116a:	d9e2      	bls.n	8001132 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
              ret = HAL_TIMEOUT;
 800116c:	2503      	movs	r5, #3
 800116e:	e748      	b.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001170:	f7ff f84c 	bl	800020c <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	2802      	cmp	r0, #2
 8001178:	d8f8      	bhi.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x31e>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800117a:	f7ff fe62 	bl	8000e42 <LL_RCC_PLLSAI1_IsReady>
 800117e:	2801      	cmp	r0, #1
 8001180:	d1f6      	bne.n	8001170 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001186:	6961      	ldr	r1, [r4, #20]
 8001188:	6913      	ldr	r3, [r2, #16]
 800118a:	430b      	orrs	r3, r1
 800118c:	6113      	str	r3, [r2, #16]
 800118e:	e738      	b.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b510      	push	{r4, lr}
 8001192:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001194:	2244      	movs	r2, #68	; 0x44
 8001196:	2100      	movs	r1, #0
 8001198:	a809      	add	r0, sp, #36	; 0x24
 800119a:	f000 f955 	bl	8001448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119e:	221c      	movs	r2, #28
 80011a0:	2100      	movs	r1, #0
 80011a2:	a801      	add	r0, sp, #4
 80011a4:	f000 f950 	bl	8001448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	2100      	movs	r1, #0
 80011aa:	2250      	movs	r2, #80	; 0x50
 80011ac:	a81a      	add	r0, sp, #104	; 0x68
 80011ae:	f000 f94b 	bl	8001448 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <SystemClock_Config+0x84>)
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	6813      	ldr	r3, [r2, #0]
 80011c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80011ca:	2322      	movs	r3, #34	; 0x22
 80011cc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2340      	movs	r3, #64	; 0x40
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011da:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f7ff f9fe 	bl	80005e4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011e8:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ea:	4621      	mov	r1, r4
 80011ec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011f6:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011fa:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fc:	f7ff fcaa 	bl	8000b54 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001206:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001208:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120c:	f7ff fe1f 	bl	8000e4e <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001210:	b02e      	add	sp, #184	; 0xb8
 8001212:	bd10      	pop	{r4, pc}
 8001214:	58000400 	.word	0x58000400

08001218 <main>:
{
 8001218:	b500      	push	{lr}
 800121a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800121c:	f7fe ffd4 	bl	80001c8 <HAL_Init>
  SystemClock_Config();
 8001220:	f7ff ffb6 	bl	8001190 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	2214      	movs	r2, #20
 8001226:	2100      	movs	r1, #0
 8001228:	a803      	add	r0, sp, #12
 800122a:	f000 f90d 	bl	8001448 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001232:	2120      	movs	r1, #32
 8001234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <main+0x70>)
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001238:	4c13      	ldr	r4, [pc, #76]	; (8001288 <main+0x70>)
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001242:	f002 0201 	and.w	r2, r2, #1
 8001246:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001248:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800124a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124c:	f042 0202 	orr.w	r2, r2, #2
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
  (void)tmpreg;
 800125c:	9b01      	ldr	r3, [sp, #4]
 800125e:	f7ff f903 	bl	8000468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2220      	movs	r2, #32
 8001264:	2301      	movs	r3, #1
 8001266:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800126a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <main+0x70>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001274:	f7ff f846 	bl	8000304 <HAL_GPIO_Init>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001278:	4620      	mov	r0, r4
 800127a:	2120      	movs	r1, #32
 800127c:	f7ff f8f9 	bl	8000472 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8001280:	20fa      	movs	r0, #250	; 0xfa
 8001282:	f7fe ffcf 	bl	8000224 <HAL_Delay>
 8001286:	e7f7      	b.n	8001278 <main+0x60>
 8001288:	48000400 	.word	0x48000400

0800128c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	4770      	bx	lr

0800128e <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	e7fe      	b.n	8001290 <HardFault_Handler>

08001292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001292:	e7fe      	b.n	8001292 <MemManage_Handler>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	e7fe      	b.n	8001294 <BusFault_Handler>

08001296 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001296:	e7fe      	b.n	8001296 <UsageFault_Handler>

08001298 <SVC_Handler>:
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:
 800129a:	4770      	bx	lr

0800129c <PendSV_Handler>:
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f7fe bfa9 	b.w	80001f4 <HAL_IncTick>
	...

080012a4 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <SystemInit+0x60>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80012aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012ae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80012b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012ba:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80012c6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012ca:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 80012d2:	4462      	add	r2, ip
 80012d4:	4002      	ands	r2, r0
 80012d6:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80012dc:	f022 0205 	bic.w	r2, r2, #5
 80012e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x64>)
 80012f2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012fe:	6199      	str	r1, [r3, #24]
}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	22041000 	.word	0x22041000

0800130c <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800130c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <SystemCoreClockUpdate+0x8c>)
 8001312:	6803      	ldr	r3, [r0, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001314:	6881      	ldr	r1, [r0, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001316:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800131a:	f001 010c 	and.w	r1, r1, #12
 800131e:	2908      	cmp	r1, #8
{
 8001320:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <SystemCoreClockUpdate+0x90>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001328:	d012      	beq.n	8001350 <SystemCoreClockUpdate+0x44>
 800132a:	290c      	cmp	r1, #12
 800132c:	d012      	beq.n	8001354 <SystemCoreClockUpdate+0x48>
 800132e:	2904      	cmp	r1, #4
 8001330:	d130      	bne.n	8001394 <SystemCoreClockUpdate+0x88>
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <SystemCoreClockUpdate+0x94>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8001334:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <SystemCoreClockUpdate+0x98>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800133c:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 800133e:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001340:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8001344:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001348:	fbb3 f3f1 	udiv	r3, r3, r1
 800134c:	6013      	str	r3, [r2, #0]

}
 800134e:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <SystemCoreClockUpdate+0x9c>)
 8001352:	e7ef      	b.n	8001334 <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001354:	68c1      	ldr	r1, [r0, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001356:	68c3      	ldr	r3, [r0, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001358:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800135c:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001360:	2902      	cmp	r1, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001362:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001366:	d10e      	bne.n	8001386 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSI_VALUE / pllm);
 8001368:	490d      	ldr	r1, [pc, #52]	; (80013a0 <SystemCoreClockUpdate+0x94>)
        pllvco = (HSE_VALUE / pllm);
 800136a:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001374:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001376:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800137a:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800137c:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800137e:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8001380:	fbb3 f3f1 	udiv	r3, r3, r1
 8001384:	e7d6      	b.n	8001334 <SystemCoreClockUpdate+0x28>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001386:	2903      	cmp	r1, #3
 8001388:	d101      	bne.n	800138e <SystemCoreClockUpdate+0x82>
        pllvco = (HSE_VALUE / pllm);
 800138a:	4907      	ldr	r1, [pc, #28]	; (80013a8 <SystemCoreClockUpdate+0x9c>)
 800138c:	e7ed      	b.n	800136a <SystemCoreClockUpdate+0x5e>
        pllvco = (msirange / pllm);
 800138e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001392:	e7ec      	b.n	800136e <SystemCoreClockUpdate+0x62>
      SystemCoreClock = msirange;
 8001394:	6014      	str	r4, [r2, #0]
      break;
 8001396:	e7ce      	b.n	8001336 <SystemCoreClockUpdate+0x2a>
 8001398:	080014d0 	.word	0x080014d0
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	00f42400 	.word	0x00f42400
 80013a4:	08001490 	.word	0x08001490
 80013a8:	007a1200 	.word	0x007a1200

080013ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d6:	f7ff ff65 	bl	80012a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013da:	f000 f811 	bl	8001400 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80013de:	f7ff ff1b 	bl	8001218 <main>

080013e2 <LoopForever>:

LoopForever:
  b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   r0, =_estack
 80013e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013e8:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80013ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013f0:	08001518 	.word	0x08001518
  ldr r2, =_sbss
 80013f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013f8:	20000030 	.word	0x20000030

080013fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_IRQHandler>
	...

08001400 <__libc_init_array>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	4e0d      	ldr	r6, [pc, #52]	; (8001438 <__libc_init_array+0x38>)
 8001404:	4c0d      	ldr	r4, [pc, #52]	; (800143c <__libc_init_array+0x3c>)
 8001406:	1ba4      	subs	r4, r4, r6
 8001408:	10a4      	asrs	r4, r4, #2
 800140a:	2500      	movs	r5, #0
 800140c:	42a5      	cmp	r5, r4
 800140e:	d109      	bne.n	8001424 <__libc_init_array+0x24>
 8001410:	4e0b      	ldr	r6, [pc, #44]	; (8001440 <__libc_init_array+0x40>)
 8001412:	4c0c      	ldr	r4, [pc, #48]	; (8001444 <__libc_init_array+0x44>)
 8001414:	f000 f820 	bl	8001458 <_init>
 8001418:	1ba4      	subs	r4, r4, r6
 800141a:	10a4      	asrs	r4, r4, #2
 800141c:	2500      	movs	r5, #0
 800141e:	42a5      	cmp	r5, r4
 8001420:	d105      	bne.n	800142e <__libc_init_array+0x2e>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001428:	4798      	blx	r3
 800142a:	3501      	adds	r5, #1
 800142c:	e7ee      	b.n	800140c <__libc_init_array+0xc>
 800142e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001432:	4798      	blx	r3
 8001434:	3501      	adds	r5, #1
 8001436:	e7f2      	b.n	800141e <__libc_init_array+0x1e>
 8001438:	08001510 	.word	0x08001510
 800143c:	08001510 	.word	0x08001510
 8001440:	08001510 	.word	0x08001510
 8001444:	08001514 	.word	0x08001514

08001448 <memset>:
 8001448:	4402      	add	r2, r0
 800144a:	4603      	mov	r3, r0
 800144c:	4293      	cmp	r3, r2
 800144e:	d100      	bne.n	8001452 <memset+0xa>
 8001450:	4770      	bx	lr
 8001452:	f803 1b01 	strb.w	r1, [r3], #1
 8001456:	e7f9      	b.n	800144c <memset+0x4>

08001458 <_init>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	bf00      	nop
 800145c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145e:	bc08      	pop	{r3}
 8001460:	469e      	mov	lr, r3
 8001462:	4770      	bx	lr

08001464 <_fini>:
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001466:	bf00      	nop
 8001468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146a:	bc08      	pop	{r3}
 800146c:	469e      	mov	lr, r3
 800146e:	4770      	bx	lr

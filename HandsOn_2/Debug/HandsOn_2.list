
HandsOn_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a524  0800a524  0001a524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000004  0800a534  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000030  0800a560  00020030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000041  200000cc  0800a5f9  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000110  0800a63a  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000098  20000124  0800a64b  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005dc  200001bc  0800a6e3  000201bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000798  0800a6e3  00020798  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 0000001c  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000018b  2003001c  2003001c  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301a8  200301a8  00030000  2**2
                  ALLOC
 17 .debug_info   00030ec5  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00005916  00000000  00000000  000510b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002508  00000000  00000000  000569c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002268  00000000  00000000  00058ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002a127  00000000  00000000  0005b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0001fe37  00000000  00000000  0008525f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000ec200  00000000  00000000  000a5096  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00191296  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009900  00000000  00000000  00191314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001bc 	.word	0x200001bc
 800015c:	00000000 	.word	0x00000000
 8000160:	080095ec 	.word	0x080095ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c0 	.word	0x200001c0
 800017c:	080095ec 	.word	0x080095ec

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fd1c 	bl	8000f00 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f818 	bl	80004fc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000568 	.word	0x20000568

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  LPM_Conf_t LowPowerModeConfiguration;

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004de:	f7ff ffd7 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /**< Configure low power manager */
  LowPowerModeConfiguration.Stop_Mode_Config = LPM_StopMode2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	713b      	strb	r3, [r7, #4]
  LowPowerModeConfiguration.OFF_Mode_Config = LPM_Standby;
 80004e6:	2300      	movs	r3, #0
 80004e8:	717b      	strb	r3, [r7, #5]
  LPM_SetConf(&LowPowerModeConfiguration);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f007 ffad 	bl	800844c <LPM_SetConf>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004f2:	bf00      	nop
}
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000502:	f007 fdb7 	bl	8008074 <TL_Init>

  /**< System channel initialization */
  SCH_RegTask( CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, shci_user_evt_proc );
 8000506:	4910      	ldr	r1, [pc, #64]	; (8000548 <appe_Tl_Init+0x4c>)
 8000508:	2003      	movs	r0, #3
 800050a:	f008 f8d1 	bl	80086b0 <SCH_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <appe_Tl_Init+0x50>)
 8000510:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <appe_Tl_Init+0x54>)
 8000514:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <appe_Tl_Init+0x58>)
 800051c:	f007 fc74 	bl	8007e08 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <appe_Tl_Init+0x5c>)
 8000522:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <appe_Tl_Init+0x60>)
 8000526:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <appe_Tl_Init+0x64>)
 800052a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800052c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000530:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	4618      	mov	r0, r3
 8000538:	f007 fee2 	bl	8008300 <TL_MM_Init>

  TL_Enable();
 800053c:	f007 fd94 	bl	8008068 <TL_Enable>

  return;
 8000540:	bf00      	nop
}
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	08007e41 	.word	0x08007e41
 800054c:	200306e4 	.word	0x200306e4
 8000550:	08000565 	.word	0x08000565
 8000554:	0800057b 	.word	0x0800057b
 8000558:	200308fc 	.word	0x200308fc
 800055c:	200307f0 	.word	0x200307f0
 8000560:	200301a8 	.word	0x200301a8

08000564 <APPE_SysStatusNot>:

  return;
}

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800056e:	bf00      	nop
}
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000582:	f007 ff2d 	bl	80083e0 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000586:	f008 fa37 	bl	80089f8 <APP_BLE_Init>
  LPM_SetOffMode(1U << CFG_LPM_APP, LPM_OffMode_En);
 800058a:	2101      	movs	r1, #1
 800058c:	2001      	movs	r0, #1
 800058e:	f007 ff71 	bl	8008474 <LPM_SetOffMode>
  return;
 8000592:	bf00      	nop
}
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <SCH_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void SCH_Idle( void )
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  LPM_EnterModeSelected();
#endif
  return;
 800059e:	bf00      	nop
}
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SCH_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void SCH_EvtIdle( uint32_t evt_waited_bm )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  SCH_Run(~0);
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f007 ffb0 	bl	8008518 <SCH_Run>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  SCH_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2008      	movs	r0, #8
 80005cc:	f008 f88e 	bl	80086ec <SCH_SetTask>
  return;
 80005d0:	bf00      	nop
}
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SCH_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e0:	2002      	movs	r0, #2
 80005e2:	f008 f8e9 	bl	80087b8 <SCH_SetEvt>
  return;
 80005e6:	bf00      	nop
}
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  SCH_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005f6:	2002      	movs	r0, #2
 80005f8:	f008 f8fc 	bl	80087f4 <SCH_WaitEvt>
  return;
 80005fc:	bf00      	nop
}
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_Init>:
#include <string.h>

static char tempLcdBuffer[32];

void LCD_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000608:	f001 f8de 	bl	80017c8 <SSD1306_Init>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <LCD_BLE_PrintLocalName>:
  SSD1306_Puts(role, &Font_7x10, SSD1306_COLOR_BLACK);
  SSD1306_UpdateScreen();
}

void LCD_BLE_PrintLocalName(const char * name)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  SSD1306_DrawFilledRectangle(31,0,80,19,SSD1306_COLOR_BLACK);
 8000618:	2300      	movs	r3, #0
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2313      	movs	r3, #19
 800061e:	2250      	movs	r2, #80	; 0x50
 8000620:	2100      	movs	r1, #0
 8000622:	201f      	movs	r0, #31
 8000624:	f001 fbd6 	bl	8001dd4 <SSD1306_DrawFilledRectangle>
  SSD1306_GotoXY(31,0);
 8000628:	2100      	movs	r1, #0
 800062a:	201f      	movs	r0, #31
 800062c:	f001 fa16 	bl	8001a5c <SSD1306_GotoXY>
  SSD1306_Puts(name + 1, &Font_11x18, SSD1306_COLOR_WHITE);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	2201      	movs	r2, #1
 8000636:	4905      	ldr	r1, [pc, #20]	; (800064c <LCD_BLE_PrintLocalName+0x3c>)
 8000638:	4618      	mov	r0, r3
 800063a:	f001 faab 	bl	8001b94 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800063e:	f001 f967 	bl	8001910 <SSD1306_UpdateScreen>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004

08000650 <LCD_BLE_PrintLogo>:

void LCD_BLE_PrintLogo(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  uint16_t x, y;

  for (y = 0; y < BLUETOOTH_LOGO_HEIGHT; y++)
 8000656:	2300      	movs	r3, #0
 8000658:	80bb      	strh	r3, [r7, #4]
 800065a:	e01f      	b.n	800069c <LCD_BLE_PrintLogo+0x4c>
  {
    for (x = 0; x < (BLUETOOTH_LOGO_WIDTH); x++)
 800065c:	2300      	movs	r3, #0
 800065e:	80fb      	strh	r3, [r7, #6]
 8000660:	e016      	b.n	8000690 <LCD_BLE_PrintLogo+0x40>
    {
      SSD1306_DrawPixel(22 - x, y, (SSD1306_COLOR_t)((bluetooth_logo[y] >> (x + 2)) & 0x00000001));
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f1c3 0316 	rsb	r3, r3, #22
 8000668:	b298      	uxth	r0, r3
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <LCD_BLE_PrintLogo+0x60>)
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	3302      	adds	r3, #2
 8000676:	fa42 f303 	asr.w	r3, r2, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	f001 f989 	bl	800199c <SSD1306_DrawPixel>
    for (x = 0; x < (BLUETOOTH_LOGO_WIDTH); x++)
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	3301      	adds	r3, #1
 800068e:	80fb      	strh	r3, [r7, #6]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	2b15      	cmp	r3, #21
 8000694:	d9e5      	bls.n	8000662 <LCD_BLE_PrintLogo+0x12>
  for (y = 0; y < BLUETOOTH_LOGO_HEIGHT; y++)
 8000696:	88bb      	ldrh	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	80bb      	strh	r3, [r7, #4]
 800069c:	88bb      	ldrh	r3, [r7, #4]
 800069e:	2b1f      	cmp	r3, #31
 80006a0:	d9dc      	bls.n	800065c <LCD_BLE_PrintLogo+0xc>
    }
  }
  SSD1306_UpdateScreen();
 80006a2:	f001 f935 	bl	8001910 <SSD1306_UpdateScreen>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08009678 	.word	0x08009678

080006b4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80006be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80006c2:	4905      	ldr	r1, [pc, #20]	; (80006d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58000800 	.word	0x58000800

080006dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4904      	ldr	r1, [pc, #16]	; (80006fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	600b      	str	r3, [r1, #0]

}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	58000800 	.word	0x58000800

08000700 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <ReadRtcSsrValue+0x3c>)
 8000708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070a:	b29b      	uxth	r3, r3
 800070c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <ReadRtcSsrValue+0x3c>)
 8000710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000712:	b29b      	uxth	r3, r3
 8000714:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000716:	e005      	b.n	8000724 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <ReadRtcSsrValue+0x3c>)
 800071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000720:	b29b      	uxth	r3, r3
 8000722:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d1f5      	bne.n	8000718 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800072c:	683b      	ldr	r3, [r7, #0]
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40002800 	.word	0x40002800

08000740 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	491d      	ldr	r1, [pc, #116]	; (80007c8 <LinkTimerAfter+0x88>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	440b      	add	r3, r1
 800075e:	3315      	adds	r3, #21
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b06      	cmp	r3, #6
 8000768:	d009      	beq.n	800077e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800076a:	7bfa      	ldrb	r2, [r7, #15]
 800076c:	4916      	ldr	r1, [pc, #88]	; (80007c8 <LinkTimerAfter+0x88>)
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	3314      	adds	r3, #20
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	4911      	ldr	r1, [pc, #68]	; (80007c8 <LinkTimerAfter+0x88>)
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3315      	adds	r3, #21
 800078e:	7bfa      	ldrb	r2, [r7, #15]
 8000790:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <LinkTimerAfter+0x88>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3314      	adds	r3, #20
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <LinkTimerAfter+0x88>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3315      	adds	r3, #21
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]

  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000030 	.word	0x20000030

080007cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <LinkTimerBefore+0xb8>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d032      	beq.n	800084e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007e8:	79ba      	ldrb	r2, [r7, #6]
 80007ea:	4927      	ldr	r1, [pc, #156]	; (8000888 <LinkTimerBefore+0xbc>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	3314      	adds	r3, #20
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	4922      	ldr	r1, [pc, #136]	; (8000888 <LinkTimerBefore+0xbc>)
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3315      	adds	r3, #21
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	491d      	ldr	r1, [pc, #116]	; (8000888 <LinkTimerBefore+0xbc>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3315      	adds	r3, #21
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	4918      	ldr	r1, [pc, #96]	; (8000888 <LinkTimerBefore+0xbc>)
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	3314      	adds	r3, #20
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000838:	79ba      	ldrb	r2, [r7, #6]
 800083a:	4913      	ldr	r1, [pc, #76]	; (8000888 <LinkTimerBefore+0xbc>)
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	440b      	add	r3, r1
 8000846:	3314      	adds	r3, #20
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800084c:	e014      	b.n	8000878 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	490d      	ldr	r1, [pc, #52]	; (8000888 <LinkTimerBefore+0xbc>)
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3315      	adds	r3, #21
 800085e:	79ba      	ldrb	r2, [r7, #6]
 8000860:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	4908      	ldr	r1, [pc, #32]	; (8000888 <LinkTimerBefore+0xbc>)
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	3314      	adds	r3, #20
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	701a      	strb	r2, [r3, #0]
  return;
 8000876:	bf00      	nop
}
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000c0 	.word	0x200000c0
 8000888:	20000030 	.word	0x20000030

0800088c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <linkTimer+0x144>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b06      	cmp	r3, #6
 800089e:	d118      	bne.n	80008d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <linkTimer+0x144>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <linkTimer+0x148>)
 80008a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <linkTimer+0x144>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	4949      	ldr	r1, [pc, #292]	; (80009d8 <linkTimer+0x14c>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	440b      	add	r3, r1
 80008be:	3315      	adds	r3, #21
 80008c0:	2206      	movs	r2, #6
 80008c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <linkTimer+0x150>)
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	81fb      	strh	r3, [r7, #14]
 80008d0:	e078      	b.n	80009c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008d2:	f000 f909 	bl	8000ae8 <ReturnTimeElapsed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	493e      	ldr	r1, [pc, #248]	; (80009d8 <linkTimer+0x14c>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3308      	adds	r3, #8
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4419      	add	r1, r3
 80008f2:	4839      	ldr	r0, [pc, #228]	; (80009d8 <linkTimer+0x14c>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4403      	add	r3, r0
 80008fe:	3308      	adds	r3, #8
 8000900:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	4934      	ldr	r1, [pc, #208]	; (80009d8 <linkTimer+0x14c>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3308      	adds	r3, #8
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <linkTimer+0x144>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <linkTimer+0x14c>)
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4413      	add	r3, r2
 800092a:	3308      	adds	r3, #8
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d337      	bcc.n	80009a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <linkTimer+0x144>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800093a:	7b7a      	ldrb	r2, [r7, #13]
 800093c:	4926      	ldr	r1, [pc, #152]	; (80009d8 <linkTimer+0x14c>)
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	440b      	add	r3, r1
 8000948:	3315      	adds	r3, #21
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800094e:	e013      	b.n	8000978 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000950:	7b7a      	ldrb	r2, [r7, #13]
 8000952:	4921      	ldr	r1, [pc, #132]	; (80009d8 <linkTimer+0x14c>)
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	3315      	adds	r3, #21
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000964:	7b7a      	ldrb	r2, [r7, #13]
 8000966:	491c      	ldr	r1, [pc, #112]	; (80009d8 <linkTimer+0x14c>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3315      	adds	r3, #21
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000978:	7b3b      	ldrb	r3, [r7, #12]
 800097a:	2b06      	cmp	r3, #6
 800097c:	d00b      	beq.n	8000996 <linkTimer+0x10a>
 800097e:	7b3a      	ldrb	r2, [r7, #12]
 8000980:	4915      	ldr	r1, [pc, #84]	; (80009d8 <linkTimer+0x14c>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	440b      	add	r3, r1
 800098c:	3308      	adds	r3, #8
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	429a      	cmp	r2, r3
 8000994:	d2dc      	bcs.n	8000950 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000996:	7b7a      	ldrb	r2, [r7, #13]
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fecf 	bl	8000740 <LinkTimerAfter>
 80009a2:	e00f      	b.n	80009c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <linkTimer+0x144>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff0c 	bl	80007cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <linkTimer+0x144>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <linkTimer+0x148>)
 80009bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <linkTimer+0x144>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009c4:	89fb      	ldrh	r3, [r7, #14]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c0 	.word	0x200000c0
 80009d4:	200000c1 	.word	0x200000c1
 80009d8:	20000030 	.word	0x20000030
 80009dc:	200000c4 	.word	0x200000c4

080009e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	4613      	mov	r3, r2
 80009ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <UnlinkTimer+0xf8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d111      	bne.n	8000a20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <UnlinkTimer+0xf8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <UnlinkTimer+0xfc>)
 8000a04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	4935      	ldr	r1, [pc, #212]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	440b      	add	r3, r1
 8000a14:	3315      	adds	r3, #21
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <UnlinkTimer+0xf8>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e03e      	b.n	8000a9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	492f      	ldr	r1, [pc, #188]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3314      	adds	r3, #20
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	3315      	adds	r3, #21
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a48:	79f9      	ldrb	r1, [r7, #7]
 8000a4a:	7bfa      	ldrb	r2, [r7, #15]
 8000a4c:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	4403      	add	r3, r0
 8000a58:	3315      	adds	r3, #21
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	4920      	ldr	r1, [pc, #128]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	440b      	add	r3, r1
 8000a6a:	3315      	adds	r3, #21
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d013      	beq.n	8000a9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a76:	79f9      	ldrb	r1, [r7, #7]
 8000a78:	7bba      	ldrb	r2, [r7, #14]
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	440b      	add	r3, r1
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4403      	add	r3, r0
 8000a86:	3314      	adds	r3, #20
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2d8      	uxtb	r0, r3
 8000a8c:	4914      	ldr	r1, [pc, #80]	; (8000ae0 <UnlinkTimer+0x100>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	3314      	adds	r3, #20
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	490f      	ldr	r1, [pc, #60]	; (8000ae0 <UnlinkTimer+0x100>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	330c      	adds	r3, #12
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <UnlinkTimer+0xf8>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	d107      	bne.n	8000acc <UnlinkTimer+0xec>
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <UnlinkTimer+0x104>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  return;
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
}
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	200000c1 	.word	0x200000c1
 8000ae0:	20000030 	.word	0x20000030
 8000ae4:	200000c4 	.word	0x200000c4

08000ae8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <ReturnTimeElapsed+0x70>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af6:	d026      	beq.n	8000b46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000af8:	f7ff fe02 	bl	8000700 <ReadRtcSsrValue>
 8000afc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <ReturnTimeElapsed+0x70>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d805      	bhi.n	8000b14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <ReturnTimeElapsed+0x70>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	e00a      	b.n	8000b2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <ReturnTimeElapsed+0x74>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <ReturnTimeElapsed+0x70>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <ReturnTimeElapsed+0x78>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <ReturnTimeElapsed+0x7c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	40d3      	lsrs	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	e001      	b.n	8000b4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b29b      	uxth	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000c4 	.word	0x200000c4
 8000b5c:	200001de 	.word	0x200001de
 8000b60:	200001dd 	.word	0x200001dd
 8000b64:	200001dc 	.word	0x200001dc

08000b68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d108      	bne.n	8000b8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b78:	f7ff fdc2 	bl	8000700 <ReadRtcSsrValue>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <RestartWakeupCounter+0xa8>)
 8000b80:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f001 fe5b 	bl	800283e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b88:	e03e      	b.n	8000c08 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d803      	bhi.n	8000b98 <RestartWakeupCounter+0x30>
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <RestartWakeupCounter+0xac>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d002      	beq.n	8000b9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b9e:	bf00      	nop
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <RestartWakeupCounter+0xb0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f7      	beq.n	8000ba0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <RestartWakeupCounter+0xb0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <RestartWakeupCounter+0xb0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000bc4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <RestartWakeupCounter+0xb4>)
 8000bc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bcc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f001 fe43 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <RestartWakeupCounter+0xb8>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	0c1b      	lsrs	r3, r3, #16
 8000bda:	041b      	lsls	r3, r3, #16
 8000bdc:	88fa      	ldrh	r2, [r7, #6]
 8000bde:	4910      	ldr	r1, [pc, #64]	; (8000c20 <RestartWakeupCounter+0xb8>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000be4:	f7ff fd8c 	bl	8000700 <ReadRtcSsrValue>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <RestartWakeupCounter+0xa8>)
 8000bec:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <RestartWakeupCounter+0xb0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <RestartWakeupCounter+0xb0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c00:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000c02:	f3af 8000 	nop.w
  return ;
 8000c06:	bf00      	nop
}
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	200001dc 	.word	0x200001dc
 8000c18:	200001d8 	.word	0x200001d8
 8000c1c:	58000800 	.word	0x58000800
 8000c20:	40002800 	.word	0x40002800

08000c24 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <RescheduleTimerList+0x124>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d108      	bne.n	8000c4a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000c38:	bf00      	nop
 8000c3a:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <RescheduleTimerList+0x128>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f7      	bne.n	8000c3a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000c4a:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <RescheduleTimerList+0x128>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <RescheduleTimerList+0x128>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c5c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <RescheduleTimerList+0x12c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	493b      	ldr	r1, [pc, #236]	; (8000d54 <RescheduleTimerList+0x130>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3308      	adds	r3, #8
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c78:	f7ff ff36 	bl	8000ae8 <ReturnTimeElapsed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d205      	bcs.n	8000c94 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <RescheduleTimerList+0x134>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e04d      	b.n	8000d30 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <RescheduleTimerList+0x138>)
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d906      	bls.n	8000cb4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <RescheduleTimerList+0x138>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <RescheduleTimerList+0x134>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e03d      	b.n	8000d30 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <RescheduleTimerList+0x134>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc4:	e034      	b.n	8000d30 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	4922      	ldr	r1, [pc, #136]	; (8000d54 <RescheduleTimerList+0x130>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d20a      	bcs.n	8000cf4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	491c      	ldr	r1, [pc, #112]	; (8000d54 <RescheduleTimerList+0x130>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3308      	adds	r3, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e013      	b.n	8000d1c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	4917      	ldr	r1, [pc, #92]	; (8000d54 <RescheduleTimerList+0x130>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3308      	adds	r3, #8
 8000d04:	6819      	ldr	r1, [r3, #0]
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <RescheduleTimerList+0x130>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4403      	add	r3, r0
 8000d18:	3308      	adds	r3, #8
 8000d1a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <RescheduleTimerList+0x130>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3315      	adds	r3, #21
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d1c7      	bne.n	8000cc6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff15 	bl	8000b68 <RestartWakeupCounter>

  return ;
 8000d3e:	bf00      	nop
}
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40002800 	.word	0x40002800
 8000d4c:	200001d8 	.word	0x200001d8
 8000d50:	200000c0 	.word	0x200000c0
 8000d54:	20000030 	.word	0x20000030
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	200001e0 	.word	0x200001e0

08000d60 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000d66:	f3ef 8310 	mrs	r3, PRIMASK
 8000d6a:	617b      	str	r3, [r7, #20]
  return(result);
 8000d6c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	22ca      	movs	r2, #202	; 0xca
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d7c:	4b5b      	ldr	r3, [pc, #364]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d86:	4b59      	ldr	r3, [pc, #356]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	4b57      	ldr	r3, [pc, #348]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d98:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000da2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000da6:	4953      	ldr	r1, [pc, #332]	; (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	330c      	adds	r3, #12
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d170      	bne.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000dbc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dc0:	494c      	ldr	r1, [pc, #304]	; (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	440b      	add	r3, r1
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000dd0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dd4:	4947      	ldr	r1, [pc, #284]	; (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	3310      	adds	r3, #16
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d04e      	beq.n	8000e8e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000df0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000df4:	493f      	ldr	r1, [pc, #252]	; (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330d      	adds	r3, #13
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d125      	bne.n	8000e56 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fde5 	bl	80009e0 <UnlinkTimer>
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000e20:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e24:	4933      	ldr	r1, [pc, #204]	; (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3304      	adds	r3, #4
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fa3e 	bl	80012bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	22ca      	movs	r2, #202	; 0xca
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2253      	movs	r2, #83	; 0x53
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
 8000e54:	e013      	b.n	8000e7e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f99f 	bl	80011a8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	22ca      	movs	r2, #202	; 0xca
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2253      	movs	r2, #83	; 0x53
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	4619      	mov	r1, r3
 8000e86:	69b8      	ldr	r0, [r7, #24]
 8000e88:	f000 fa9e 	bl	80013c8 <HW_TS_RTC_Int_AppNot>
 8000e8c:	e024      	b.n	8000ed8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000e8e:	f7ff fec9 	bl	8000c24 <RescheduleTimerList>
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f383 8810 	msr	PRIMASK, r3
 8000e9c:	e01c      	b.n	8000ed8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e9e:	bf00      	nop
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f7      	beq.n	8000ea0 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ec4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ec8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000ee2:	bf00      	nop
}
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001d8 	.word	0x200001d8
 8000ef0:	200000c0 	.word	0x200000c0
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	200000c8 	.word	0x200000c8
 8000efc:	58000800 	.word	0x58000800

08000f00 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000f0c:	4a60      	ldr	r2, [pc, #384]	; (8001090 <HW_TS_Init+0x190>)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f12:	4b5f      	ldr	r3, [pc, #380]	; (8001090 <HW_TS_Init+0x190>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	22ca      	movs	r2, #202	; 0xca
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8000f1c:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HW_TS_Init+0x190>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2253      	movs	r2, #83	; 0x53
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <HW_TS_Init+0x194>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4a5a      	ldr	r2, [pc, #360]	; (8001094 <HW_TS_Init+0x194>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000f32:	4b58      	ldr	r3, [pc, #352]	; (8001094 <HW_TS_Init+0x194>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f1c3 0304 	rsb	r3, r3, #4
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b54      	ldr	r3, [pc, #336]	; (8001098 <HW_TS_Init+0x198>)
 8000f46:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <HW_TS_Init+0x194>)
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f50:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f54:	60fa      	str	r2, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	fa92 f2a2 	rbit	r2, r2
 8000f5c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	40d3      	lsrs	r3, r2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b4b      	ldr	r3, [pc, #300]	; (800109c <HW_TS_Init+0x19c>)
 8000f6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f70:	4b48      	ldr	r3, [pc, #288]	; (8001094 <HW_TS_Init+0x194>)
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HW_TS_Init+0x1a0>)
 8000f82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f84:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <HW_TS_Init+0x1a0>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a44      	ldr	r2, [pc, #272]	; (800109c <HW_TS_Init+0x19c>)
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f96:	4a40      	ldr	r2, [pc, #256]	; (8001098 <HW_TS_Init+0x198>)
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	40d3      	lsrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d904      	bls.n	8000fb2 <HW_TS_Init+0xb2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HW_TS_Init+0x1a4>)
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	801a      	strh	r2, [r3, #0]
 8000fb0:	e003      	b.n	8000fba <HW_TS_Init+0xba>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HW_TS_Init+0x1a4>)
 8000fb8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000fba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fbe:	f7ff fb8d 	bl	80006dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000fc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fc6:	f7ff fb75 	bl	80006b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d143      	bne.n	8001058 <HW_TS_Init+0x158>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HW_TS_Init+0x1a8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HW_TS_Init+0x1ac>)
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
 8000fe2:	e00c      	b.n	8000ffe <HW_TS_Init+0xfe>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fe4:	7dfa      	ldrb	r2, [r7, #23]
 8000fe6:	4932      	ldr	r1, [pc, #200]	; (80010b0 <HW_TS_Init+0x1b0>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	330c      	adds	r3, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d9ef      	bls.n	8000fe4 <HW_TS_Init+0xe4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HW_TS_Init+0x1b4>)
 8001006:	2206      	movs	r2, #6
 8001008:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HW_TS_Init+0x190>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HW_TS_Init+0x190>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800101c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HW_TS_Init+0x190>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HW_TS_Init+0x190>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001032:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HW_TS_Init+0x1b8>)
 8001036:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800103a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800103c:	2003      	movs	r0, #3
 800103e:	f001 fc0c 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HW_TS_Init+0x190>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HW_TS_Init+0x190>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	e00a      	b.n	800106e <HW_TS_Init+0x16e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HW_TS_Init+0x190>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HW_TS_Init+0x16e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001068:	2003      	movs	r0, #3
 800106a:	f001 fbe8 	bl	800283e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HW_TS_Init+0x190>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001078:	2200      	movs	r2, #0
 800107a:	2103      	movs	r1, #3
 800107c:	2003      	movs	r0, #3
 800107e:	f001 fb9c 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001082:	2003      	movs	r0, #3
 8001084:	f001 fbb3 	bl	80027ee <HAL_NVIC_EnableIRQ>

  return;
 8001088:	bf00      	nop
}
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001d8 	.word	0x200001d8
 8001094:	40002800 	.word	0x40002800
 8001098:	200001dc 	.word	0x200001dc
 800109c:	200001dd 	.word	0x200001dd
 80010a0:	200001de 	.word	0x200001de
 80010a4:	200001e0 	.word	0x200001e0
 80010a8:	200000c8 	.word	0x200000c8
 80010ac:	200000c4 	.word	0x200000c4
 80010b0:	20000030 	.word	0x20000030
 80010b4:	200000c0 	.word	0x200000c0
 80010b8:	58000800 	.word	0x58000800

080010bc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80010bc:	b480      	push	{r7}
 80010be:	b08b      	sub	sp, #44	; 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80010d2:	f3ef 8310 	mrs	r3, PRIMASK
 80010d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80010d8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010de:	e004      	b.n	80010ea <HW_TS_Create+0x2e>
  {
    loop++;
 80010e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e4:	3301      	adds	r3, #1
 80010e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d80c      	bhi.n	800110c <HW_TS_Create+0x50>
 80010f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010f6:	492b      	ldr	r1, [pc, #172]	; (80011a4 <HW_TS_Create+0xe8>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	330c      	adds	r3, #12
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	2b06      	cmp	r3, #6
 8001112:	d037      	beq.n	8001184 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001114:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001118:	4922      	ldr	r1, [pc, #136]	; (80011a4 <HW_TS_Create+0xe8>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	330c      	adds	r3, #12
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001134:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001138:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HW_TS_Create+0xe8>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	3310      	adds	r3, #16
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800114a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800114e:	4915      	ldr	r1, [pc, #84]	; (80011a4 <HW_TS_Create+0xe8>)
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	330d      	adds	r3, #13
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001160:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <HW_TS_Create+0xe8>)
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800117a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001182:	e007      	b.n	8001194 <HW_TS_Create+0xd8>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001198:	4618      	mov	r0, r3
 800119a:	372c      	adds	r7, #44	; 0x2c
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000030 	.word	0x20000030

080011a8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80011b2:	f3ef 8310 	mrs	r3, PRIMASK
 80011b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80011b8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011be:	2003      	movs	r0, #3
 80011c0:	f001 fb23 	bl	800280a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HW_TS_Stop+0xfc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	22ca      	movs	r2, #202	; 0xca
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HW_TS_Stop+0xfc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2253      	movs	r2, #83	; 0x53
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4933      	ldr	r1, [pc, #204]	; (80012a8 <HW_TS_Stop+0x100>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	330c      	adds	r3, #12
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d148      	bne.n	8001282 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fbf3 	bl	80009e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HW_TS_Stop+0x104>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d135      	bne.n	8001272 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HW_TS_Stop+0x108>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d108      	bne.n	8001226 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001214:	bf00      	nop
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <HW_TS_Stop+0xfc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f7      	bne.n	8001216 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HW_TS_Stop+0xfc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HW_TS_Stop+0xfc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001238:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800123a:	bf00      	nop
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HW_TS_Stop+0xfc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f7      	beq.n	800123c <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HW_TS_Stop+0xfc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HW_TS_Stop+0xfc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001260:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HW_TS_Stop+0x10c>)
 8001264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001268:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800126a:	2003      	movs	r0, #3
 800126c:	f001 faf5 	bl	800285a <HAL_NVIC_ClearPendingIRQ>
 8001270:	e007      	b.n	8001282 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HW_TS_Stop+0x110>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	7cfa      	ldrb	r2, [r7, #19]
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800127e:	f7ff fcd1 	bl	8000c24 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HW_TS_Stop+0xfc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800128c:	2003      	movs	r0, #3
 800128e:	f001 faae 	bl	80027ee <HAL_NVIC_EnableIRQ>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800129c:	bf00      	nop
}
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200001d8 	.word	0x200001d8
 80012a8:	20000030 	.word	0x20000030
 80012ac:	200000c0 	.word	0x200000c0
 80012b0:	40002800 	.word	0x40002800
 80012b4:	58000800 	.word	0x58000800
 80012b8:	200000c1 	.word	0x200000c1

080012bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	493b      	ldr	r1, [pc, #236]	; (80013b8 <HW_TS_Start+0xfc>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	330c      	adds	r3, #12
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d103      	bne.n	80012e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff60 	bl	80011a8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80012e8:	f3ef 8310 	mrs	r3, PRIMASK
 80012ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80012ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f4:	2003      	movs	r0, #3
 80012f6:	f001 fa88 	bl	800280a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HW_TS_Start+0x100>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	22ca      	movs	r2, #202	; 0xca
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HW_TS_Start+0x100>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2253      	movs	r2, #83	; 0x53
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	4929      	ldr	r1, [pc, #164]	; (80013b8 <HW_TS_Start+0xfc>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	330c      	adds	r3, #12
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001322:	79fa      	ldrb	r2, [r7, #7]
 8001324:	4924      	ldr	r1, [pc, #144]	; (80013b8 <HW_TS_Start+0xfc>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	3308      	adds	r3, #8
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	491f      	ldr	r1, [pc, #124]	; (80013b8 <HW_TS_Start+0xfc>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fa9d 	bl	800088c <linkTimer>
 8001352:	4603      	mov	r3, r0
 8001354:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HW_TS_Start+0x104>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HW_TS_Start+0x108>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	7c7a      	ldrb	r2, [r7, #17]
 8001364:	429a      	cmp	r2, r3
 8001366:	d002      	beq.n	800136e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001368:	f7ff fc5c 	bl	8000c24 <RescheduleTimerList>
 800136c:	e013      	b.n	8001396 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	4911      	ldr	r1, [pc, #68]	; (80013b8 <HW_TS_Start+0xfc>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	3308      	adds	r3, #8
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	1ac9      	subs	r1, r1, r3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <HW_TS_Start+0xfc>)
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4403      	add	r3, r0
 8001392:	3308      	adds	r3, #8
 8001394:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HW_TS_Start+0x100>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a0:	2003      	movs	r0, #3
 80013a2:	f001 fa24 	bl	80027ee <HAL_NVIC_EnableIRQ>
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013b0:	bf00      	nop
}
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000030 	.word	0x20000030
 80013bc:	200001d8 	.word	0x200001d8
 80013c0:	200000c0 	.word	0x200000c0
 80013c4:	200000c1 	.word	0x200000c1

080013c8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	460b      	mov	r3, r1
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4798      	blx	r3

  return;
 80013da:	bf00      	nop
}
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LL_RCC_LSE_SetDriveCapability>:
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f2:	f023 0218 	bic.w	r2, r3, #24
 80013f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 ffee 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f812 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f94c 	bl	80016e8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001450:	f000 f88e 	bl	8001570 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001454:	f000 f8fc 	bl	8001650 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001458:	f000 f8ca 	bl	80015f0 <MX_RF_Init>
  MX_RTC_Init();
 800145c:	f000 f8d0 	bl	8001600 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  APPE_Init();
 8001460:	f7ff f82a 	bl	80004b8 <APPE_Init>
	  // Run Scheduler task list in Scheduler.c
	  /*
	   * Note: The Template files imported in their own INC and SRC folders which were not compiled.
	   * Moved the files to the Core INC/SRC folders.  Fixed the issue.
	   */
	  SCH_Run(~0);
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f007 f856 	bl	8008518 <SCH_Run>
 800146c:	e7fa      	b.n	8001464 <main+0x24>
	...

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ae      	sub	sp, #184	; 0xb8
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800147a:	2248      	movs	r2, #72	; 0x48
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f008 f8ab 	bl	80095da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 f89b 	bl	80095da <memset>

  /** Configure LSE Drive Capability
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff ff9c 	bl	80013e2 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <SystemClock_Config+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <SystemClock_Config+0xfc>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SystemClock_Config+0xfc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80014c6:	2307      	movs	r3, #7
 80014c8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fbb8 	bl	8003c60 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014f6:	f000 f95f 	bl	80017b8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80014fa:	236f      	movs	r3, #111	; 0x6f
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014fe:	2302      	movs	r3, #2
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fef1 	bl	8004304 <HAL_RCC_ClockConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001528:	f000 f946 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800152c:	f643 0309 	movw	r3, #14345	; 0x3809
 8001530:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001536:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800153c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001548:	2302      	movs	r3, #2
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800154c:	2310      	movs	r3, #16
 800154e:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fb11 	bl	8004b7a <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800155e:	f000 f92b 	bl	80017b8 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	37b8      	adds	r7, #184	; 0xb8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	58000400 	.word	0x58000400

08001570 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C3_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C3_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0060112F;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C3_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <MX_I2C3_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C3_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_I2C3_Init+0x74>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C3_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_I2C3_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C3_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C3_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C3_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_I2C3_Init+0x74>)
 80015ac:	f001 fb0f 	bl	8002bce <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f000 f8ff 	bl	80017b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_I2C3_Init+0x74>)
 80015be:	f001 ff05 	bl	80033cc <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f8f6 	bl	80017b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_I2C3_Init+0x74>)
 80015d0:	f001 ff47 	bl	8003462 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 f8ed 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000490 	.word	0x20000490
 80015e8:	40005c00 	.word	0x40005c00
 80015ec:	0060112f 	.word	0x0060112f

080015f0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <MX_RTC_Init+0x48>)
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <MX_RTC_Init+0x4c>)
 8001608:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_RTC_Init+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_RTC_Init+0x48>)
 8001612:	227f      	movs	r2, #127	; 0x7f
 8001614:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_RTC_Init+0x48>)
 8001618:	22ff      	movs	r2, #255	; 0xff
 800161a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_RTC_Init+0x48>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_RTC_Init+0x48>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_RTC_Init+0x48>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_RTC_Init+0x48>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_RTC_Init+0x48>)
 8001636:	f003 fcff 	bl	8005038 <HAL_RTC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001640:	f000 f8ba 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000568 	.word	0x20000568
 800164c:	40002800 	.word	0x40002800

08001650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <MX_USART1_UART_Init+0x94>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001698:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 800169a:	f003 fddb 	bl	8005254 <HAL_UART_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016a4:	f000 f888 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 80016ac:	f004 ffe1 	bl	8006672 <HAL_UARTEx_SetTxFifoThreshold>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016b6:	f000 f87f 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 80016be:	f005 f816 	bl	80066ee <HAL_UARTEx_SetRxFifoThreshold>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f000 f876 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_USART1_UART_Init+0x90>)
 80016ce:	f004 ff97 	bl	8006600 <HAL_UARTEx_DisableFifoMode>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f86e 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200004dc 	.word	0x200004dc
 80016e4:	40013800 	.word	0x40013800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	2004      	movs	r0, #4
 80016fe:	f7ff fe86 	bl	800140e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fe83 	bl	800140e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	2002      	movs	r0, #2
 800170a:	f7ff fe80 	bl	800140e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_VSS_GPIO_Port, DISP_VSS_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2108      	movs	r1, #8
 8001712:	4826      	ldr	r0, [pc, #152]	; (80017ac <MX_GPIO_Init+0xc4>)
 8001714:	f001 fa20 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_VDD_GPIO_Port, DISP_VDD_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2101      	movs	r1, #1
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001720:	f001 fa1a 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	2121      	movs	r1, #33	; 0x21
 8001728:	4821      	ldr	r0, [pc, #132]	; (80017b0 <MX_GPIO_Init+0xc8>)
 800172a:	f001 fa15 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISP_VSS_Pin */
  GPIO_InitStruct.Pin = DISP_VSS_Pin;
 800172e:	2308      	movs	r3, #8
 8001730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DISP_VSS_GPIO_Port, &GPIO_InitStruct);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	481a      	ldr	r0, [pc, #104]	; (80017ac <MX_GPIO_Init+0xc4>)
 8001744:	f001 f898 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_VDD_Pin */
  GPIO_InitStruct.Pin = DISP_VDD_Pin;
 8001748:	2301      	movs	r3, #1
 800174a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DISP_VDD_GPIO_Port, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f001 f88a 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8001764:	2310      	movs	r3, #16
 8001766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xcc>)
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_GPIO_Init+0xc4>)
 8001776:	f001 f87f 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 800177a:	2321      	movs	r3, #33	; 0x21
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <MX_GPIO_Init+0xc8>)
 8001790:	f001 f872 	bl	8002878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	200a      	movs	r0, #10
 800179a:	f001 f80e 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800179e:	200a      	movs	r0, #10
 80017a0:	f001 f825 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000400 	.word	0x48000400
 80017b4:	10210000 	.word	0x10210000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Init I2C */
  //ssd1306_I2C_Init();

  /* Power-Up the display */
  HAL_GPIO_WritePin(DISP_VSS_GPIO_Port, DISP_VSS_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2108      	movs	r1, #8
 80017d0:	484c      	ldr	r0, [pc, #304]	; (8001904 <SSD1306_Init+0x13c>)
 80017d2:	f001 f9c1 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISP_VDD_GPIO_Port, DISP_VDD_Pin, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2101      	movs	r1, #1
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 f9bb 	bl	8002b58 <HAL_GPIO_WritePin>

  /* A little delay for the SSD1306 power-up */
  HAL_Delay(100);
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f000 fea2 	bl	800252c <HAL_Delay>

  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017ec:	2201      	movs	r2, #1
 80017ee:	2178      	movs	r1, #120	; 0x78
 80017f0:	4845      	ldr	r0, [pc, #276]	; (8001908 <SSD1306_Init+0x140>)
 80017f2:	f001 fb6f 	bl	8002ed4 <HAL_I2C_IsDeviceReady>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SSD1306_Init+0x38>
    /* Return false */
    return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e07f      	b.n	8001900 <SSD1306_Init+0x138>
  }

  /* A little delay for the SSD1306 initialization */
  HAL_Delay(50);
 8001800:	2032      	movs	r0, #50	; 0x32
 8001802:	f000 fe93 	bl	800252c <HAL_Delay>

  /* Init LCD */
  SSD1306_WRITECOMMAND(0xAE); //display off
 8001806:	22ae      	movs	r2, #174	; 0xae
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 fb66 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001810:	22a8      	movs	r2, #168	; 0xa8
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f000 fb61 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x1F); //
 800181a:	221f      	movs	r2, #31
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f000 fb5c 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001824:	22d3      	movs	r2, #211	; 0xd3
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	; 0x78
 800182a:	f000 fb57 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x00); //
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	; 0x78
 8001834:	f000 fb52 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2100      	movs	r1, #0
 800183c:	2078      	movs	r0, #120	; 0x78
 800183e:	f000 fb4d 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001842:	2220      	movs	r2, #32
 8001844:	2100      	movs	r1, #0
 8001846:	2078      	movs	r0, #120	; 0x78
 8001848:	f000 fb48 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x02); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800184c:	2202      	movs	r2, #2
 800184e:	2100      	movs	r1, #0
 8001850:	2078      	movs	r0, #120	; 0x78
 8001852:	f000 fb43 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001856:	22a1      	movs	r2, #161	; 0xa1
 8001858:	2100      	movs	r1, #0
 800185a:	2078      	movs	r0, #120	; 0x78
 800185c:	f000 fb3e 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001860:	22c8      	movs	r2, #200	; 0xc8
 8001862:	2100      	movs	r1, #0
 8001864:	2078      	movs	r0, #120	; 0x78
 8001866:	f000 fb39 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800186a:	22da      	movs	r2, #218	; 0xda
 800186c:	2100      	movs	r1, #0
 800186e:	2078      	movs	r0, #120	; 0x78
 8001870:	f000 fb34 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x02); //
 8001874:	2202      	movs	r2, #2
 8001876:	2100      	movs	r1, #0
 8001878:	2078      	movs	r0, #120	; 0x78
 800187a:	f000 fb2f 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800187e:	2281      	movs	r2, #129	; 0x81
 8001880:	2100      	movs	r1, #0
 8001882:	2078      	movs	r0, #120	; 0x78
 8001884:	f000 fb2a 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x1F); //
 8001888:	221f      	movs	r2, #31
 800188a:	2100      	movs	r1, #0
 800188c:	2078      	movs	r0, #120	; 0x78
 800188e:	f000 fb25 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001892:	22a4      	movs	r2, #164	; 0xa4
 8001894:	2100      	movs	r1, #0
 8001896:	2078      	movs	r0, #120	; 0x78
 8001898:	f000 fb20 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xA6); //--set normal display mode
 800189c:	22a6      	movs	r2, #166	; 0xa6
 800189e:	2100      	movs	r1, #0
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f000 fb1b 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80018a6:	22d5      	movs	r2, #213	; 0xd5
 80018a8:	2100      	movs	r1, #0
 80018aa:	2078      	movs	r0, #120	; 0x78
 80018ac:	f000 fb16 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x80); //--set divide ratio
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	2100      	movs	r1, #0
 80018b4:	2078      	movs	r0, #120	; 0x78
 80018b6:	f000 fb11 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80018ba:	228d      	movs	r2, #141	; 0x8d
 80018bc:	2100      	movs	r1, #0
 80018be:	2078      	movs	r0, #120	; 0x78
 80018c0:	f000 fb0c 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x14); //
 80018c4:	2214      	movs	r2, #20
 80018c6:	2100      	movs	r1, #0
 80018c8:	2078      	movs	r0, #120	; 0x78
 80018ca:	f000 fb07 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x2E); //Disable Scroll
 80018ce:	222e      	movs	r2, #46	; 0x2e
 80018d0:	2100      	movs	r1, #0
 80018d2:	2078      	movs	r0, #120	; 0x78
 80018d4:	f000 fb02 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018d8:	22af      	movs	r2, #175	; 0xaf
 80018da:	2100      	movs	r1, #0
 80018dc:	2078      	movs	r0, #120	; 0x78
 80018de:	f000 fafd 	bl	8001edc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0x2F); //Disable Scroll*/

  //SSD1306_WRITECOMMAND(0xA5); //--turn on SSD1306 panel

  /* Clear screen */
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f842 	bl	800196c <SSD1306_Fill>

  /* Update screen */
  SSD1306_UpdateScreen();
 80018e8:	f000 f812 	bl	8001910 <SSD1306_UpdateScreen>

  /* Set default values */
  SSD1306.CurrentX = 0;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <SSD1306_Init+0x144>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <SSD1306_Init+0x144>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	805a      	strh	r2, [r3, #2]

  /* Initialized OK */
  SSD1306.Initialized = 1;
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <SSD1306_Init+0x144>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	715a      	strb	r2, [r3, #5]

  /* Return OK */
  return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	48000800 	.word	0x48000800
 8001908:	20000490 	.word	0x20000490
 800190c:	200003e4 	.word	0x200003e4

08001910 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  uint8_t m;

  for (m = 0; m < 4; m++) {
 8001916:	2300      	movs	r3, #0
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e01d      	b.n	8001958 <SSD1306_UpdateScreen+0x48>
    SSD1306_WRITECOMMAND(0xB0+m);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	3b50      	subs	r3, #80	; 0x50
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 fad8 	bl	8001edc <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2078      	movs	r0, #120	; 0x78
 8001932:	f000 fad3 	bl	8001edc <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x10);
 8001936:	2210      	movs	r2, #16
 8001938:	2100      	movs	r1, #0
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 face 	bl	8001edc <ssd1306_I2C_Write>

    /* Write multi data */
    ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	01db      	lsls	r3, r3, #7
 8001944:	4a08      	ldr	r2, [pc, #32]	; (8001968 <SSD1306_UpdateScreen+0x58>)
 8001946:	441a      	add	r2, r3
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f000 fa8f 	bl	8001e70 <ssd1306_I2C_WriteMulti>
  for (m = 0; m < 4; m++) {
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	3301      	adds	r3, #1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d9de      	bls.n	800191c <SSD1306_UpdateScreen+0xc>
  }
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001e4 	.word	0x200001e4

0800196c <SSD1306_Fill>:
  for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
    SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
  }
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Set memory */
  memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <SSD1306_Fill+0x14>
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <SSD1306_Fill+0x16>
 8001980:	23ff      	movs	r3, #255	; 0xff
 8001982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001986:	4619      	mov	r1, r3
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <SSD1306_Fill+0x2c>)
 800198a:	f007 fe26 	bl	80095da <memset>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001e4 	.word	0x200001e4

0800199c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
 80019a6:	460b      	mov	r3, r1
 80019a8:	80bb      	strh	r3, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	70fb      	strb	r3, [r7, #3]
  if (
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b7f      	cmp	r3, #127	; 0x7f
 80019b2:	d848      	bhi.n	8001a46 <SSD1306_DrawPixel+0xaa>
      x >= SSD1306_WIDTH ||
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	d845      	bhi.n	8001a46 <SSD1306_DrawPixel+0xaa>
            /* Error */
            return;
          }

  /* Check if pixels are inverted */
  if (SSD1306.Inverted) {
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <SSD1306_DrawPixel+0xb8>)
 80019bc:	791b      	ldrb	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <SSD1306_DrawPixel+0x34>
    color = (SSD1306_COLOR_t)!color;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	70fb      	strb	r3, [r7, #3]
  }

  /* Set color */
  if (color == SSD1306_COLOR_WHITE) {
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11a      	bne.n	8001a0c <SSD1306_DrawPixel+0x70>
    SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	b298      	uxth	r0, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	01db      	lsls	r3, r3, #7
 80019e2:	4413      	add	r3, r2
 80019e4:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <SSD1306_DrawPixel+0xbc>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	b25a      	sxtb	r2, r3
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b259      	sxtb	r1, r3
 80019fc:	88fa      	ldrh	r2, [r7, #6]
 80019fe:	4603      	mov	r3, r0
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	4413      	add	r3, r2
 8001a04:	b2c9      	uxtb	r1, r1
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <SSD1306_DrawPixel+0xbc>)
 8001a08:	54d1      	strb	r1, [r2, r3]
 8001a0a:	e01d      	b.n	8001a48 <SSD1306_DrawPixel+0xac>
  } else {
    SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a0c:	88fa      	ldrh	r2, [r7, #6]
 8001a0e:	88bb      	ldrh	r3, [r7, #4]
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	b298      	uxth	r0, r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	01db      	lsls	r3, r3, #7
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <SSD1306_DrawPixel+0xbc>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4013      	ands	r3, r2
 8001a34:	b259      	sxtb	r1, r3
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	01db      	lsls	r3, r3, #7
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2c9      	uxtb	r1, r1
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SSD1306_DrawPixel+0xbc>)
 8001a42:	54d1      	strb	r1, [r2, r3]
 8001a44:	e000      	b.n	8001a48 <SSD1306_DrawPixel+0xac>
            return;
 8001a46:	bf00      	nop
  }
}
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200003e4 	.word	0x200003e4
 8001a58:	200001e4 	.word	0x200001e4

08001a5c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	460a      	mov	r2, r1
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	80bb      	strh	r3, [r7, #4]
  /* Set write pointers */
  SSD1306.CurrentX = x;
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SSD1306_GotoXY+0x28>)
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	8013      	strh	r3, [r2, #0]
  SSD1306.CurrentY = y;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <SSD1306_GotoXY+0x28>)
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	8053      	strh	r3, [r2, #2]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200003e4 	.word	0x200003e4

08001a88 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71bb      	strb	r3, [r7, #6]
  uint32_t i, b, j;

  /* Check if valid character */
  if ((ch <= 126) && (ch >= 32))
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b7e      	cmp	r3, #126	; 0x7e
 8001a9c:	d869      	bhi.n	8001b72 <SSD1306_Putc+0xea>
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b1f      	cmp	r3, #31
 8001aa2:	d966      	bls.n	8001b72 <SSD1306_Putc+0xea>
  {
    /* Check available space in LCD */
    if (
        SSD1306_WIDTH < (SSD1306.CurrentX + Font->FontWidth) ||
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <SSD1306_Putc+0x108>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
    if (
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	dc07      	bgt.n	8001ac4 <SSD1306_Putc+0x3c>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font->FontHeight)
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <SSD1306_Putc+0x108>)
 8001ab6:	885b      	ldrh	r3, [r3, #2]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	4413      	add	r3, r2
        SSD1306_WIDTH < (SSD1306.CurrentX + Font->FontWidth) ||
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	dd01      	ble.n	8001ac8 <SSD1306_Putc+0x40>
    ) {
      /* Error */
      return 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e05e      	b.n	8001b86 <SSD1306_Putc+0xfe>
    }

    /* Go through font */
    for (i = 0; i < Font->FontHeight; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e04b      	b.n	8001b66 <SSD1306_Putc+0xde>
      b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	3b20      	subs	r3, #32
 8001ad6:	6839      	ldr	r1, [r7, #0]
 8001ad8:	7849      	ldrb	r1, [r1, #1]
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
      for (j = 0; j < Font->FontWidth; j++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e030      	b.n	8001b54 <SSD1306_Putc+0xcc>
        if ((b << j) & 0x8000) {
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <SSD1306_Putc+0x9c>
          SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b10:	885a      	ldrh	r2, [r3, #2]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	79ba      	ldrb	r2, [r7, #6]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff ff3d 	bl	800199c <SSD1306_DrawPixel>
 8001b22:	e014      	b.n	8001b4e <SSD1306_Putc+0xc6>
        } else {
          SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b298      	uxth	r0, r3
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b32:	885a      	ldrh	r2, [r3, #2]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b299      	uxth	r1, r3
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7ff ff27 	bl	800199c <SSD1306_DrawPixel>
      for (j = 0; j < Font->FontWidth; j++) {
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3301      	adds	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d3c8      	bcc.n	8001af2 <SSD1306_Putc+0x6a>
    for (i = 0; i < Font->FontHeight; i++) {
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d3ad      	bcc.n	8001ace <SSD1306_Putc+0x46>
      }
    }
  }

  /* Increase pointer */
  SSD1306.CurrentX += Font->FontWidth;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <SSD1306_Putc+0x108>)
 8001b82:	801a      	strh	r2, [r3, #0]

  /* Return character written */
  return ch;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200003e4 	.word	0x200003e4

08001b94 <SSD1306_Puts>:

char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Write characters */
  while (*str) {
 8001ba2:	e012      	b.n	8001bca <SSD1306_Puts+0x36>
    /* Write character by character */
    if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff6b 	bl	8001a88 <SSD1306_Putc>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d002      	beq.n	8001bc4 <SSD1306_Puts+0x30>
      /* Return error */
      return *str;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	e008      	b.n	8001bd6 <SSD1306_Puts+0x42>
    }

    /* Increase string pointer */
    str++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
  while (*str) {
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1e8      	bne.n	8001ba4 <SSD1306_Puts+0x10>
  }

  /* Everything OK, zero should be returned */
  return *str;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001bde:	b590      	push	{r4, r7, lr}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4604      	mov	r4, r0
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	461a      	mov	r2, r3
 8001bec:	4623      	mov	r3, r4
 8001bee:	80fb      	strh	r3, [r7, #6]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	80bb      	strh	r3, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	803b      	strh	r3, [r7, #0]
  int16_t dx, dy, sx, sy, err, e2, i, tmp;

  /* Check for overflow */
  if (x0 >= SSD1306_WIDTH) {
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001c00:	d901      	bls.n	8001c06 <SSD1306_DrawLine+0x28>
    x0 = SSD1306_WIDTH - 1;
 8001c02:	237f      	movs	r3, #127	; 0x7f
 8001c04:	80fb      	strh	r3, [r7, #6]
  }
  if (x1 >= SSD1306_WIDTH) {
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	2b7f      	cmp	r3, #127	; 0x7f
 8001c0a:	d901      	bls.n	8001c10 <SSD1306_DrawLine+0x32>
    x1 = SSD1306_WIDTH - 1;
 8001c0c:	237f      	movs	r3, #127	; 0x7f
 8001c0e:	807b      	strh	r3, [r7, #2]
  }
  if (y0 >= SSD1306_HEIGHT) {
 8001c10:	88bb      	ldrh	r3, [r7, #4]
 8001c12:	2b1f      	cmp	r3, #31
 8001c14:	d901      	bls.n	8001c1a <SSD1306_DrawLine+0x3c>
    y0 = SSD1306_HEIGHT - 1;
 8001c16:	231f      	movs	r3, #31
 8001c18:	80bb      	strh	r3, [r7, #4]
  }
  if (y1 >= SSD1306_HEIGHT) {
 8001c1a:	883b      	ldrh	r3, [r7, #0]
 8001c1c:	2b1f      	cmp	r3, #31
 8001c1e:	d901      	bls.n	8001c24 <SSD1306_DrawLine+0x46>
    y1 = SSD1306_HEIGHT - 1;
 8001c20:	231f      	movs	r3, #31
 8001c22:	803b      	strh	r3, [r7, #0]
  }

  dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d205      	bcs.n	8001c38 <SSD1306_DrawLine+0x5a>
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	e004      	b.n	8001c42 <SSD1306_DrawLine+0x64>
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	827b      	strh	r3, [r7, #18]
  dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001c44:	88ba      	ldrh	r2, [r7, #4]
 8001c46:	883b      	ldrh	r3, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d205      	bcs.n	8001c58 <SSD1306_DrawLine+0x7a>
 8001c4c:	883a      	ldrh	r2, [r7, #0]
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	e004      	b.n	8001c62 <SSD1306_DrawLine+0x84>
 8001c58:	88ba      	ldrh	r2, [r7, #4]
 8001c5a:	883b      	ldrh	r3, [r7, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	823b      	strh	r3, [r7, #16]
  sx = (x0 < x1) ? 1 : -1;
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d201      	bcs.n	8001c70 <SSD1306_DrawLine+0x92>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e001      	b.n	8001c74 <SSD1306_DrawLine+0x96>
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	81fb      	strh	r3, [r7, #14]
  sy = (y0 < y1) ? 1 : -1;
 8001c76:	88ba      	ldrh	r2, [r7, #4]
 8001c78:	883b      	ldrh	r3, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d201      	bcs.n	8001c82 <SSD1306_DrawLine+0xa4>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e001      	b.n	8001c86 <SSD1306_DrawLine+0xa8>
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	81bb      	strh	r3, [r7, #12]
  err = ((dx > dy) ? dx : -dy) / 2;
 8001c88:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dd06      	ble.n	8001ca2 <SSD1306_DrawLine+0xc4>
 8001c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	e006      	b.n	8001cb0 <SSD1306_DrawLine+0xd2>
 8001ca2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	0fda      	lsrs	r2, r3, #31
 8001caa:	4413      	add	r3, r2
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	82fb      	strh	r3, [r7, #22]

  if (dx == 0) {
 8001cb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d129      	bne.n	8001d0e <SSD1306_DrawLine+0x130>
    if (y1 < y0) {
 8001cba:	883a      	ldrh	r2, [r7, #0]
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d205      	bcs.n	8001cce <SSD1306_DrawLine+0xf0>
      tmp = y1;
 8001cc2:	883b      	ldrh	r3, [r7, #0]
 8001cc4:	813b      	strh	r3, [r7, #8]
      y1 = y0;
 8001cc6:	88bb      	ldrh	r3, [r7, #4]
 8001cc8:	803b      	strh	r3, [r7, #0]
      y0 = tmp;
 8001cca:	893b      	ldrh	r3, [r7, #8]
 8001ccc:	80bb      	strh	r3, [r7, #4]
    }

    if (x1 < x0) {
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d205      	bcs.n	8001ce2 <SSD1306_DrawLine+0x104>
      tmp = x1;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	813b      	strh	r3, [r7, #8]
      x1 = x0;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	807b      	strh	r3, [r7, #2]
      x0 = tmp;
 8001cde:	893b      	ldrh	r3, [r7, #8]
 8001ce0:	80fb      	strh	r3, [r7, #6]
    }

    /* Vertical line */
    for (i = y0; i <= y1; i++) {
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	82bb      	strh	r3, [r7, #20]
 8001ce6:	e00c      	b.n	8001d02 <SSD1306_DrawLine+0x124>
      SSD1306_DrawPixel(x0, i, c);
 8001ce8:	8ab9      	ldrh	r1, [r7, #20]
 8001cea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fe53 	bl	800199c <SSD1306_DrawPixel>
    for (i = y0; i <= y1; i++) {
 8001cf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	82bb      	strh	r3, [r7, #20]
 8001d02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d06:	883b      	ldrh	r3, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dded      	ble.n	8001ce8 <SSD1306_DrawLine+0x10a>
    }

    /* Return from function */
    return;
 8001d0c:	e05f      	b.n	8001dce <SSD1306_DrawLine+0x1f0>
  }

  if (dy == 0) {
 8001d0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d129      	bne.n	8001d6a <SSD1306_DrawLine+0x18c>
    if (y1 < y0) {
 8001d16:	883a      	ldrh	r2, [r7, #0]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d205      	bcs.n	8001d2a <SSD1306_DrawLine+0x14c>
      tmp = y1;
 8001d1e:	883b      	ldrh	r3, [r7, #0]
 8001d20:	813b      	strh	r3, [r7, #8]
      y1 = y0;
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	803b      	strh	r3, [r7, #0]
      y0 = tmp;
 8001d26:	893b      	ldrh	r3, [r7, #8]
 8001d28:	80bb      	strh	r3, [r7, #4]
    }

    if (x1 < x0) {
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d205      	bcs.n	8001d3e <SSD1306_DrawLine+0x160>
      tmp = x1;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	813b      	strh	r3, [r7, #8]
      x1 = x0;
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	807b      	strh	r3, [r7, #2]
      x0 = tmp;
 8001d3a:	893b      	ldrh	r3, [r7, #8]
 8001d3c:	80fb      	strh	r3, [r7, #6]
    }

    /* Horizontal line */
    for (i = x0; i <= x1; i++) {
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	82bb      	strh	r3, [r7, #20]
 8001d42:	e00c      	b.n	8001d5e <SSD1306_DrawLine+0x180>
      SSD1306_DrawPixel(i, y0, c);
 8001d44:	8abb      	ldrh	r3, [r7, #20]
 8001d46:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d4a:	88b9      	ldrh	r1, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe25 	bl	800199c <SSD1306_DrawPixel>
    for (i = x0; i <= x1; i++) {
 8001d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	82bb      	strh	r3, [r7, #20]
 8001d5e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dded      	ble.n	8001d44 <SSD1306_DrawLine+0x166>
    }

    /* Return from function */
    return;
 8001d68:	e031      	b.n	8001dce <SSD1306_DrawLine+0x1f0>
  }

  while (1) {
    SSD1306_DrawPixel(x0, y0, c);
 8001d6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d6e:	88b9      	ldrh	r1, [r7, #4]
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fe12 	bl	800199c <SSD1306_DrawPixel>
    if (x0 == x1 && y0 == y1) {
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d103      	bne.n	8001d88 <SSD1306_DrawLine+0x1aa>
 8001d80:	88ba      	ldrh	r2, [r7, #4]
 8001d82:	883b      	ldrh	r3, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d021      	beq.n	8001dcc <SSD1306_DrawLine+0x1ee>
      break;
    }
    e2 = err;
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	817b      	strh	r3, [r7, #10]
    if (e2 > -dx) {
 8001d8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d94:	425b      	negs	r3, r3
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dd08      	ble.n	8001dac <SSD1306_DrawLine+0x1ce>
      err -= dy;
 8001d9a:	8afa      	ldrh	r2, [r7, #22]
 8001d9c:	8a3b      	ldrh	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	82fb      	strh	r3, [r7, #22]
      x0 += sx;
 8001da4:	89fa      	ldrh	r2, [r7, #14]
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4413      	add	r3, r2
 8001daa:	80fb      	strh	r3, [r7, #6]
    }
    if (e2 < dy) {
 8001dac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001db0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dad8      	bge.n	8001d6a <SSD1306_DrawLine+0x18c>
      err += dx;
 8001db8:	8afa      	ldrh	r2, [r7, #22]
 8001dba:	8a7b      	ldrh	r3, [r7, #18]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	82fb      	strh	r3, [r7, #22]
      y0 += sy;
 8001dc2:	89ba      	ldrh	r2, [r7, #12]
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	80bb      	strh	r3, [r7, #4]
    SSD1306_DrawPixel(x0, y0, c);
 8001dca:	e7ce      	b.n	8001d6a <SSD1306_DrawLine+0x18c>
      break;
 8001dcc:	bf00      	nop
    }
  }
}
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <SSD1306_DrawFilledRectangle>:
  SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
  SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
  SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	80fb      	strh	r3, [r7, #6]
 8001de6:	4603      	mov	r3, r0
 8001de8:	80bb      	strh	r3, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	803b      	strh	r3, [r7, #0]
  uint8_t i;

  /* Check input parameters */
  if (
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	2b7f      	cmp	r3, #127	; 0x7f
 8001df6:	d836      	bhi.n	8001e66 <SSD1306_DrawFilledRectangle+0x92>
      x >= SSD1306_WIDTH ||
 8001df8:	88bb      	ldrh	r3, [r7, #4]
 8001dfa:	2b1f      	cmp	r3, #31
 8001dfc:	d833      	bhi.n	8001e66 <SSD1306_DrawFilledRectangle+0x92>
            /* Return error */
            return;
          }

  /* Check width and height */
  if ((x + w) >= SSD1306_WIDTH) {
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4413      	add	r3, r2
 8001e04:	2b7f      	cmp	r3, #127	; 0x7f
 8001e06:	dd03      	ble.n	8001e10 <SSD1306_DrawFilledRectangle+0x3c>
    w = SSD1306_WIDTH - x;
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e0e:	807b      	strh	r3, [r7, #2]
  }
  if ((y + h) >= SSD1306_HEIGHT) {
 8001e10:	88ba      	ldrh	r2, [r7, #4]
 8001e12:	883b      	ldrh	r3, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	2b1f      	cmp	r3, #31
 8001e18:	dd03      	ble.n	8001e22 <SSD1306_DrawFilledRectangle+0x4e>
    h = SSD1306_HEIGHT - y;
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	f1c3 0320 	rsb	r3, r3, #32
 8001e20:	803b      	strh	r3, [r7, #0]
  }

  /* Draw lines */
  for (i = 0; i <= h; i++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e018      	b.n	8001e5a <SSD1306_DrawFilledRectangle+0x86>
    /* Draw lines */
    SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b299      	uxth	r1, r3
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	4413      	add	r3, r2
 8001e38:	b29c      	uxth	r4, r3
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	4622      	mov	r2, r4
 8001e50:	f7ff fec5 	bl	8001bde <SSD1306_DrawLine>
  for (i = 0; i <= h; i++) {
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	883a      	ldrh	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d2e1      	bcs.n	8001e28 <SSD1306_DrawFilledRectangle+0x54>
 8001e64:	e000      	b.n	8001e68 <SSD1306_DrawFilledRectangle+0x94>
            return;
 8001e66:	bf00      	nop
  }
}
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}
	...

08001e70 <ssd1306_I2C_WriteMulti>:
  SSD1306_WRITECOMMAND(0xAE);
}

uint8_t dt[sizeof(SSD1306_Buffer)+1];

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	603a      	str	r2, [r7, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	71bb      	strb	r3, [r7, #6]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80bb      	strh	r3, [r7, #4]
  //uint8_t dt[count + 1];
  dt[0] = reg;
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <ssd1306_I2C_WriteMulti+0x64>)
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	7013      	strb	r3, [r2, #0]
  uint8_t i;
  for(i = 1; i <= count; i++)
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e00a      	b.n	8001ea8 <ssd1306_I2C_WriteMulti+0x38>
    dt[i] = data[i-1];
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	441a      	add	r2, r3
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	7811      	ldrb	r1, [r2, #0]
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <ssd1306_I2C_WriteMulti+0x64>)
 8001ea0:	54d1      	strb	r1, [r2, r3]
  for(i = 1; i <= count; i++)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d2ef      	bcs.n	8001e92 <ssd1306_I2C_WriteMulti+0x22>
  HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 100);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	2364      	movs	r3, #100	; 0x64
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <ssd1306_I2C_WriteMulti+0x64>)
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <ssd1306_I2C_WriteMulti+0x68>)
 8001ec6:	f000 ff11 	bl	8002cec <HAL_I2C_Master_Transmit>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000058c 	.word	0x2000058c
 8001ed8:	20000490 	.word	0x20000490

08001edc <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	71bb      	strb	r3, [r7, #6]
 8001eea:	4613      	mov	r3, r2
 8001eec:	717b      	strb	r3, [r7, #5]
  uint8_t dt[2];
  dt[0] = reg;
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	733b      	strb	r3, [r7, #12]
  dt[1] = data;
 8001ef2:	797b      	ldrb	r3, [r7, #5]
 8001ef4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 100);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	f107 020c 	add.w	r2, r7, #12
 8001efe:	2364      	movs	r3, #100	; 0x64
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2302      	movs	r3, #2
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <ssd1306_I2C_Write+0x38>)
 8001f06:	f000 fef1 	bl	8002cec <HAL_I2C_Master_Transmit>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000490 	.word	0x20000490

08001f18 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001f26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	cafecafe 	.word	0xcafecafe

08001f54 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_AHB2_GRP1_EnableClock>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4313      	orrs	r3, r2
 8002022:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002030:	68fb      	ldr	r3, [r7, #12]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
	OTP_ID0_t * p_otp;

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t *)OTP_Read(0);
 8002044:	2000      	movs	r0, #0
 8002046:	f006 fa3f 	bl	80084c8 <OTP_Read>
 800204a:	6078      	str	r0, [r7, #4]
	if(p_otp)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff5e 	bl	8001f18 <LL_RCC_HSE_SetCapacitorTuning>
	}

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800205c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002060:	f7ff ffa2 	bl	8001fa8 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_I2C_MspInit+0x58>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d116      	bne.n	80020bc <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	2004      	movs	r0, #4
 8002090:	f7ff ff71 	bl	8001f76 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002094:	2303      	movs	r3, #3
 8002096:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002098:	2312      	movs	r3, #18
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020a4:	2304      	movs	r3, #4
 80020a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <HAL_I2C_MspInit+0x5c>)
 80020b0:	f000 fbe2 	bl	8002878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80020b8:	f7ff ff8f 	bl	8001fda <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005c00 	.word	0x40005c00
 80020c8:	48000800 	.word	0x48000800

080020cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RTC_MspInit+0x20>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020de:	f7ff ff39 	bl	8001f54 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40002800 	.word	0x40002800

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_UART_MspInit+0x58>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d116      	bne.n	8002140 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002112:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002116:	f7ff ff79 	bl	800200c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2002      	movs	r0, #2
 800211c:	f7ff ff2b 	bl	8001f76 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002128:	2301      	movs	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002130:	2307      	movs	r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4619      	mov	r1, r3
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <HAL_UART_MspInit+0x5c>)
 800213c:	f000 fb9c 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40013800 	.word	0x40013800
 800214c:	48000400 	.word	0x48000400

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 f998 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021b0:	2010      	movs	r0, #16
 80021b2:	f000 fce9 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}

080021ba <RTC_WKUP_IRQHandler>:

/**
 * @brief This function handles RTC wake-up interrupt through EXTI line 19
 */
void RTC_WKUP_IRQHandler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80021be:	f7fe fdcf 	bl	8000d60 <HW_TS_RTC_Wakeup_Handler>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <IPCC_C1_RX_IRQHandler>:

/**
 * @brief This function handles IPCC RX occupied interrupt.
 */
void IPCC_C1_RX_IRQHandler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80021ca:	f007 f84b 	bl	8009264 <HW_IPCC_Rx_Handler>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <IPCC_C1_TX_IRQHandler>:

/**
 * @brief This function handles IPCC TX Free interrupt.
 */
void IPCC_C1_TX_IRQHandler(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 80021d6:	f007 f89f 	bl	8009318 <HW_IPCC_Tx_Handler>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <SystemInit+0xa0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemInit+0xa0>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <SystemInit+0xa0>)
 80021f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002212:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <SystemInit+0xa4>)
 8002220:	4013      	ands	r3, r2
 8002222:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f023 0305 	bic.w	r3, r3, #5
 8002234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <SystemInit+0xa8>)
 8002252:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <SystemInit+0xa8>)
 800225a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	faf6fefb 	.word	0xfaf6fefb
 8002288:	22041000 	.word	0x22041000

0800228c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	4a47      	ldr	r2, [pc, #284]	; (80023bc <SystemCoreClockUpdate+0x130>)
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d867      	bhi.n	8002384 <SystemCoreClockUpdate+0xf8>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <SystemCoreClockUpdate+0x30>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	08002385 	.word	0x08002385
 80022c4:	08002385 	.word	0x08002385
 80022c8:	08002385 	.word	0x08002385
 80022cc:	080022f9 	.word	0x080022f9
 80022d0:	08002385 	.word	0x08002385
 80022d4:	08002385 	.word	0x08002385
 80022d8:	08002385 	.word	0x08002385
 80022dc:	08002301 	.word	0x08002301
 80022e0:	08002385 	.word	0x08002385
 80022e4:	08002385 	.word	0x08002385
 80022e8:	08002385 	.word	0x08002385
 80022ec:	08002309 	.word	0x08002309
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80022f0:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6013      	str	r3, [r2, #0]
      break;
 80022f6:	e049      	b.n	800238c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <SystemCoreClockUpdate+0x138>)
 80022fc:	601a      	str	r2, [r3, #0]
      break;
 80022fe:	e045      	b.n	800238c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <SystemCoreClockUpdate+0x13c>)
 8002304:	601a      	str	r2, [r3, #0]
      break;
 8002306:	e041      	b.n	800238c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	3301      	adds	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d105      	bne.n	8002336 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <SystemCoreClockUpdate+0x138>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00d      	b.n	8002352 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d105      	bne.n	8002348 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <SystemCoreClockUpdate+0x13c>)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e004      	b.n	8002352 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0f5b      	lsrs	r3, r3, #29
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	3301      	adds	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 8002380:	6013      	str	r3, [r2, #0]
      break;
 8002382:	e003      	b.n	800238c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]
      break;
 800238a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <SystemCoreClockUpdate+0x140>)
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <SystemCoreClockUpdate+0x134>)
 80023ac:	6013      	str	r3, [r2, #0]

}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0800a4b4 	.word	0x0800a4b4
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	01e84800 	.word	0x01e84800
 80023cc:	0800a454 	.word	0x0800a454

080023d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490e      	ldr	r1, [pc, #56]	; (8002410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023fa:	f7ff fef1 	bl	80021e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80023fe:	f007 f8bd 	bl	800957c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002402:	f7ff f81d 	bl	8001440 <main>

08002406 <LoopForever>:

LoopForever:
  b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
  ldr   r0, =_estack
 8002408:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800240c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8002410:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002414:	0800a534 	.word	0x0800a534
  ldr r2, =_sbss
 8002418:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 800241c:	20000798 	.word	0x20000798

08002420 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_IRQHandler>
	...

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_Init+0x3c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <HAL_Init+0x3c>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243a:	2003      	movs	r0, #3
 800243c:	f000 f9b2 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002440:	2000      	movs	r0, #0
 8002442:	f000 f80f 	bl	8002464 <HAL_InitTick>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	e001      	b.n	8002456 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002452:	f7ff fdf4 	bl	800203e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002456:	79fb      	ldrb	r3, [r7, #7]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58004000 	.word	0x58004000

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_InitTick+0x6c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002478:	f002 f8ea 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_InitTick+0x6c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	fbb1 f3f3 	udiv	r3, r1, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f9c9 	bl	8002826 <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d809      	bhi.n	80024b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f987 	bl	80027ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_InitTick+0x70>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e004      	b.n	80024c4 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e001      	b.n	80024c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000014 	.word	0x20000014
 80024d4:	20000010 	.word	0x20000010

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_IncTick+0x1c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_IncTick+0x20>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <HAL_IncTick+0x1c>)
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	20000790 	.word	0x20000790
 80024f8:	20000014 	.word	0x20000014

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000790 	.word	0x20000790

08002514 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTickPrio+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000010 	.word	0x20000010

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffe2 	bl	80024fc <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d004      	beq.n	8002550 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_Delay+0x40>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002550:	bf00      	nop
 8002552:	f7ff ffd3 	bl	80024fc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d8f7      	bhi.n	8002552 <HAL_Delay+0x26>
    {
    }
  }
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000014 	.word	0x20000014

08002570 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <NVIC_EnableIRQ+0x30>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <NVIC_DisableIRQ+0x30>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	3320      	adds	r3, #32
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <NVIC_SetPendingIRQ+0x30>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100

08002670 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <NVIC_ClearPendingIRQ+0x30>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	3360      	adds	r3, #96	; 0x60
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da0b      	bge.n	80026d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <NVIC_SetPriority+0x4c>)
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	3b04      	subs	r3, #4
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ce:	e009      	b.n	80026e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <NVIC_SetPriority+0x50>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	e000e100 	.word	0xe000e100

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fedf 	bl	8002570 <NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff fef6 	bl	80025b8 <NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fee9 	bl	80025d4 <NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fef5 	bl	8002608 <NVIC_DisableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff96 	bl	8002760 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fef5 	bl	800263c <NVIC_SetPendingIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff01 	bl	8002670 <NVIC_ClearPendingIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002886:	e14c      	b.n	8002b22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 813e 	beq.w	8002b1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x38>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	6939      	ldr	r1, [r7, #16]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d00b      	beq.n	800294c <HAL_GPIO_Init+0xd4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002940:	2b11      	cmp	r3, #17
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d130      	bne.n	80029ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002982:	2201      	movs	r2, #1
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 0201 	and.w	r2, r3, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8098 	beq.w	8002b1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029ec:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_GPIO_Init+0x2c8>)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a16:	d019      	beq.n	8002a4c <HAL_GPIO_Init+0x1d4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_GPIO_Init+0x2cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_GPIO_Init+0x1d0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a49      	ldr	r2, [pc, #292]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <HAL_GPIO_Init+0x1cc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_GPIO_Init+0x2d4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_Init+0x1c8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_GPIO_Init+0x1c4>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e008      	b.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a40:	2303      	movs	r3, #3
 8002a42:	e004      	b.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e002      	b.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f002 0203 	and.w	r2, r2, #3
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	4093      	lsls	r3, r2
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a5e:	4938      	ldr	r1, [pc, #224]	; (8002b40 <HAL_GPIO_Init+0x2c8>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a92:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x2dc>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f aeab 	bne.w	8002888 <HAL_GPIO_Init+0x10>
  }
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	48000400 	.word	0x48000400
 8002b48:	48000800 	.word	0x48000800
 8002b4c:	48000c00 	.word	0x48000c00
 8002b50:	48001000 	.word	0x48001000
 8002b54:	58000800 	.word	0x58000800

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f806 	bl	8002bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	58000800 	.word	0x58000800

08002bb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e081      	b.n	8002ce4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fa39 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2224      	movs	r2, #36	; 0x24
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e006      	b.n	8002c56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d104      	bne.n	8002c68 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69d9      	ldr	r1, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	817b      	strh	r3, [r7, #10]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	f040 80da 	bne.w	8002ec2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_I2C_Master_Transmit+0x30>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0d3      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d24:	f7ff fbea 	bl	80024fc <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9f7 	bl	800312a <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0be      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2221      	movs	r2, #33	; 0x21
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2210      	movs	r2, #16
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2bff      	cmp	r3, #255	; 0xff
 8002d76:	d90e      	bls.n	8002d96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 faee 	bl	8003370 <I2C_TransferConfig>
 8002d94:	e06c      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fadd 	bl	8003370 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002db6:	e05b      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	6a39      	ldr	r1, [r7, #32]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f9f4 	bl	80031aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e07b      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d034      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x184>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d130      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f986 	bl	800312a <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e04d      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2bff      	cmp	r3, #255	; 0xff
 8002e30:	d90e      	bls.n	8002e50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	8979      	ldrh	r1, [r7, #10]
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa91 	bl	8003370 <I2C_TransferConfig>
 8002e4e:	e00f      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	2300      	movs	r3, #0
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fa80 	bl	8003370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d19e      	bne.n	8002db8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f9d3 	bl	800322a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e01a      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2220      	movs	r2, #32
 8002e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	80002000 	.word	0x80002000
 8002ed0:	fe00e800 	.word	0xfe00e800

08002ed4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	f040 80f1 	bne.w	80030d8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0e7      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_I2C_IsDeviceReady+0x44>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0e0      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_I2C_IsDeviceReady+0x72>
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f44:	e004      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x7c>
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f56:	f7ff fad1 	bl	80024fc <HAL_GetTick>
 8002f5a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f88:	e034      	b.n	8002ff4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d01a      	beq.n	8002fc8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7ff fab3 	bl	80024fc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <HAL_I2C_IsDeviceReady+0xd4>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e088      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_I2C_IsDeviceReady+0x12c>
 8002ffa:	7fbb      	ldrb	r3, [r7, #30]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0c4      	beq.n	8002f8a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b10      	cmp	r3, #16
 800300c:	d01a      	beq.n	8003044 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	2120      	movs	r1, #32
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f886 	bl	800312a <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e058      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e04a      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	2120      	movs	r1, #32
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f86b 	bl	800312a <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e03d      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d118      	bne.n	80030a8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003084:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	2120      	movs	r1, #32
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f84a 	bl	800312a <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e01c      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2220      	movs	r2, #32
 80030a6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3301      	adds	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f63f af3b 	bhi.w	8002f2e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d103      	bne.n	8003100 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d007      	beq.n	800311e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	619a      	str	r2, [r3, #24]
  }
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313a:	e022      	b.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d01e      	beq.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7ff f9da 	bl	80024fc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d113      	bne.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d0cd      	beq.n	800313c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b6:	e02c      	b.n	8003212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f871 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e02a      	b.n	8003222 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d01e      	beq.n	8003212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d4:	f7ff f992 	bl	80024fc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d113      	bne.n	8003212 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d1cb      	bne.n	80031b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003236:	e028      	b.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f831 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e026      	b.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7ff f956 	bl	80024fc <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e007      	b.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b20      	cmp	r3, #32
 8003296:	d1cf      	bne.n	8003238 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d151      	bne.n	8003362 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032be:	e022      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d01e      	beq.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7ff f918 	bl	80024fc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_IsAcknowledgeFailed+0x3a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02e      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d1d5      	bne.n	80032c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fedc 	bl	80030e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <I2C_IsAcknowledgeFailed+0xc8>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	fe00e800 	.word	0xfe00e800

08003370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	4613      	mov	r3, r2
 8003380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	0d5b      	lsrs	r3, r3, #21
 800338c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <I2C_TransferConfig+0x58>)
 8003392:	430b      	orrs	r3, r1
 8003394:	43db      	mvns	r3, r3
 8003396:	ea02 0103 	and.w	r1, r2, r3
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a0:	7a7b      	ldrb	r3, [r7, #9]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	03ff63ff 	.word	0x03ff63ff

080033cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d138      	bne.n	8003454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e032      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d139      	bne.n	80034ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003482:	2302      	movs	r3, #2
 8003484:	e033      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	; 0x24
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58000400 	.word	0x58000400

0800351c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_PWREx_GetVoltageRange+0x18>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	58000400 	.word	0x58000400

08003538 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354a:	d101      	bne.n	8003550 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_RCC_HSE_EnableBypass>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_RCC_HSE_DisableBypass>:
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_RCC_HSE_Enable>:
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_HSE_Disable>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_RCC_HSE_IsReady>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e6:	d101      	bne.n	80035ec <LL_RCC_HSE_IsReady+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_RCC_HSE_IsReady+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_RCC_HSI_Enable>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_RCC_HSI_Disable>:
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_RCC_HSI_IsReady>:
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d101      	bne.n	800364c <LL_RCC_HSI_IsReady+0x18>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <LL_RCC_HSI_IsReady+0x1a>
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_RCC_HSI48_Enable>:
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_RCC_HSI48_Disable>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_HSI48_IsReady>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d101      	bne.n	80036de <LL_RCC_HSI48_IsReady+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_RCC_HSI48_IsReady+0x1a>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_RCC_LSE_Enable>:
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_RCC_LSE_Disable>:
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_RCC_LSE_EnableBypass>:
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_RCC_LSE_DisableBypass>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_RCC_LSE_IsReady>:
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d101      	bne.n	800378a <LL_RCC_LSE_IsReady+0x18>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <LL_RCC_LSE_IsReady+0x1a>
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_RCC_LSI1_Enable>:
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_RCC_LSI1_Disable>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_RCC_LSI1_IsReady>:
{
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d101      	bne.n	80037f2 <LL_RCC_LSI1_IsReady+0x18>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <LL_RCC_LSI1_IsReady+0x1a>
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_RCC_LSI2_Enable>:
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_RCC_LSI2_Disable>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_RCC_LSI2_IsReady>:
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d101      	bne.n	800385a <LL_RCC_LSI2_IsReady+0x18>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_RCC_LSI2_IsReady+0x1a>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_RCC_LSI2_SetTrimming>:
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003876:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_RCC_MSI_Enable>:
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_RCC_MSI_Disable>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_RCC_MSI_IsReady>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d101      	bne.n	80038e6 <LL_RCC_MSI_IsReady+0x16>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_RCC_MSI_IsReady+0x18>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_MSI_SetRange>:
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_MSI_GetRange>:
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392a:	607b      	str	r3, [r7, #4]
  if(msiRange > LL_RCC_MSIRANGE_11)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2bb0      	cmp	r3, #176	; 0xb0
 8003930:	d901      	bls.n	8003936 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003932:	23b0      	movs	r3, #176	; 0xb0
 8003934:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003936:	687b      	ldr	r3, [r7, #4]
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_RCC_SetSysClkSource>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 0203 	bic.w	r2, r3, #3
 8003980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_RCC_GetSysClkSource>:
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 030c 	and.w	r3, r3, #12
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_SetAHBPrescaler>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_SetAHB4Prescaler>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a12:	f023 020f 	bic.w	r2, r3, #15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_RCC_SetAPB1Prescaler>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_SetAPB2Prescaler>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_GetAHBPrescaler>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_GetAHB4Prescaler>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_GetAPB2Prescaler>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b32:	d101      	bne.n	8003b38 <LL_RCC_PLL_IsReady+0x18>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <LL_RCC_PLL_IsReady+0x1a>
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0303 	and.w	r3, r3, #3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d101      	bne.n	8003bbe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bde:	d101      	bne.n	8003be4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d101      	bne.n	8003c0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c28:	d101      	bne.n	8003c2e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c4c:	d101      	bne.n	8003c52 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b08b      	sub	sp, #44	; 0x2c
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e340      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808d 	beq.w	8003d9a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c80:	f7ff fe89 	bl	8003996 <LL_RCC_GetSysClkSource>
 8003c84:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c86:	f7ff ff82 	bl	8003b8e <LL_RCC_PLL_GetMainSource>
 8003c8a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCC_OscConfig+0x3e>
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d147      	bne.n	8003d28 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d144      	bne.n	8003d28 <HAL_RCC_OscConfig+0xc8>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c9e:	f7ff fe17 	bl	80038d0 <LL_RCC_MSI_IsReady>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x54>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e31f      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003cb8:	f7ff fe2f 	bl	800391a <LL_RCC_MSI_GetRange>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d914      	bls.n	8003cec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fd02 	bl	80046d0 <RCC_SetFlashLatencyFromMSIRange>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e30e      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fe09 	bl	80038f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fe2d 	bl	8003944 <LL_RCC_MSI_SetCalibTrimming>
 8003cea:	e013      	b.n	8003d14 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fdfe 	bl	80038f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fe22 	bl	8003944 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fce3 	bl	80046d0 <RCC_SetFlashLatencyFromMSIRange>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e2ef      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();  
 8003d14:	f7fe faba 	bl	800228c <SystemCoreClockUpdate>
        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f7fe fba3 	bl	8002464 <HAL_InitTick>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d039      	beq.n	8003d98 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e2e5      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01e      	beq.n	8003d6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d30:	f7ff fdb0 	bl	8003894 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fbe2 	bl	80024fc <HAL_GetTick>
 8003d38:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d3c:	f7fe fbde 	bl	80024fc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e2d2      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d4e:	f7ff fdbf 	bl	80038d0 <LL_RCC_MSI_IsReady>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f1      	beq.n	8003d3c <HAL_RCC_OscConfig+0xdc>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fdc8 	bl	80038f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fdec 	bl	8003944 <LL_RCC_MSI_SetCalibTrimming>
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d6e:	f7ff fda0 	bl	80038b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d72:	f7fe fbc3 	bl	80024fc <HAL_GetTick>
 8003d76:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d7a:	f7fe fbbf 	bl	80024fc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e2b3      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d8c:	f7ff fda0 	bl	80038d0 <LL_RCC_MSI_IsReady>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f1      	bne.n	8003d7a <HAL_RCC_OscConfig+0x11a>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x13a>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d05a      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	f7ff fdf6 	bl	8003996 <LL_RCC_GetSysClkSource>
 8003daa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dac:	f7ff feef 	bl	8003b8e <LL_RCC_PLL_GetMainSource>
 8003db0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x164>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d10d      	bne.n	8003dda <HAL_RCC_OscConfig+0x17a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d10a      	bne.n	8003dda <HAL_RCC_OscConfig+0x17a>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	f7ff fc06 	bl	80035d4 <LL_RCC_HSE_IsReady>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d045      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1fa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d141      	bne.n	8003e5a <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e28c      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d102      	bne.n	8003dea <HAL_RCC_OscConfig+0x18a>
 8003de4:	f7ff fbd8 	bl	8003598 <LL_RCC_HSE_Enable>
 8003de8:	e00d      	b.n	8003e06 <HAL_RCC_OscConfig+0x1a6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df2:	d104      	bne.n	8003dfe <HAL_RCC_OscConfig+0x19e>
 8003df4:	f7ff fbb2 	bl	800355c <LL_RCC_HSE_EnableBypass>
 8003df8:	f7ff fbce 	bl	8003598 <LL_RCC_HSE_Enable>
 8003dfc:	e003      	b.n	8003e06 <HAL_RCC_OscConfig+0x1a6>
 8003dfe:	f7ff fbda 	bl	80035b6 <LL_RCC_HSE_Disable>
 8003e02:	f7ff fbba 	bl	800357a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fb75 	bl	80024fc <HAL_GetTick>
 8003e12:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e16:	f7fe fb71 	bl	80024fc <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	; 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x1c8>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e265      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e28:	f7ff fbd4 	bl	80035d4 <LL_RCC_HSE_IsReady>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f1      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1b6>
 8003e32:	e013      	b.n	8003e5c <HAL_RCC_OscConfig+0x1fc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fb62 	bl	80024fc <HAL_GetTick>
 8003e38:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1ee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fb5e 	bl	80024fc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e252      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e4e:	f7ff fbc1 	bl	80035d4 <LL_RCC_HSE_IsReady>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f1      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1dc>
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x1fc>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d051      	beq.n	8003f0c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e68:	f7ff fd95 	bl	8003996 <LL_RCC_GetSysClkSource>
 8003e6c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e6e:	f7ff fe8e 	bl	8003b8e <LL_RCC_PLL_GetMainSource>
 8003e72:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x226>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d113      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x248>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d110      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e86:	f7ff fbd5 	bl	8003634 <LL_RCC_HSI_IsReady>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x23c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e22b      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fbd9 	bl	8003658 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea6:	e031      	b.n	8003f0c <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d019      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x284>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb0:	f7ff fba2 	bl	80035f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fb22 	bl	80024fc <HAL_GetTick>
 8003eb8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x26e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe fb1e 	bl	80024fc <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x26e>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e212      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ece:	f7ff fbb1 	bl	8003634 <LL_RCC_HSI_IsReady>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f1      	beq.n	8003ebc <HAL_RCC_OscConfig+0x25c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fbbb 	bl	8003658 <LL_RCC_HSI_SetCalibTrimming>
 8003ee2:	e013      	b.n	8003f0c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee4:	f7ff fb97 	bl	8003616 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fb08 	bl	80024fc <HAL_GetTick>
 8003eec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fe fb04 	bl	80024fc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1f8      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f02:	f7ff fb97 	bl	8003634 <LL_RCC_HSI_IsReady>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f1      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2c6>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 809f 	beq.w	8004064 <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d072      	beq.n	8004014 <HAL_RCC_OscConfig+0x3b4>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d046      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x368>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003f3a:	f7ff fc4e 	bl	80037da <LL_RCC_LSI1_IsReady>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d113      	bne.n	8003f6c <HAL_RCC_OscConfig+0x30c>
        {
         /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003f44:	f7ff fc27 	bl	8003796 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f48:	f7fe fad8 	bl	80024fc <HAL_GetTick>
 8003f4c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while(LL_RCC_LSI1_IsReady() == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x302>
          {
            if((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f50:	f7fe fad4 	bl	80024fc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1c8      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
          while(LL_RCC_LSI1_IsReady() == 0U)
 8003f62:	f7ff fc3a 	bl	80037da <LL_RCC_LSI1_IsReady>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f1      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2f0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003f6c:	f7ff fc47 	bl	80037fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fac4 	bl	80024fc <HAL_GetTick>
 8003f74:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f78:	f7fe fac0 	bl	80024fc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1b4      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f8a:	f7ff fc5a 	bl	8003842 <LL_RCC_LSI2_IsReady>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f1      	beq.n	8003f78 <HAL_RCC_OscConfig+0x318>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fc64 	bl	8003866 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003f9e:	f7ff fc0b 	bl	80037b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fe faab 	bl	80024fc <HAL_GetTick>
 8003fa6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x35c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003faa:	f7fe faa7 	bl	80024fc <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e19b      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fbc:	f7ff fc0d 	bl	80037da <LL_RCC_LSI1_IsReady>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f1      	bne.n	8003faa <HAL_RCC_OscConfig+0x34a>
 8003fc6:	e04d      	b.n	8004064 <HAL_RCC_OscConfig+0x404>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003fc8:	f7ff fbe5 	bl	8003796 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fa96 	bl	80024fc <HAL_GetTick>
 8003fd0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x386>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fd4:	f7fe fa92 	bl	80024fc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e186      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fe6:	f7ff fbf8 	bl	80037da <LL_RCC_LSI1_IsReady>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f1      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x374>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003ff0:	f7ff fc16 	bl	8003820 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x3a8>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ff6:	f7fe fa81 	bl	80024fc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b03      	cmp	r3, #3
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x3a8>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e175      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004008:	f7ff fc1b 	bl	8003842 <LL_RCC_LSI2_IsReady>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f1      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x396>
 8004012:	e027      	b.n	8004064 <HAL_RCC_OscConfig+0x404>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004014:	f7ff fc04 	bl	8003820 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe fa70 	bl	80024fc <HAL_GetTick>
 800401c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004020:	f7fe fa6c 	bl	80024fc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e160      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004032:	f7ff fc06 	bl	8003842 <LL_RCC_LSI2_IsReady>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f1      	bne.n	8004020 <HAL_RCC_OscConfig+0x3c0>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800403c:	f7ff fbbc 	bl	80037b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fe fa5c 	bl	80024fc <HAL_GetTick>
 8004044:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x3fa>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004048:	f7fe fa58 	bl	80024fc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3fa>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e14c      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800405a:	f7ff fbbe 	bl	80037da <LL_RCC_LSI1_IsReady>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f1      	bne.n	8004048 <HAL_RCC_OscConfig+0x3e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05b      	beq.n	8004128 <HAL_RCC_OscConfig+0x4c8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4ba2      	ldr	r3, [pc, #648]	; (80042fc <HAL_RCC_OscConfig+0x69c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d114      	bne.n	80040a6 <HAL_RCC_OscConfig+0x446>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800407c:	f7ff fa3e 	bl	80034fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004080:	f7fe fa3c 	bl	80024fc <HAL_GetTick>
 8004084:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fe fa38 	bl	80024fc <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e12c      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409a:	4b98      	ldr	r3, [pc, #608]	; (80042fc <HAL_RCC_OscConfig+0x69c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x428>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0x454>
 80040ae:	f7ff fb1c 	bl	80036ea <LL_RCC_LSE_Enable>
 80040b2:	e00c      	b.n	80040ce <HAL_RCC_OscConfig+0x46e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d104      	bne.n	80040c6 <HAL_RCC_OscConfig+0x466>
 80040bc:	f7ff fb37 	bl	800372e <LL_RCC_LSE_EnableBypass>
 80040c0:	f7ff fb13 	bl	80036ea <LL_RCC_LSE_Enable>
 80040c4:	e003      	b.n	80040ce <HAL_RCC_OscConfig+0x46e>
 80040c6:	f7ff fb21 	bl	800370c <LL_RCC_LSE_Disable>
 80040ca:	f7ff fb41 	bl	8003750 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d014      	beq.n	8004100 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fe fa11 	bl	80024fc <HAL_GetTick>
 80040da:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fe fa0d 	bl	80024fc <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0ff      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_LSE_IsReady() == 0U)
 80040f4:	f7ff fb3d 	bl	8003772 <LL_RCC_LSE_IsReady>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ef      	beq.n	80040de <HAL_RCC_OscConfig+0x47e>
 80040fe:	e013      	b.n	8004128 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fe f9fc 	bl	80024fc <HAL_GetTick>
 8004104:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x4be>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fe f9f8 	bl	80024fc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x4be>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0ea      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_LSE_IsReady() != 0U)
 800411e:	f7ff fb28 	bl	8003772 <LL_RCC_LSE_IsReady>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ef      	bne.n	8004108 <HAL_RCC_OscConfig+0x4a8>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02c      	beq.n	800418e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d014      	beq.n	8004166 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800413c:	f7ff faa1 	bl	8003682 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe f9dc 	bl	80024fc <HAL_GetTick>
 8004144:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x4fa>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004148:	f7fe f9d8 	bl	80024fc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x4fa>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0cc      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800415a:	f7ff fab4 	bl	80036c6 <LL_RCC_HSI48_IsReady>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f1      	beq.n	8004148 <HAL_RCC_OscConfig+0x4e8>
 8004164:	e013      	b.n	800418e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004166:	f7ff fa9d 	bl	80036a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fe f9c7 	bl	80024fc <HAL_GetTick>
 800416e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x524>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004172:	f7fe f9c3 	bl	80024fc <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x524>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0b7      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004184:	f7ff fa9f 	bl	80036c6 <LL_RCC_HSI48_IsReady>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f1      	bne.n	8004172 <HAL_RCC_OscConfig+0x512>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80ad 	beq.w	80042f2 <HAL_RCC_OscConfig+0x692>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	f7ff fbfd 	bl	8003996 <LL_RCC_GetSysClkSource>
 800419c:	4603      	mov	r3, r0
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d076      	beq.n	8004290 <HAL_RCC_OscConfig+0x630>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d14b      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041aa:	f7ff fcaa 	bl	8003b02 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe f9a5 	bl	80024fc <HAL_GetTick>
 80041b2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x568>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe f9a1 	bl	80024fc <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x568>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e095      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_PLL_IsReady() != 0U)
 80041c8:	f7ff fcaa 	bl	8003b20 <LL_RCC_PLL_IsReady>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f1      	bne.n	80041b6 <HAL_RCC_OscConfig+0x556>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	4b49      	ldr	r3, [pc, #292]	; (8004300 <HAL_RCC_OscConfig+0x6a0>)
 80041da:	4013      	ands	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ea:	0212      	lsls	r2, r2, #8
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041fe:	430a      	orrs	r2, r1
 8004200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004204:	4313      	orrs	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	f7ff fc6c 	bl	8003ae4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fe f96e 	bl	80024fc <HAL_GetTick>
 8004220:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x5d6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe f96a 	bl	80024fc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e05e      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004236:	f7ff fc73 	bl	8003b20 <LL_RCC_PLL_IsReady>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f1      	beq.n	8004224 <HAL_RCC_OscConfig+0x5c4>
 8004240:	e057      	b.n	80042f2 <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	f7ff fc5e 	bl	8003b02 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004250:	f023 0303 	bic.w	r3, r3, #3
 8004254:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004260:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fe f947 	bl	80024fc <HAL_GetTick>
 800426e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x624>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fe f943 	bl	80024fc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x624>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e037      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004284:	f7ff fc4c 	bl	8003b20 <LL_RCC_PLL_IsReady>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f1      	bne.n	8004272 <HAL_RCC_OscConfig+0x612>
 800428e:	e030      	b.n	80042f2 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      uint32_t pllcfgr = RCC->PLLCFGR;
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60bb      	str	r3, [r7, #8]
      
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0203 	and.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d123      	bne.n	80042ee <HAL_RCC_OscConfig+0x68e>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d11c      	bne.n	80042ee <HAL_RCC_OscConfig+0x68e>
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d114      	bne.n	80042ee <HAL_RCC_OscConfig+0x68e>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
         ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10d      	bne.n	80042ee <HAL_RCC_OscConfig+0x68e>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x68e>
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x692>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x694>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	372c      	adds	r7, #44	; 0x2c
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd90      	pop	{r4, r7, pc}
 80042fc:	58000400 	.word	0x58000400
 8004300:	11c1808c 	.word	0x11c1808c

08004304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e12a      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004318:	4b97      	ldr	r3, [pc, #604]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d91b      	bls.n	800435e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b94      	ldr	r3, [pc, #592]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4992      	ldr	r1, [pc, #584]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fe f8e1 	bl	80024fc <HAL_GetTick>
 800433a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433c:	e008      	b.n	8004350 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800433e:	f7fe f8dd 	bl	80024fc <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e10e      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004350:	4b89      	ldr	r3, [pc, #548]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d1ef      	bne.n	800433e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fb1d 	bl	80039ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004374:	f7fe f8c2 	bl	80024fc <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800437c:	f7fe f8be 	bl	80024fc <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0ef      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800438e:	f7ff fc0a 	bl	8003ba6 <LL_RCC_IsActiveFlag_HPRE>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f1      	beq.n	800437c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fb14 	bl	80039d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043ae:	f7fe f8a5 	bl	80024fc <HAL_GetTick>
 80043b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043b6:	f7fe f8a1 	bl	80024fc <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0d2      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043c8:	f7ff fbff 	bl	8003bca <LL_RCC_IsActiveFlag_C2HPRE>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f1      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fb0d 	bl	8003a02 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043e8:	f7fe f888 	bl	80024fc <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043f0:	f7fe f884 	bl	80024fc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0b5      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004402:	f7ff fbf5 	bl	8003bf0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f1      	beq.n	80043f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d016      	beq.n	8004446 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fb07 	bl	8003a30 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004422:	f7fe f86b 	bl	80024fc <HAL_GetTick>
 8004426:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800442a:	f7fe f867 	bl	80024fc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e098      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800443c:	f7ff fbeb 	bl	8003c16 <LL_RCC_IsActiveFlag_PPRE1>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f1      	beq.n	800442a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fafd 	bl	8003a58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800445e:	f7fe f84d 	bl	80024fc <HAL_GetTick>
 8004462:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004466:	f7fe f849 	bl	80024fc <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e07a      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004478:	f7ff fbdf 	bl	8003c3a <LL_RCC_IsActiveFlag_PPRE2>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f1      	beq.n	8004466 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d043      	beq.n	8004516 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004496:	f7ff f89d 	bl	80035d4 <LL_RCC_HSE_IsReady>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11e      	bne.n	80044de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e064      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80044ac:	f7ff fb38 	bl	8003b20 <LL_RCC_PLL_IsReady>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d113      	bne.n	80044de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e059      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80044c2:	f7ff fa05 	bl	80038d0 <LL_RCC_MSI_IsReady>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e04e      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80044d0:	f7ff f8b0 	bl	8003634 <LL_RCC_HSI_IsReady>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e047      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fa43 	bl	800396e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e8:	f7fe f808 	bl	80024fc <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe f804 	bl	80024fc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e033      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	f7ff fa46 	bl	8003996 <LL_RCC_GetSysClkSource>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	429a      	cmp	r2, r3
 8004514:	d1ec      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d21b      	bcs.n	800455c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 0207 	bic.w	r2, r3, #7
 800452c:	4912      	ldr	r1, [pc, #72]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd ffe2 	bl	80024fc <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	e008      	b.n	800454e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800453c:	f7fd ffde 	bl	80024fc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e00f      	b.n	800456e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d1ef      	bne.n	800453c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800455c:	f7fd fe96 	bl	800228c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick (HAL_GetTickPrio());
 8004560:	f7fd ffd8 	bl	8002514 <HAL_GetTickPrio>
 8004564:	4603      	mov	r3, r0
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd ff7c 	bl	8002464 <HAL_InitTick>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	58004000 	.word	0x58004000

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004582:	f7ff fa08 	bl	8003996 <LL_RCC_GetSysClkSource>
 8004586:	6078      	str	r0, [r7, #4]
  
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800458e:	f7ff f9c4 	bl	800391a <LL_RCC_MSI_GetRange>
 8004592:	4603      	mov	r3, r0
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc8>)
 800459c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e04a      	b.n	800463a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045aa:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e044      	b.n	800463a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d10a      	bne.n	80045cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045b6:	f7fe ffbf 	bl	8003538 <LL_RCC_HSE_IsEnabledDiv2>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_GetSysClockFreq+0x4a>
     {
       sysclockfreq = HSE_VALUE / 2U;
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e039      	b.n	800463a <HAL_RCC_GetSysClockFreq+0xbe>
     }
     else
     {
       sysclockfreq = HSE_VALUE;
 80045c6:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e036      	b.n	800463a <HAL_RCC_GetSysClockFreq+0xbe>
     }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80045cc:	f7ff fadf 	bl	8003b8e <LL_RCC_PLL_GetMainSource>
 80045d0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d002      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x62>
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d003      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x68>
 80045dc:	e00d      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045e0:	60bb      	str	r3, [r7, #8]
        break;
 80045e2:	e015      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045e4:	f7fe ffa8 	bl	8003538 <LL_RCC_HSE_IsEnabledDiv2>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x78>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045f0:	60bb      	str	r3, [r7, #8]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
        break;
 80045f2:	e00d      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x94>
        pllinputfreq = HSE_VALUE;
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045f6:	60bb      	str	r3, [r7, #8]
        break;
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80045fa:	f7ff f98e 	bl	800391a <LL_RCC_MSI_GetRange>
 80045fe:	4603      	mov	r3, r0
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	4a0f      	ldr	r2, [pc, #60]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460c:	60bb      	str	r3, [r7, #8]
        break;
 800460e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004610:	f7ff fa98 	bl	8003b44 <LL_RCC_PLL_GetN>
 8004614:	4602      	mov	r2, r0
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fb03 f402 	mul.w	r4, r3, r2
 800461c:	f7ff faab 	bl	8003b76 <LL_RCC_PLL_GetDivider>
 8004620:	4603      	mov	r3, r0
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	3301      	adds	r3, #1
 8004626:	fbb4 f4f3 	udiv	r4, r4, r3
 800462a:	f7ff fa98 	bl	8003b5e <LL_RCC_PLL_GetR>
 800462e:	4603      	mov	r3, r0
 8004630:	0f5b      	lsrs	r3, r3, #29
 8004632:	3301      	adds	r3, #1
 8004634:	fbb4 f3f3 	udiv	r3, r4, r3
 8004638:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	0800a4b4 	.word	0x0800a4b4
 8004648:	00f42400 	.word	0x00f42400
 800464c:	01e84800 	.word	0x01e84800

08004650 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b598      	push	{r3, r4, r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004654:	f7ff ff92 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8004658:	4604      	mov	r4, r0
 800465a:	f7ff fa11 	bl	8003a80 <LL_RCC_GetAHBPrescaler>
 800465e:	4603      	mov	r3, r0
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	4a03      	ldr	r2, [pc, #12]	; (8004674 <HAL_RCC_GetHCLKFreq+0x24>)
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd98      	pop	{r3, r4, r7, pc}
 8004674:	0800a454 	.word	0x0800a454

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b598      	push	{r3, r4, r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800467c:	f7ff ffe8 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004680:	4604      	mov	r4, r0
 8004682:	f7ff fa17 	bl	8003ab4 <LL_RCC_GetAPB1Prescaler>
 8004686:	4603      	mov	r3, r0
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa24 f303 	lsr.w	r3, r4, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd98      	pop	{r3, r4, r7, pc}
 80046a0:	0800a494 	.word	0x0800a494

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b598      	push	{r3, r4, r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80046a8:	f7ff ffd2 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 80046ac:	4604      	mov	r4, r0
 80046ae:	f7ff fa0d 	bl	8003acc <LL_RCC_GetAPB2Prescaler>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0adb      	lsrs	r3, r3, #11
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd98      	pop	{r3, r4, r7, pc}
 80046cc:	0800a494 	.word	0x0800a494

080046d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
  
  /* MSI frequency range in Hz */
  if(MSI_Range > RCC_MSIRANGE_11)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2bb0      	cmp	r3, #176	; 0xb0
 80046dc:	d903      	bls.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e007      	b.n	80046f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	4a11      	ldr	r2, [pc, #68]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	60fb      	str	r3, [r7, #12]
  }
  
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80046f6:	f7ff f9cf 	bl	8003a98 <LL_RCC_GetAHB4Prescaler>
 80046fa:	4603      	mov	r3, r0
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	0c9c      	lsrs	r4, r3, #18
 800471a:	f7fe feff 	bl	800351c <HAL_PWREx_GetVoltageRange>
 800471e:	4603      	mov	r3, r0
 8004720:	4619      	mov	r1, r3
 8004722:	4620      	mov	r0, r4
 8004724:	f000 f80c 	bl	8004740 <RCC_SetFlashLatency>
 8004728:	4603      	mov	r3, r0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	0800a4b4 	.word	0x0800a4b4
 8004738:	0800a454 	.word	0x0800a454
 800473c:	431bde83 	.word	0x431bde83

08004740 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b093      	sub	sp, #76	; 0x4c
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800474a:	4b39      	ldr	r3, [pc, #228]	; (8004830 <RCC_SetFlashLatency+0xf0>)
 800474c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <RCC_SetFlashLatency+0xf4>)
 8004758:	f107 031c 	add.w	r3, r7, #28
 800475c:	ca07      	ldmia	r2, {r0, r1, r2}
 800475e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004762:	4b35      	ldr	r3, [pc, #212]	; (8004838 <RCC_SetFlashLatency+0xf8>)
 8004764:	f107 040c 	add.w	r4, r7, #12
 8004768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800476e:	2300      	movs	r3, #0
 8004770:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d11c      	bne.n	80047b4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800477a:	2300      	movs	r3, #0
 800477c:	643b      	str	r3, [r7, #64]	; 0x40
 800477e:	e015      	b.n	80047ac <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004788:	4413      	add	r3, r2
 800478a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d808      	bhi.n	80047a6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800479c:	4413      	add	r3, r2
 800479e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047a2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047a4:	e022      	b.n	80047ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80047a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a8:	3301      	adds	r3, #1
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
 80047ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d9e6      	bls.n	8004780 <RCC_SetFlashLatency+0x40>
 80047b2:	e01b      	b.n	80047ec <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	e015      	b.n	80047e6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047c2:	4413      	add	r3, r2
 80047c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d808      	bhi.n	80047e0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80047ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047d6:	4413      	add	r3, r2
 80047d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047dc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047de:	e005      	b.n	80047ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	3301      	adds	r3, #1
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d9e6      	bls.n	80047ba <RCC_SetFlashLatency+0x7a>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <RCC_SetFlashLatency+0xfc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 0207 	bic.w	r2, r3, #7
 80047f4:	4911      	ldr	r1, [pc, #68]	; (800483c <RCC_SetFlashLatency+0xfc>)
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047fc:	f7fd fe7e 	bl	80024fc <HAL_GetTick>
 8004800:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004802:	e008      	b.n	8004816 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004804:	f7fd fe7a 	bl	80024fc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e007      	b.n	8004826 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <RCC_SetFlashLatency+0xfc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004820:	429a      	cmp	r2, r3
 8004822:	d1ef      	bne.n	8004804 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	374c      	adds	r7, #76	; 0x4c
 800482a:	46bd      	mov	sp, r7
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	bf00      	nop
 8004830:	08009604 	.word	0x08009604
 8004834:	08009614 	.word	0x08009614
 8004838:	08009620 	.word	0x08009620
 800483c:	58004000 	.word	0x58004000

08004840 <LL_RCC_LSE_IsEnabled>:
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <LL_RCC_LSE_IsEnabled+0x18>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <LL_RCC_LSE_IsEnabled+0x1a>
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_RCC_LSE_IsReady>:
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d101      	bne.n	800487c <LL_RCC_LSE_IsReady+0x18>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <LL_RCC_LSE_IsReady+0x1a>
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_RCC_SetRFWKPClockSource>:
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800489c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_SetSMPSClockSource>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_SetSMPSPrescaler>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80048e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_SetUSARTClockSource>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f023 0203 	bic.w	r2, r3, #3
 8004918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_SetLPUARTClockSource>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <LL_RCC_SetI2CClockSource>:
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetLPTIMClockSource>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_SetSAIClockSource>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_SetRNGClockSource>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <LL_RCC_SetCLK48ClockSource>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_RCC_SetUSBClockSource>:
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffe3 	bl	8004a22 <LL_RCC_SetCLK48ClockSource>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <LL_RCC_SetADCClockSource>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_RCC_SetRTCClockSource>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_RCC_GetRTCClockSource>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_ForceBackupDomainReset>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_RCC_PLLSAI1_Enable>:
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b2c:	6013      	str	r3, [r2, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_PLLSAI1_Disable>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <LL_RCC_PLLSAI1_IsReady>:
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b68:	d101      	bne.n	8004b6e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b86:	2300      	movs	r3, #0
 8004b88:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d033      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d00c      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba4:	d802      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004baa:	e017      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb0:	d017      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bb6:	d016      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004bb8:	e010      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bca:	e00d      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f920 	bl	8004e16 <RCCEx_PLLSAI1_ConfigNP>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bda:	e005      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
        break;
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fee9 	bl	80049ca <LL_RCC_SetSAIClockSource>
 8004bf8:	e001      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d046      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004c0a:	f7ff ff57 	bl	8004abc <LL_RCC_GetRTCClockSource>
 8004c0e:	6138      	str	r0, [r7, #16]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if(rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d03c      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c1a:	f7fe fc6f 	bl	80034fc <HAL_PWR_EnableBkUpAccess>
     
      /* If a clock source is not yet selected */
      if(rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff31 	bl	8004a90 <LL_RCC_SetRTCClockSource>
 8004c2e:	e02e      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	60fb      	str	r3, [r7, #12]
        
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004c3a:	f7ff ff4c 	bl	8004ad6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004c3e:	f7ff ff5b 	bl	8004af8 <LL_RCC_ReleaseBackupDomainReset>
        
        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
        
        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        
        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c5a:	f7ff fdf1 	bl	8004840 <LL_RCC_LSE_IsEnabled>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d114      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c64:	f7fd fc4a 	bl	80024fc <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]
        
          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fc46 	bl	80024fc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d902      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
              break;
 8004c82:	e004      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c84:	f7ff fdee 	bl	8004864 <LL_RCC_LSE_IsReady>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d1ee      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	75bb      	strb	r3, [r7, #22]
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fe2b 	bl	8004904 <LL_RCC_SetUSARTClockSource>
  }


  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe36 	bl	8004930 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fe5e 	bl	8004996 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fe53 	bl	8004996 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fe2b 	bl	800495c <LL_RCC_SetI2CClockSource>
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fe20 	bl	800495c <LL_RCC_SetI2CClockSource>
  }

  /*-------------------------- USB clock source configuration ----------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d022      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fe8e 	bl	8004a4e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	60d3      	str	r3, [r2, #12]
    }
    
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f8b6 	bl	8004ecc <RCCEx_PLLSAI1_ConfigNQ>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]

      if (ret != HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	75bb      	strb	r3, [r7, #22]
      }
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fe39 	bl	80049f6 <LL_RCC_SetRNGClockSource>

  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d022      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fe65 	bl	8004a64 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da2:	d107      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db2:	60d3      	str	r3, [r2, #12]
    }
    
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f8dd 	bl	8004f82 <RCCEx_PLLSAI1_ConfigNR>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]

      if (ret != HAL_OK)
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        /* set overall return value */
        status = ret;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	75bb      	strb	r3, [r7, #22]
      }
    }
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fd4e 	bl	8004888 <LL_RCC_SetRFWKPClockSource>

  }

  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x292>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fd6d 	bl	80048dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fd54 	bl	80048b4 <LL_RCC_SetSMPSClockSource>

  }

  return status;
 8004e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e22:	f7ff fe89 	bl	8004b38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e26:	f7fd fb69 	bl	80024fc <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e2c:	e009      	b.n	8004e42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e2e:	f7fd fb65 	bl	80024fc <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d902      	bls.n	8004e42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e004      	b.n	8004e4c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e42:	f7ff fe88 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f0      	bne.n	8004e2e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d137      	bne.n	8004ec2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e80:	f7ff fe4b 	bl	8004b1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e84:	f7fd fb3a 	bl	80024fc <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e8a:	e009      	b.n	8004ea0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e8c:	f7fd fb36 	bl	80024fc <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e9e:	e004      	b.n	8004eaa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ea0:	f7ff fe59 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d1f0      	bne.n	8004e8c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d108      	bne.n	8004ec2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ed8:	f7ff fe2e 	bl	8004b38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004edc:	f7fd fb0e 	bl	80024fc <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ee2:	e009      	b.n	8004ef8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee4:	f7fd fb0a 	bl	80024fc <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef6:	e004      	b.n	8004f02 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ef8:	f7ff fe2d 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d137      	bne.n	8004f78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f32:	4313      	orrs	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f36:	f7ff fdf0 	bl	8004b1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fd fadf 	bl	80024fc <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f40:	e009      	b.n	8004f56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f42:	f7fd fadb 	bl	80024fc <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d902      	bls.n	8004f56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	73fb      	strb	r3, [r7, #15]
        break;
 8004f54:	e004      	b.n	8004f60 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f56:	f7ff fdfe 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d1f0      	bne.n	8004f42 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f74:	4313      	orrs	r3, r2
 8004f76:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f8e:	f7ff fdd3 	bl	8004b38 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f92:	f7fd fab3 	bl	80024fc <HAL_GetTick>
 8004f96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f98:	e009      	b.n	8004fae <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f9a:	f7fd faaf 	bl	80024fc <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d902      	bls.n	8004fae <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e004      	b.n	8004fb8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fae:	f7ff fdd2 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f0      	bne.n	8004f9a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d137      	bne.n	800502e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fec:	f7ff fd95 	bl	8004b1a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fd fa84 	bl	80024fc <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ff6:	e009      	b.n	800500c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff8:	f7fd fa80 	bl	80024fc <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d902      	bls.n	800500c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	73fb      	strb	r3, [r7, #15]
        break;
 800500a:	e004      	b.n	8005016 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800500c:	f7ff fda3 	bl	8004b56 <LL_RCC_PLLSAI1_IsReady>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d1f0      	bne.n	8004ff8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d108      	bne.n	800502e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800502a:	4313      	orrs	r3, r2
 800502c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e090      	b.n	800516c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fd f834 	bl	80020cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	22ca      	movs	r2, #202	; 0xca
 8005072:	625a      	str	r2, [r3, #36]	; 0x24
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2253      	movs	r2, #83	; 0x53
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f89f 	bl	80051c0 <RTC_EnterInitMode>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e067      	b.n	800516c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6899      	ldr	r1, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68d2      	ldr	r2, [r2, #12]
 80050d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6919      	ldr	r1, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	041a      	lsls	r2, r3, #16
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050fa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0203 	bic.w	r2, r2, #3
 800510a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f81e 	bl	8005174 <HAL_RTC_WaitForSynchro>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	22ff      	movs	r2, #255	; 0xff
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e008      	b.n	800516c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800516a:	2300      	movs	r3, #0
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800518a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800518c:	f7fd f9b6 	bl	80024fc <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005192:	e009      	b.n	80051a8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005194:	f7fd f9b2 	bl	80024fc <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a2:	d901      	bls.n	80051a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e007      	b.n	80051b8 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ee      	beq.n	8005194 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051e0:	f7fd f98c 	bl	80024fc <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051e6:	e009      	b.n	80051fc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80051e8:	f7fd f988 	bl	80024fc <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f6:	d901      	bls.n	80051fc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e007      	b.n	800520c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0ee      	beq.n	80051e8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <LL_RCC_GetUSARTClockSource>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800521c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005220:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4013      	ands	r3, r2
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LL_RCC_GetLPUARTClockSource>:
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4013      	ands	r3, r2
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e042      	b.n	80052ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fc ff39 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	; 0x24
 8005282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f82e 	bl	80052f8 <UART_SetConfig>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 f872 	bl	8006398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 f8f9 	bl	80064dc <UART_CheckIdleState>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	0000      	movs	r0, r0
	...

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052fc:	b088      	sub	sp, #32
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	4313      	orrs	r3, r2
 800532e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <UART_SetConfig+0x2c4>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	69f9      	ldr	r1, [r7, #28]
 8005340:	430b      	orrs	r3, r1
 8005342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a96      	ldr	r2, [pc, #600]	; (80055c0 <UART_SetConfig+0x2c8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800537e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	69f9      	ldr	r1, [r7, #28]
 8005388:	430b      	orrs	r3, r1
 800538a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f023 010f 	bic.w	r1, r3, #15
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a87      	ldr	r2, [pc, #540]	; (80055c4 <UART_SetConfig+0x2cc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d121      	bne.n	80053f0 <UART_SetConfig+0xf8>
 80053ac:	2003      	movs	r0, #3
 80053ae:	f7ff ff31 	bl	8005214 <LL_RCC_GetUSARTClockSource>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d817      	bhi.n	80053e8 <UART_SetConfig+0xf0>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0xc8>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053d7 	.word	0x080053d7
 80053cc:	080053e3 	.word	0x080053e3
 80053d0:	2301      	movs	r3, #1
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e038      	b.n	8005448 <UART_SetConfig+0x150>
 80053d6:	2302      	movs	r3, #2
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e035      	b.n	8005448 <UART_SetConfig+0x150>
 80053dc:	2304      	movs	r3, #4
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e032      	b.n	8005448 <UART_SetConfig+0x150>
 80053e2:	2308      	movs	r3, #8
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e02f      	b.n	8005448 <UART_SetConfig+0x150>
 80053e8:	2310      	movs	r3, #16
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	bf00      	nop
 80053ee:	e02b      	b.n	8005448 <UART_SetConfig+0x150>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a72      	ldr	r2, [pc, #456]	; (80055c0 <UART_SetConfig+0x2c8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d124      	bne.n	8005444 <UART_SetConfig+0x14c>
 80053fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80053fe:	f7ff ff19 	bl	8005234 <LL_RCC_GetLPUARTClockSource>
 8005402:	4603      	mov	r3, r0
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d012      	beq.n	8005430 <UART_SetConfig+0x138>
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d802      	bhi.n	8005416 <UART_SetConfig+0x11e>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <UART_SetConfig+0x12c>
 8005414:	e012      	b.n	800543c <UART_SetConfig+0x144>
 8005416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541a:	d006      	beq.n	800542a <UART_SetConfig+0x132>
 800541c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x13e>
 8005422:	e00b      	b.n	800543c <UART_SetConfig+0x144>
 8005424:	2300      	movs	r3, #0
 8005426:	76fb      	strb	r3, [r7, #27]
 8005428:	e00e      	b.n	8005448 <UART_SetConfig+0x150>
 800542a:	2302      	movs	r3, #2
 800542c:	76fb      	strb	r3, [r7, #27]
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x150>
 8005430:	2304      	movs	r3, #4
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e008      	b.n	8005448 <UART_SetConfig+0x150>
 8005436:	2308      	movs	r3, #8
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e005      	b.n	8005448 <UART_SetConfig+0x150>
 800543c:	2310      	movs	r3, #16
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	bf00      	nop
 8005442:	e001      	b.n	8005448 <UART_SetConfig+0x150>
 8005444:	2310      	movs	r3, #16
 8005446:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <UART_SetConfig+0x2c8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f040 8423 	bne.w	8005c9a <UART_SetConfig+0x9a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005454:	7efb      	ldrb	r3, [r7, #27]
 8005456:	2b08      	cmp	r3, #8
 8005458:	f200 8177 	bhi.w	800574a <UART_SetConfig+0x452>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x16c>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005489 	.word	0x08005489
 8005468:	0800574b 	.word	0x0800574b
 800546c:	0800552b 	.word	0x0800552b
 8005470:	0800574b 	.word	0x0800574b
 8005474:	080055fb 	.word	0x080055fb
 8005478:	0800574b 	.word	0x0800574b
 800547c:	0800574b 	.word	0x0800574b
 8005480:	0800574b 	.word	0x0800574b
 8005484:	0800569d 	.word	0x0800569d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005488:	f7ff f8f6 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 800548c:	4602      	mov	r2, r0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d044      	beq.n	8005520 <UART_SetConfig+0x228>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b01      	cmp	r3, #1
 800549c:	d03e      	beq.n	800551c <UART_SetConfig+0x224>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d038      	beq.n	8005518 <UART_SetConfig+0x220>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d032      	beq.n	8005514 <UART_SetConfig+0x21c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d02c      	beq.n	8005510 <UART_SetConfig+0x218>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d026      	beq.n	800550c <UART_SetConfig+0x214>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d020      	beq.n	8005508 <UART_SetConfig+0x210>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b07      	cmp	r3, #7
 80054cc:	d01a      	beq.n	8005504 <UART_SetConfig+0x20c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d014      	beq.n	8005500 <UART_SetConfig+0x208>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b09      	cmp	r3, #9
 80054dc:	d00e      	beq.n	80054fc <UART_SetConfig+0x204>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b0a      	cmp	r3, #10
 80054e4:	d008      	beq.n	80054f8 <UART_SetConfig+0x200>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b0b      	cmp	r3, #11
 80054ec:	d102      	bne.n	80054f4 <UART_SetConfig+0x1fc>
 80054ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054f2:	e016      	b.n	8005522 <UART_SetConfig+0x22a>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e014      	b.n	8005522 <UART_SetConfig+0x22a>
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	e012      	b.n	8005522 <UART_SetConfig+0x22a>
 80054fc:	2340      	movs	r3, #64	; 0x40
 80054fe:	e010      	b.n	8005522 <UART_SetConfig+0x22a>
 8005500:	2320      	movs	r3, #32
 8005502:	e00e      	b.n	8005522 <UART_SetConfig+0x22a>
 8005504:	2310      	movs	r3, #16
 8005506:	e00c      	b.n	8005522 <UART_SetConfig+0x22a>
 8005508:	230c      	movs	r3, #12
 800550a:	e00a      	b.n	8005522 <UART_SetConfig+0x22a>
 800550c:	230a      	movs	r3, #10
 800550e:	e008      	b.n	8005522 <UART_SetConfig+0x22a>
 8005510:	2308      	movs	r3, #8
 8005512:	e006      	b.n	8005522 <UART_SetConfig+0x22a>
 8005514:	2306      	movs	r3, #6
 8005516:	e004      	b.n	8005522 <UART_SetConfig+0x22a>
 8005518:	2304      	movs	r3, #4
 800551a:	e002      	b.n	8005522 <UART_SetConfig+0x22a>
 800551c:	2302      	movs	r3, #2
 800551e:	e000      	b.n	8005522 <UART_SetConfig+0x22a>
 8005520:	2301      	movs	r3, #1
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	60fb      	str	r3, [r7, #12]
        break;
 8005528:	e112      	b.n	8005750 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	d060      	beq.n	80055f4 <UART_SetConfig+0x2fc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b01      	cmp	r3, #1
 8005538:	d03e      	beq.n	80055b8 <UART_SetConfig+0x2c0>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b02      	cmp	r3, #2
 8005540:	d038      	beq.n	80055b4 <UART_SetConfig+0x2bc>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b03      	cmp	r3, #3
 8005548:	d032      	beq.n	80055b0 <UART_SetConfig+0x2b8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b04      	cmp	r3, #4
 8005550:	d02c      	beq.n	80055ac <UART_SetConfig+0x2b4>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b05      	cmp	r3, #5
 8005558:	d026      	beq.n	80055a8 <UART_SetConfig+0x2b0>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b06      	cmp	r3, #6
 8005560:	d020      	beq.n	80055a4 <UART_SetConfig+0x2ac>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b07      	cmp	r3, #7
 8005568:	d01a      	beq.n	80055a0 <UART_SetConfig+0x2a8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b08      	cmp	r3, #8
 8005570:	d014      	beq.n	800559c <UART_SetConfig+0x2a4>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b09      	cmp	r3, #9
 8005578:	d00e      	beq.n	8005598 <UART_SetConfig+0x2a0>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b0a      	cmp	r3, #10
 8005580:	d008      	beq.n	8005594 <UART_SetConfig+0x29c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b0b      	cmp	r3, #11
 8005588:	d102      	bne.n	8005590 <UART_SetConfig+0x298>
 800558a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800558e:	e032      	b.n	80055f6 <UART_SetConfig+0x2fe>
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <UART_SetConfig+0x2d0>)
 8005592:	e030      	b.n	80055f6 <UART_SetConfig+0x2fe>
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <UART_SetConfig+0x2d4>)
 8005596:	e02e      	b.n	80055f6 <UART_SetConfig+0x2fe>
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <UART_SetConfig+0x2d8>)
 800559a:	e02c      	b.n	80055f6 <UART_SetConfig+0x2fe>
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <UART_SetConfig+0x2dc>)
 800559e:	e02a      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <UART_SetConfig+0x2e0>)
 80055a2:	e028      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <UART_SetConfig+0x2e4>)
 80055a6:	e026      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055a8:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <UART_SetConfig+0x2e8>)
 80055aa:	e024      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <UART_SetConfig+0x2ec>)
 80055ae:	e022      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <UART_SetConfig+0x2f0>)
 80055b2:	e020      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055b4:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <UART_SetConfig+0x2f4>)
 80055b6:	e01e      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <UART_SetConfig+0x2f8>)
 80055ba:	e01c      	b.n	80055f6 <UART_SetConfig+0x2fe>
 80055bc:	cfff69f3 	.word	0xcfff69f3
 80055c0:	40008000 	.word	0x40008000
 80055c4:	40013800 	.word	0x40013800
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	0001e848 	.word	0x0001e848
 80055d0:	0003d090 	.word	0x0003d090
 80055d4:	0007a120 	.word	0x0007a120
 80055d8:	000f4240 	.word	0x000f4240
 80055dc:	00145855 	.word	0x00145855
 80055e0:	00186a00 	.word	0x00186a00
 80055e4:	001e8480 	.word	0x001e8480
 80055e8:	0028b0aa 	.word	0x0028b0aa
 80055ec:	003d0900 	.word	0x003d0900
 80055f0:	007a1200 	.word	0x007a1200
 80055f4:	4ba7      	ldr	r3, [pc, #668]	; (8005894 <UART_SetConfig+0x59c>)
 80055f6:	60fb      	str	r3, [r7, #12]
        break;
 80055f8:	e0aa      	b.n	8005750 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055fa:	f7fe ffbf 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d044      	beq.n	8005692 <UART_SetConfig+0x39a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b01      	cmp	r3, #1
 800560e:	d03e      	beq.n	800568e <UART_SetConfig+0x396>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b02      	cmp	r3, #2
 8005616:	d038      	beq.n	800568a <UART_SetConfig+0x392>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b03      	cmp	r3, #3
 800561e:	d032      	beq.n	8005686 <UART_SetConfig+0x38e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b04      	cmp	r3, #4
 8005626:	d02c      	beq.n	8005682 <UART_SetConfig+0x38a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b05      	cmp	r3, #5
 800562e:	d026      	beq.n	800567e <UART_SetConfig+0x386>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b06      	cmp	r3, #6
 8005636:	d020      	beq.n	800567a <UART_SetConfig+0x382>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b07      	cmp	r3, #7
 800563e:	d01a      	beq.n	8005676 <UART_SetConfig+0x37e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b08      	cmp	r3, #8
 8005646:	d014      	beq.n	8005672 <UART_SetConfig+0x37a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b09      	cmp	r3, #9
 800564e:	d00e      	beq.n	800566e <UART_SetConfig+0x376>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b0a      	cmp	r3, #10
 8005656:	d008      	beq.n	800566a <UART_SetConfig+0x372>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b0b      	cmp	r3, #11
 800565e:	d102      	bne.n	8005666 <UART_SetConfig+0x36e>
 8005660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005664:	e016      	b.n	8005694 <UART_SetConfig+0x39c>
 8005666:	2301      	movs	r3, #1
 8005668:	e014      	b.n	8005694 <UART_SetConfig+0x39c>
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	e012      	b.n	8005694 <UART_SetConfig+0x39c>
 800566e:	2340      	movs	r3, #64	; 0x40
 8005670:	e010      	b.n	8005694 <UART_SetConfig+0x39c>
 8005672:	2320      	movs	r3, #32
 8005674:	e00e      	b.n	8005694 <UART_SetConfig+0x39c>
 8005676:	2310      	movs	r3, #16
 8005678:	e00c      	b.n	8005694 <UART_SetConfig+0x39c>
 800567a:	230c      	movs	r3, #12
 800567c:	e00a      	b.n	8005694 <UART_SetConfig+0x39c>
 800567e:	230a      	movs	r3, #10
 8005680:	e008      	b.n	8005694 <UART_SetConfig+0x39c>
 8005682:	2308      	movs	r3, #8
 8005684:	e006      	b.n	8005694 <UART_SetConfig+0x39c>
 8005686:	2306      	movs	r3, #6
 8005688:	e004      	b.n	8005694 <UART_SetConfig+0x39c>
 800568a:	2304      	movs	r3, #4
 800568c:	e002      	b.n	8005694 <UART_SetConfig+0x39c>
 800568e:	2302      	movs	r3, #2
 8005690:	e000      	b.n	8005694 <UART_SetConfig+0x39c>
 8005692:	2301      	movs	r3, #1
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	60fb      	str	r3, [r7, #12]
        break;
 800569a:	e059      	b.n	8005750 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d04e      	beq.n	8005742 <UART_SetConfig+0x44a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d047      	beq.n	800573c <UART_SetConfig+0x444>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d040      	beq.n	8005736 <UART_SetConfig+0x43e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d039      	beq.n	8005730 <UART_SetConfig+0x438>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d032      	beq.n	800572a <UART_SetConfig+0x432>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d02b      	beq.n	8005724 <UART_SetConfig+0x42c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b06      	cmp	r3, #6
 80056d2:	d024      	beq.n	800571e <UART_SetConfig+0x426>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b07      	cmp	r3, #7
 80056da:	d01d      	beq.n	8005718 <UART_SetConfig+0x420>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d016      	beq.n	8005712 <UART_SetConfig+0x41a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	d00f      	beq.n	800570c <UART_SetConfig+0x414>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2b0a      	cmp	r3, #10
 80056f2:	d008      	beq.n	8005706 <UART_SetConfig+0x40e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b0b      	cmp	r3, #11
 80056fa:	d101      	bne.n	8005700 <UART_SetConfig+0x408>
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	e022      	b.n	8005746 <UART_SetConfig+0x44e>
 8005700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005704:	e01f      	b.n	8005746 <UART_SetConfig+0x44e>
 8005706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800570a:	e01c      	b.n	8005746 <UART_SetConfig+0x44e>
 800570c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005710:	e019      	b.n	8005746 <UART_SetConfig+0x44e>
 8005712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005716:	e016      	b.n	8005746 <UART_SetConfig+0x44e>
 8005718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800571c:	e013      	b.n	8005746 <UART_SetConfig+0x44e>
 800571e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005722:	e010      	b.n	8005746 <UART_SetConfig+0x44e>
 8005724:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x44e>
 800572a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800572e:	e00a      	b.n	8005746 <UART_SetConfig+0x44e>
 8005730:	f241 5355 	movw	r3, #5461	; 0x1555
 8005734:	e007      	b.n	8005746 <UART_SetConfig+0x44e>
 8005736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800573a:	e004      	b.n	8005746 <UART_SetConfig+0x44e>
 800573c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005740:	e001      	b.n	8005746 <UART_SetConfig+0x44e>
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	60fb      	str	r3, [r7, #12]
        break;
 8005748:	e002      	b.n	8005750 <UART_SetConfig+0x458>
      default:
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	74fb      	strb	r3, [r7, #19]
        break;
 800574e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 85f6 	beq.w	8006344 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d305      	bcc.n	8005774 <UART_SetConfig+0x47c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	429a      	cmp	r2, r3
 8005772:	d903      	bls.n	800577c <UART_SetConfig+0x484>
      {
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	74fb      	strb	r3, [r7, #19]
 8005778:	f000 bde4 	b.w	8006344 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 800577c:	7efb      	ldrb	r3, [r7, #27]
 800577e:	2b08      	cmp	r3, #8
 8005780:	f200 8278 	bhi.w	8005c74 <UART_SetConfig+0x97c>
 8005784:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0x494>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057b1 	.word	0x080057b1
 8005790:	08005c75 	.word	0x08005c75
 8005794:	080058f1 	.word	0x080058f1
 8005798:	08005c75 	.word	0x08005c75
 800579c:	080059e7 	.word	0x080059e7
 80057a0:	08005c75 	.word	0x08005c75
 80057a4:	08005c75 	.word	0x08005c75
 80057a8:	08005c75 	.word	0x08005c75
 80057ac:	08005b23 	.word	0x08005b23
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b0:	f7fe ff62 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f04f 0100 	mov.w	r1, #0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d069      	beq.n	8005898 <UART_SetConfig+0x5a0>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d05e      	beq.n	800588a <UART_SetConfig+0x592>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d055      	beq.n	8005880 <UART_SetConfig+0x588>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d04c      	beq.n	8005876 <UART_SetConfig+0x57e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d043      	beq.n	800586c <UART_SetConfig+0x574>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d03a      	beq.n	8005862 <UART_SetConfig+0x56a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d031      	beq.n	8005858 <UART_SetConfig+0x560>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b07      	cmp	r3, #7
 80057fa:	d028      	beq.n	800584e <UART_SetConfig+0x556>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b08      	cmp	r3, #8
 8005802:	d01f      	beq.n	8005844 <UART_SetConfig+0x54c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b09      	cmp	r3, #9
 800580a:	d016      	beq.n	800583a <UART_SetConfig+0x542>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b0a      	cmp	r3, #10
 8005812:	d00d      	beq.n	8005830 <UART_SetConfig+0x538>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b0b      	cmp	r3, #11
 800581a:	d104      	bne.n	8005826 <UART_SetConfig+0x52e>
 800581c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005820:	f04f 0400 	mov.w	r4, #0
 8005824:	e03c      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005826:	f04f 0301 	mov.w	r3, #1
 800582a:	f04f 0400 	mov.w	r4, #0
 800582e:	e037      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005830:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	e032      	b.n	80058a0 <UART_SetConfig+0x5a8>
 800583a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800583e:	f04f 0400 	mov.w	r4, #0
 8005842:	e02d      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005844:	f04f 0320 	mov.w	r3, #32
 8005848:	f04f 0400 	mov.w	r4, #0
 800584c:	e028      	b.n	80058a0 <UART_SetConfig+0x5a8>
 800584e:	f04f 0310 	mov.w	r3, #16
 8005852:	f04f 0400 	mov.w	r4, #0
 8005856:	e023      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005858:	f04f 030c 	mov.w	r3, #12
 800585c:	f04f 0400 	mov.w	r4, #0
 8005860:	e01e      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005862:	f04f 030a 	mov.w	r3, #10
 8005866:	f04f 0400 	mov.w	r4, #0
 800586a:	e019      	b.n	80058a0 <UART_SetConfig+0x5a8>
 800586c:	f04f 0308 	mov.w	r3, #8
 8005870:	f04f 0400 	mov.w	r4, #0
 8005874:	e014      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005876:	f04f 0306 	mov.w	r3, #6
 800587a:	f04f 0400 	mov.w	r4, #0
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005880:	f04f 0304 	mov.w	r3, #4
 8005884:	f04f 0400 	mov.w	r4, #0
 8005888:	e00a      	b.n	80058a0 <UART_SetConfig+0x5a8>
 800588a:	f04f 0302 	mov.w	r3, #2
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	e005      	b.n	80058a0 <UART_SetConfig+0x5a8>
 8005894:	00f42400 	.word	0x00f42400
 8005898:	f04f 0301 	mov.w	r3, #1
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	f7fa fc74 	bl	8000190 <__aeabi_uldivmod>
 80058a8:	4603      	mov	r3, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4619      	mov	r1, r3
 80058ae:	4622      	mov	r2, r4
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	0214      	lsls	r4, r2, #8
 80058ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058be:	020b      	lsls	r3, r1, #8
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6852      	ldr	r2, [r2, #4]
 80058c4:	0852      	lsrs	r2, r2, #1
 80058c6:	4611      	mov	r1, r2
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	eb13 0b01 	adds.w	fp, r3, r1
 80058d0:	eb44 0c02 	adc.w	ip, r4, r2
 80058d4:	4658      	mov	r0, fp
 80058d6:	4661      	mov	r1, ip
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f04f 0400 	mov.w	r4, #0
 80058e0:	461a      	mov	r2, r3
 80058e2:	4623      	mov	r3, r4
 80058e4:	f7fa fc54 	bl	8000190 <__aeabi_uldivmod>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	617b      	str	r3, [r7, #20]
            break;
 80058ee:	e1c4      	b.n	8005c7a <UART_SetConfig+0x982>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05b      	beq.n	80059b0 <UART_SetConfig+0x6b8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d053      	beq.n	80059a8 <UART_SetConfig+0x6b0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b02      	cmp	r3, #2
 8005906:	d04b      	beq.n	80059a0 <UART_SetConfig+0x6a8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b03      	cmp	r3, #3
 800590e:	d043      	beq.n	8005998 <UART_SetConfig+0x6a0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b04      	cmp	r3, #4
 8005916:	d03b      	beq.n	8005990 <UART_SetConfig+0x698>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b05      	cmp	r3, #5
 800591e:	d033      	beq.n	8005988 <UART_SetConfig+0x690>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b06      	cmp	r3, #6
 8005926:	d02b      	beq.n	8005980 <UART_SetConfig+0x688>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b07      	cmp	r3, #7
 800592e:	d023      	beq.n	8005978 <UART_SetConfig+0x680>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b08      	cmp	r3, #8
 8005936:	d01b      	beq.n	8005970 <UART_SetConfig+0x678>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b09      	cmp	r3, #9
 800593e:	d013      	beq.n	8005968 <UART_SetConfig+0x670>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b0a      	cmp	r3, #10
 8005946:	d00b      	beq.n	8005960 <UART_SetConfig+0x668>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b0b      	cmp	r3, #11
 800594e:	d103      	bne.n	8005958 <UART_SetConfig+0x660>
 8005950:	4bad      	ldr	r3, [pc, #692]	; (8005c08 <UART_SetConfig+0x910>)
 8005952:	f04f 0400 	mov.w	r4, #0
 8005956:	e02e      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005958:	4bac      	ldr	r3, [pc, #688]	; (8005c0c <UART_SetConfig+0x914>)
 800595a:	f04f 0400 	mov.w	r4, #0
 800595e:	e02a      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005960:	4bab      	ldr	r3, [pc, #684]	; (8005c10 <UART_SetConfig+0x918>)
 8005962:	f04f 0400 	mov.w	r4, #0
 8005966:	e026      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005968:	4baa      	ldr	r3, [pc, #680]	; (8005c14 <UART_SetConfig+0x91c>)
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	e022      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005970:	4ba9      	ldr	r3, [pc, #676]	; (8005c18 <UART_SetConfig+0x920>)
 8005972:	f04f 0400 	mov.w	r4, #0
 8005976:	e01e      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005978:	4ba8      	ldr	r3, [pc, #672]	; (8005c1c <UART_SetConfig+0x924>)
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	e01a      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005980:	a49d      	add	r4, pc, #628	; (adr r4, 8005bf8 <UART_SetConfig+0x900>)
 8005982:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005986:	e016      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005988:	4ba5      	ldr	r3, [pc, #660]	; (8005c20 <UART_SetConfig+0x928>)
 800598a:	f04f 0400 	mov.w	r4, #0
 800598e:	e012      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005990:	4ba4      	ldr	r3, [pc, #656]	; (8005c24 <UART_SetConfig+0x92c>)
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	e00e      	b.n	80059b6 <UART_SetConfig+0x6be>
 8005998:	a499      	add	r4, pc, #612	; (adr r4, 8005c00 <UART_SetConfig+0x908>)
 800599a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800599e:	e00a      	b.n	80059b6 <UART_SetConfig+0x6be>
 80059a0:	4ba1      	ldr	r3, [pc, #644]	; (8005c28 <UART_SetConfig+0x930>)
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	e006      	b.n	80059b6 <UART_SetConfig+0x6be>
 80059a8:	4ba0      	ldr	r3, [pc, #640]	; (8005c2c <UART_SetConfig+0x934>)
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x6be>
 80059b0:	4b96      	ldr	r3, [pc, #600]	; (8005c0c <UART_SetConfig+0x914>)
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6852      	ldr	r2, [r2, #4]
 80059ba:	0852      	lsrs	r2, r2, #1
 80059bc:	4611      	mov	r1, r2
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	eb13 0b01 	adds.w	fp, r3, r1
 80059c6:	eb44 0c02 	adc.w	ip, r4, r2
 80059ca:	4658      	mov	r0, fp
 80059cc:	4661      	mov	r1, ip
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f04f 0400 	mov.w	r4, #0
 80059d6:	461a      	mov	r2, r3
 80059d8:	4623      	mov	r3, r4
 80059da:	f7fa fbd9 	bl	8000190 <__aeabi_uldivmod>
 80059de:	4603      	mov	r3, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	617b      	str	r3, [r7, #20]
            break;
 80059e4:	e149      	b.n	8005c7a <UART_SetConfig+0x982>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e6:	f7fe fdc9 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f04f 0100 	mov.w	r1, #0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d067      	beq.n	8005aca <UART_SetConfig+0x7d2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d05e      	beq.n	8005ac0 <UART_SetConfig+0x7c8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d055      	beq.n	8005ab6 <UART_SetConfig+0x7be>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d04c      	beq.n	8005aac <UART_SetConfig+0x7b4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d043      	beq.n	8005aa2 <UART_SetConfig+0x7aa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d03a      	beq.n	8005a98 <UART_SetConfig+0x7a0>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d031      	beq.n	8005a8e <UART_SetConfig+0x796>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b07      	cmp	r3, #7
 8005a30:	d028      	beq.n	8005a84 <UART_SetConfig+0x78c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d01f      	beq.n	8005a7a <UART_SetConfig+0x782>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2b09      	cmp	r3, #9
 8005a40:	d016      	beq.n	8005a70 <UART_SetConfig+0x778>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b0a      	cmp	r3, #10
 8005a48:	d00d      	beq.n	8005a66 <UART_SetConfig+0x76e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2b0b      	cmp	r3, #11
 8005a50:	d104      	bne.n	8005a5c <UART_SetConfig+0x764>
 8005a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	e03a      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a5c:	f04f 0301 	mov.w	r3, #1
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	e035      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a6a:	f04f 0400 	mov.w	r4, #0
 8005a6e:	e030      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a70:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a74:	f04f 0400 	mov.w	r4, #0
 8005a78:	e02b      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a7a:	f04f 0320 	mov.w	r3, #32
 8005a7e:	f04f 0400 	mov.w	r4, #0
 8005a82:	e026      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a84:	f04f 0310 	mov.w	r3, #16
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	e021      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a8e:	f04f 030c 	mov.w	r3, #12
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	e01c      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005a98:	f04f 030a 	mov.w	r3, #10
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	e017      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005aa2:	f04f 0308 	mov.w	r3, #8
 8005aa6:	f04f 0400 	mov.w	r4, #0
 8005aaa:	e012      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005aac:	f04f 0306 	mov.w	r3, #6
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	e00d      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005ab6:	f04f 0304 	mov.w	r3, #4
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	e008      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005ac0:	f04f 0302 	mov.w	r3, #2
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	e003      	b.n	8005ad2 <UART_SetConfig+0x7da>
 8005aca:	f04f 0301 	mov.w	r3, #1
 8005ace:	f04f 0400 	mov.w	r4, #0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	f7fa fb5b 	bl	8000190 <__aeabi_uldivmod>
 8005ada:	4603      	mov	r3, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	0214      	lsls	r4, r2, #8
 8005aec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005af0:	020b      	lsls	r3, r1, #8
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6852      	ldr	r2, [r2, #4]
 8005af6:	0852      	lsrs	r2, r2, #1
 8005af8:	4611      	mov	r1, r2
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	eb13 0b01 	adds.w	fp, r3, r1
 8005b02:	eb44 0c02 	adc.w	ip, r4, r2
 8005b06:	4658      	mov	r0, fp
 8005b08:	4661      	mov	r1, ip
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f04f 0400 	mov.w	r4, #0
 8005b12:	461a      	mov	r2, r3
 8005b14:	4623      	mov	r3, r4
 8005b16:	f7fa fb3b 	bl	8000190 <__aeabi_uldivmod>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	617b      	str	r3, [r7, #20]
            break;
 8005b20:	e0ab      	b.n	8005c7a <UART_SetConfig+0x982>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8088 	beq.w	8005c3c <UART_SetConfig+0x944>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d05b      	beq.n	8005bec <UART_SetConfig+0x8f4>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d052      	beq.n	8005be2 <UART_SetConfig+0x8ea>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d04a      	beq.n	8005bda <UART_SetConfig+0x8e2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d041      	beq.n	8005bd0 <UART_SetConfig+0x8d8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	d039      	beq.n	8005bc8 <UART_SetConfig+0x8d0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d031      	beq.n	8005bc0 <UART_SetConfig+0x8c8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d028      	beq.n	8005bb6 <UART_SetConfig+0x8be>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d01f      	beq.n	8005bac <UART_SetConfig+0x8b4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b09      	cmp	r3, #9
 8005b72:	d016      	beq.n	8005ba2 <UART_SetConfig+0x8aa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b0a      	cmp	r3, #10
 8005b7a:	d00d      	beq.n	8005b98 <UART_SetConfig+0x8a0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b0b      	cmp	r3, #11
 8005b82:	d104      	bne.n	8005b8e <UART_SetConfig+0x896>
 8005b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b88:	f04f 0400 	mov.w	r4, #0
 8005b8c:	e05a      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005b8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b92:	f04f 0400 	mov.w	r4, #0
 8005b96:	e055      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	e050      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	e04b      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bb0:	f04f 0400 	mov.w	r4, #0
 8005bb4:	e046      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005bba:	f04f 0400 	mov.w	r4, #0
 8005bbe:	e041      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <UART_SetConfig+0x938>)
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	e03d      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <UART_SetConfig+0x93c>)
 8005bca:	f04f 0400 	mov.w	r4, #0
 8005bce:	e039      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	e034      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bda:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <UART_SetConfig+0x940>)
 8005bdc:	f04f 0400 	mov.w	r4, #0
 8005be0:	e030      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005be2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005be6:	f04f 0400 	mov.w	r4, #0
 8005bea:	e02b      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	e026      	b.n	8005c44 <UART_SetConfig+0x94c>
 8005bf6:	bf00      	nop
 8005bf8:	14585500 	.word	0x14585500
 8005bfc:	00000000 	.word	0x00000000
 8005c00:	28b0aa00 	.word	0x28b0aa00
 8005c04:	00000000 	.word	0x00000000
 8005c08:	00f42400 	.word	0x00f42400
 8005c0c:	f4240000 	.word	0xf4240000
 8005c10:	01e84800 	.word	0x01e84800
 8005c14:	03d09000 	.word	0x03d09000
 8005c18:	07a12000 	.word	0x07a12000
 8005c1c:	0f424000 	.word	0x0f424000
 8005c20:	186a0000 	.word	0x186a0000
 8005c24:	1e848000 	.word	0x1e848000
 8005c28:	3d090000 	.word	0x3d090000
 8005c2c:	7a120000 	.word	0x7a120000
 8005c30:	000aaa00 	.word	0x000aaa00
 8005c34:	000ccc00 	.word	0x000ccc00
 8005c38:	00155500 	.word	0x00155500
 8005c3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6852      	ldr	r2, [r2, #4]
 8005c48:	0852      	lsrs	r2, r2, #1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	eb13 0b01 	adds.w	fp, r3, r1
 8005c54:	eb44 0c02 	adc.w	ip, r4, r2
 8005c58:	4658      	mov	r0, fp
 8005c5a:	4661      	mov	r1, ip
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	461a      	mov	r2, r3
 8005c66:	4623      	mov	r3, r4
 8005c68:	f7fa fa92 	bl	8000190 <__aeabi_uldivmod>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	617b      	str	r3, [r7, #20]
            break;
 8005c72:	e002      	b.n	8005c7a <UART_SetConfig+0x982>
          default:
            ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	74fb      	strb	r3, [r7, #19]
            break;
 8005c78:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c80:	d308      	bcc.n	8005c94 <UART_SetConfig+0x99c>
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c88:	d204      	bcs.n	8005c94 <UART_SetConfig+0x99c>
        {
          huart->Instance->BRR = usartdiv;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e357      	b.n	8006344 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	74fb      	strb	r3, [r7, #19]
 8005c98:	e354      	b.n	8006344 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	f040 81a4 	bne.w	8005fee <UART_SetConfig+0xcf6>
  {
    switch (clocksource)
 8005ca6:	7efb      	ldrb	r3, [r7, #27]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	f200 817f 	bhi.w	8005fae <UART_SetConfig+0xcb6>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0x9c0>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cd9 	.word	0x08005cd9
 8005cbc:	08005d8f 	.word	0x08005d8f
 8005cc0:	08005faf 	.word	0x08005faf
 8005cc4:	08005e37 	.word	0x08005e37
 8005cc8:	08005faf 	.word	0x08005faf
 8005ccc:	08005faf 	.word	0x08005faf
 8005cd0:	08005faf 	.word	0x08005faf
 8005cd4:	08005eed 	.word	0x08005eed
    {
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd8:	f7fe fce4 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d044      	beq.n	8005d70 <UART_SetConfig+0xa78>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d03e      	beq.n	8005d6c <UART_SetConfig+0xa74>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d038      	beq.n	8005d68 <UART_SetConfig+0xa70>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d032      	beq.n	8005d64 <UART_SetConfig+0xa6c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d02c      	beq.n	8005d60 <UART_SetConfig+0xa68>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d026      	beq.n	8005d5c <UART_SetConfig+0xa64>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d020      	beq.n	8005d58 <UART_SetConfig+0xa60>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b07      	cmp	r3, #7
 8005d1c:	d01a      	beq.n	8005d54 <UART_SetConfig+0xa5c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d014      	beq.n	8005d50 <UART_SetConfig+0xa58>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d00e      	beq.n	8005d4c <UART_SetConfig+0xa54>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b0a      	cmp	r3, #10
 8005d34:	d008      	beq.n	8005d48 <UART_SetConfig+0xa50>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b0b      	cmp	r3, #11
 8005d3c:	d102      	bne.n	8005d44 <UART_SetConfig+0xa4c>
 8005d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d42:	e016      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e014      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	e012      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	e010      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d50:	2320      	movs	r3, #32
 8005d52:	e00e      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d54:	2310      	movs	r3, #16
 8005d56:	e00c      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	e00a      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d5c:	230a      	movs	r3, #10
 8005d5e:	e008      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d60:	2308      	movs	r3, #8
 8005d62:	e006      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d64:	2306      	movs	r3, #6
 8005d66:	e004      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	e002      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e000      	b.n	8005d72 <UART_SetConfig+0xa7a>
 8005d70:	2301      	movs	r3, #1
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	005a      	lsls	r2, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	441a      	add	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	617b      	str	r3, [r7, #20]
        break;
 8005d8c:	e112      	b.n	8005fb4 <UART_SetConfig+0xcbc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d043      	beq.n	8005e1e <UART_SetConfig+0xb26>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d03d      	beq.n	8005e1a <UART_SetConfig+0xb22>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d037      	beq.n	8005e16 <UART_SetConfig+0xb1e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d031      	beq.n	8005e12 <UART_SetConfig+0xb1a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d02b      	beq.n	8005e0e <UART_SetConfig+0xb16>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d025      	beq.n	8005e0a <UART_SetConfig+0xb12>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d01f      	beq.n	8005e06 <UART_SetConfig+0xb0e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b07      	cmp	r3, #7
 8005dcc:	d019      	beq.n	8005e02 <UART_SetConfig+0xb0a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d013      	beq.n	8005dfe <UART_SetConfig+0xb06>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d00d      	beq.n	8005dfa <UART_SetConfig+0xb02>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	2b0a      	cmp	r3, #10
 8005de4:	d007      	beq.n	8005df6 <UART_SetConfig+0xafe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b0b      	cmp	r3, #11
 8005dec:	d101      	bne.n	8005df2 <UART_SetConfig+0xafa>
 8005dee:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <UART_SetConfig+0xd28>)
 8005df0:	e016      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005df2:	4b8c      	ldr	r3, [pc, #560]	; (8006024 <UART_SetConfig+0xd2c>)
 8005df4:	e014      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005df6:	4b8c      	ldr	r3, [pc, #560]	; (8006028 <UART_SetConfig+0xd30>)
 8005df8:	e012      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005dfa:	4b8c      	ldr	r3, [pc, #560]	; (800602c <UART_SetConfig+0xd34>)
 8005dfc:	e010      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005dfe:	4b8c      	ldr	r3, [pc, #560]	; (8006030 <UART_SetConfig+0xd38>)
 8005e00:	e00e      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e02:	4b8c      	ldr	r3, [pc, #560]	; (8006034 <UART_SetConfig+0xd3c>)
 8005e04:	e00c      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e06:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <UART_SetConfig+0xd40>)
 8005e08:	e00a      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e0a:	4b8c      	ldr	r3, [pc, #560]	; (800603c <UART_SetConfig+0xd44>)
 8005e0c:	e008      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e0e:	4b8c      	ldr	r3, [pc, #560]	; (8006040 <UART_SetConfig+0xd48>)
 8005e10:	e006      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e12:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <UART_SetConfig+0xd4c>)
 8005e14:	e004      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e16:	4b8c      	ldr	r3, [pc, #560]	; (8006048 <UART_SetConfig+0xd50>)
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e1a:	4b8c      	ldr	r3, [pc, #560]	; (800604c <UART_SetConfig+0xd54>)
 8005e1c:	e000      	b.n	8005e20 <UART_SetConfig+0xb28>
 8005e1e:	4b81      	ldr	r3, [pc, #516]	; (8006024 <UART_SetConfig+0xd2c>)
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6852      	ldr	r2, [r2, #4]
 8005e24:	0852      	lsrs	r2, r2, #1
 8005e26:	441a      	add	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	617b      	str	r3, [r7, #20]
        break;
 8005e34:	e0be      	b.n	8005fb4 <UART_SetConfig+0xcbc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e36:	f7fe fba1 	bl	800457c <HAL_RCC_GetSysClockFreq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d044      	beq.n	8005ece <UART_SetConfig+0xbd6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d03e      	beq.n	8005eca <UART_SetConfig+0xbd2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d038      	beq.n	8005ec6 <UART_SetConfig+0xbce>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d032      	beq.n	8005ec2 <UART_SetConfig+0xbca>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d02c      	beq.n	8005ebe <UART_SetConfig+0xbc6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b05      	cmp	r3, #5
 8005e6a:	d026      	beq.n	8005eba <UART_SetConfig+0xbc2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d020      	beq.n	8005eb6 <UART_SetConfig+0xbbe>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b07      	cmp	r3, #7
 8005e7a:	d01a      	beq.n	8005eb2 <UART_SetConfig+0xbba>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d014      	beq.n	8005eae <UART_SetConfig+0xbb6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b09      	cmp	r3, #9
 8005e8a:	d00e      	beq.n	8005eaa <UART_SetConfig+0xbb2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b0a      	cmp	r3, #10
 8005e92:	d008      	beq.n	8005ea6 <UART_SetConfig+0xbae>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b0b      	cmp	r3, #11
 8005e9a:	d102      	bne.n	8005ea2 <UART_SetConfig+0xbaa>
 8005e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea0:	e016      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e014      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	e012      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	e010      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eae:	2320      	movs	r3, #32
 8005eb0:	e00e      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	e00c      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	e00a      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e008      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e006      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ec2:	2306      	movs	r3, #6
 8005ec4:	e004      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	e002      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e000      	b.n	8005ed0 <UART_SetConfig+0xbd8>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	005a      	lsls	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	441a      	add	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	617b      	str	r3, [r7, #20]
        break;
 8005eea:	e063      	b.n	8005fb4 <UART_SetConfig+0xcbc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d04f      	beq.n	8005f94 <UART_SetConfig+0xc9c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d048      	beq.n	8005f8e <UART_SetConfig+0xc96>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d041      	beq.n	8005f88 <UART_SetConfig+0xc90>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d03a      	beq.n	8005f82 <UART_SetConfig+0xc8a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d033      	beq.n	8005f7c <UART_SetConfig+0xc84>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d02c      	beq.n	8005f76 <UART_SetConfig+0xc7e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d025      	beq.n	8005f70 <UART_SetConfig+0xc78>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d01e      	beq.n	8005f6a <UART_SetConfig+0xc72>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d017      	beq.n	8005f64 <UART_SetConfig+0xc6c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d010      	beq.n	8005f5e <UART_SetConfig+0xc66>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b0a      	cmp	r3, #10
 8005f42:	d009      	beq.n	8005f58 <UART_SetConfig+0xc60>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b0b      	cmp	r3, #11
 8005f4a:	d102      	bne.n	8005f52 <UART_SetConfig+0xc5a>
 8005f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f50:	e022      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f56:	e01f      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5c:	e01c      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f62:	e019      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f68:	e016      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6e:	e013      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f70:	f241 5354 	movw	r3, #5460	; 0x1554
 8005f74:	e010      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f76:	f641 1398 	movw	r3, #6552	; 0x1998
 8005f7a:	e00d      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f80:	e00a      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f82:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005f86:	e007      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f8c:	e004      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f92:	e001      	b.n	8005f98 <UART_SetConfig+0xca0>
 8005f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6852      	ldr	r2, [r2, #4]
 8005f9c:	0852      	lsrs	r2, r2, #1
 8005f9e:	441a      	add	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	617b      	str	r3, [r7, #20]
        break;
 8005fac:	e002      	b.n	8005fb4 <UART_SetConfig+0xcbc>
      default:
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8005fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d916      	bls.n	8005fe8 <UART_SetConfig+0xcf0>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d212      	bcs.n	8005fe8 <UART_SetConfig+0xcf0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f023 030f 	bic.w	r3, r3, #15
 8005fca:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	897b      	ldrh	r3, [r7, #10]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	897a      	ldrh	r2, [r7, #10]
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	e1ad      	b.n	8006344 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	74fb      	strb	r3, [r7, #19]
 8005fec:	e1aa      	b.n	8006344 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 8005fee:	7efb      	ldrb	r3, [r7, #27]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	2b07      	cmp	r3, #7
 8005ff4:	f200 8195 	bhi.w	8006322 <UART_SetConfig+0x102a>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0xd08>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006051 	.word	0x08006051
 8006004:	08006105 	.word	0x08006105
 8006008:	08006323 	.word	0x08006323
 800600c:	080061af 	.word	0x080061af
 8006010:	08006323 	.word	0x08006323
 8006014:	08006323 	.word	0x08006323
 8006018:	08006323 	.word	0x08006323
 800601c:	08006263 	.word	0x08006263
 8006020:	0001e848 	.word	0x0001e848
 8006024:	01e84800 	.word	0x01e84800
 8006028:	0003d090 	.word	0x0003d090
 800602c:	0007a120 	.word	0x0007a120
 8006030:	000f4240 	.word	0x000f4240
 8006034:	001e8480 	.word	0x001e8480
 8006038:	0028b0aa 	.word	0x0028b0aa
 800603c:	0030d400 	.word	0x0030d400
 8006040:	003d0900 	.word	0x003d0900
 8006044:	00516154 	.word	0x00516154
 8006048:	007a1200 	.word	0x007a1200
 800604c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006050:	f7fe fb28 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8006054:	4602      	mov	r2, r0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d044      	beq.n	80060e8 <UART_SetConfig+0xdf0>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b01      	cmp	r3, #1
 8006064:	d03e      	beq.n	80060e4 <UART_SetConfig+0xdec>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b02      	cmp	r3, #2
 800606c:	d038      	beq.n	80060e0 <UART_SetConfig+0xde8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b03      	cmp	r3, #3
 8006074:	d032      	beq.n	80060dc <UART_SetConfig+0xde4>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b04      	cmp	r3, #4
 800607c:	d02c      	beq.n	80060d8 <UART_SetConfig+0xde0>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b05      	cmp	r3, #5
 8006084:	d026      	beq.n	80060d4 <UART_SetConfig+0xddc>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b06      	cmp	r3, #6
 800608c:	d020      	beq.n	80060d0 <UART_SetConfig+0xdd8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b07      	cmp	r3, #7
 8006094:	d01a      	beq.n	80060cc <UART_SetConfig+0xdd4>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b08      	cmp	r3, #8
 800609c:	d014      	beq.n	80060c8 <UART_SetConfig+0xdd0>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d00e      	beq.n	80060c4 <UART_SetConfig+0xdcc>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b0a      	cmp	r3, #10
 80060ac:	d008      	beq.n	80060c0 <UART_SetConfig+0xdc8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2b0b      	cmp	r3, #11
 80060b4:	d102      	bne.n	80060bc <UART_SetConfig+0xdc4>
 80060b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ba:	e016      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060bc:	2301      	movs	r3, #1
 80060be:	e014      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	e012      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	e010      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060c8:	2320      	movs	r3, #32
 80060ca:	e00e      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060cc:	2310      	movs	r3, #16
 80060ce:	e00c      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060d0:	230c      	movs	r3, #12
 80060d2:	e00a      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060d4:	230a      	movs	r3, #10
 80060d6:	e008      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060d8:	2308      	movs	r3, #8
 80060da:	e006      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060dc:	2306      	movs	r3, #6
 80060de:	e004      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060e0:	2304      	movs	r3, #4
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e000      	b.n	80060ea <UART_SetConfig+0xdf2>
 80060e8:	2301      	movs	r3, #1
 80060ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	441a      	add	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	617b      	str	r3, [r7, #20]
        break;
 8006102:	e111      	b.n	8006328 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d044      	beq.n	8006196 <UART_SetConfig+0xe9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b01      	cmp	r3, #1
 8006112:	d03e      	beq.n	8006192 <UART_SetConfig+0xe9a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b02      	cmp	r3, #2
 800611a:	d038      	beq.n	800618e <UART_SetConfig+0xe96>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b03      	cmp	r3, #3
 8006122:	d032      	beq.n	800618a <UART_SetConfig+0xe92>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b04      	cmp	r3, #4
 800612a:	d02c      	beq.n	8006186 <UART_SetConfig+0xe8e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b05      	cmp	r3, #5
 8006132:	d026      	beq.n	8006182 <UART_SetConfig+0xe8a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b06      	cmp	r3, #6
 800613a:	d020      	beq.n	800617e <UART_SetConfig+0xe86>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b07      	cmp	r3, #7
 8006142:	d01a      	beq.n	800617a <UART_SetConfig+0xe82>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b08      	cmp	r3, #8
 800614a:	d014      	beq.n	8006176 <UART_SetConfig+0xe7e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2b09      	cmp	r3, #9
 8006152:	d00e      	beq.n	8006172 <UART_SetConfig+0xe7a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b0a      	cmp	r3, #10
 800615a:	d008      	beq.n	800616e <UART_SetConfig+0xe76>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b0b      	cmp	r3, #11
 8006162:	d102      	bne.n	800616a <UART_SetConfig+0xe72>
 8006164:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006168:	e016      	b.n	8006198 <UART_SetConfig+0xea0>
 800616a:	4b80      	ldr	r3, [pc, #512]	; (800636c <UART_SetConfig+0x1074>)
 800616c:	e014      	b.n	8006198 <UART_SetConfig+0xea0>
 800616e:	4b80      	ldr	r3, [pc, #512]	; (8006370 <UART_SetConfig+0x1078>)
 8006170:	e012      	b.n	8006198 <UART_SetConfig+0xea0>
 8006172:	4b80      	ldr	r3, [pc, #512]	; (8006374 <UART_SetConfig+0x107c>)
 8006174:	e010      	b.n	8006198 <UART_SetConfig+0xea0>
 8006176:	4b80      	ldr	r3, [pc, #512]	; (8006378 <UART_SetConfig+0x1080>)
 8006178:	e00e      	b.n	8006198 <UART_SetConfig+0xea0>
 800617a:	4b80      	ldr	r3, [pc, #512]	; (800637c <UART_SetConfig+0x1084>)
 800617c:	e00c      	b.n	8006198 <UART_SetConfig+0xea0>
 800617e:	4b80      	ldr	r3, [pc, #512]	; (8006380 <UART_SetConfig+0x1088>)
 8006180:	e00a      	b.n	8006198 <UART_SetConfig+0xea0>
 8006182:	4b80      	ldr	r3, [pc, #512]	; (8006384 <UART_SetConfig+0x108c>)
 8006184:	e008      	b.n	8006198 <UART_SetConfig+0xea0>
 8006186:	4b80      	ldr	r3, [pc, #512]	; (8006388 <UART_SetConfig+0x1090>)
 8006188:	e006      	b.n	8006198 <UART_SetConfig+0xea0>
 800618a:	4b80      	ldr	r3, [pc, #512]	; (800638c <UART_SetConfig+0x1094>)
 800618c:	e004      	b.n	8006198 <UART_SetConfig+0xea0>
 800618e:	4b80      	ldr	r3, [pc, #512]	; (8006390 <UART_SetConfig+0x1098>)
 8006190:	e002      	b.n	8006198 <UART_SetConfig+0xea0>
 8006192:	4b80      	ldr	r3, [pc, #512]	; (8006394 <UART_SetConfig+0x109c>)
 8006194:	e000      	b.n	8006198 <UART_SetConfig+0xea0>
 8006196:	4b75      	ldr	r3, [pc, #468]	; (800636c <UART_SetConfig+0x1074>)
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	0852      	lsrs	r2, r2, #1
 800619e:	441a      	add	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	617b      	str	r3, [r7, #20]
        break;
 80061ac:	e0bc      	b.n	8006328 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ae:	f7fe f9e5 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d044      	beq.n	8006246 <UART_SetConfig+0xf4e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d03e      	beq.n	8006242 <UART_SetConfig+0xf4a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d038      	beq.n	800623e <UART_SetConfig+0xf46>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d032      	beq.n	800623a <UART_SetConfig+0xf42>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d02c      	beq.n	8006236 <UART_SetConfig+0xf3e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d026      	beq.n	8006232 <UART_SetConfig+0xf3a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b06      	cmp	r3, #6
 80061ea:	d020      	beq.n	800622e <UART_SetConfig+0xf36>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d01a      	beq.n	800622a <UART_SetConfig+0xf32>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d014      	beq.n	8006226 <UART_SetConfig+0xf2e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2b09      	cmp	r3, #9
 8006202:	d00e      	beq.n	8006222 <UART_SetConfig+0xf2a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b0a      	cmp	r3, #10
 800620a:	d008      	beq.n	800621e <UART_SetConfig+0xf26>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2b0b      	cmp	r3, #11
 8006212:	d102      	bne.n	800621a <UART_SetConfig+0xf22>
 8006214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006218:	e016      	b.n	8006248 <UART_SetConfig+0xf50>
 800621a:	2301      	movs	r3, #1
 800621c:	e014      	b.n	8006248 <UART_SetConfig+0xf50>
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	e012      	b.n	8006248 <UART_SetConfig+0xf50>
 8006222:	2340      	movs	r3, #64	; 0x40
 8006224:	e010      	b.n	8006248 <UART_SetConfig+0xf50>
 8006226:	2320      	movs	r3, #32
 8006228:	e00e      	b.n	8006248 <UART_SetConfig+0xf50>
 800622a:	2310      	movs	r3, #16
 800622c:	e00c      	b.n	8006248 <UART_SetConfig+0xf50>
 800622e:	230c      	movs	r3, #12
 8006230:	e00a      	b.n	8006248 <UART_SetConfig+0xf50>
 8006232:	230a      	movs	r3, #10
 8006234:	e008      	b.n	8006248 <UART_SetConfig+0xf50>
 8006236:	2308      	movs	r3, #8
 8006238:	e006      	b.n	8006248 <UART_SetConfig+0xf50>
 800623a:	2306      	movs	r3, #6
 800623c:	e004      	b.n	8006248 <UART_SetConfig+0xf50>
 800623e:	2304      	movs	r3, #4
 8006240:	e002      	b.n	8006248 <UART_SetConfig+0xf50>
 8006242:	2302      	movs	r3, #2
 8006244:	e000      	b.n	8006248 <UART_SetConfig+0xf50>
 8006246:	2301      	movs	r3, #1
 8006248:	fbb2 f2f3 	udiv	r2, r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	441a      	add	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	b29b      	uxth	r3, r3
 800625e:	617b      	str	r3, [r7, #20]
        break;
 8006260:	e062      	b.n	8006328 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04e      	beq.n	8006308 <UART_SetConfig+0x1010>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d047      	beq.n	8006302 <UART_SetConfig+0x100a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b02      	cmp	r3, #2
 8006278:	d040      	beq.n	80062fc <UART_SetConfig+0x1004>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b03      	cmp	r3, #3
 8006280:	d039      	beq.n	80062f6 <UART_SetConfig+0xffe>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b04      	cmp	r3, #4
 8006288:	d032      	beq.n	80062f0 <UART_SetConfig+0xff8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b05      	cmp	r3, #5
 8006290:	d02b      	beq.n	80062ea <UART_SetConfig+0xff2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b06      	cmp	r3, #6
 8006298:	d024      	beq.n	80062e4 <UART_SetConfig+0xfec>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b07      	cmp	r3, #7
 80062a0:	d01d      	beq.n	80062de <UART_SetConfig+0xfe6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d016      	beq.n	80062d8 <UART_SetConfig+0xfe0>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	d00f      	beq.n	80062d2 <UART_SetConfig+0xfda>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b0a      	cmp	r3, #10
 80062b8:	d008      	beq.n	80062cc <UART_SetConfig+0xfd4>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d101      	bne.n	80062c6 <UART_SetConfig+0xfce>
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	e022      	b.n	800630c <UART_SetConfig+0x1014>
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	e01f      	b.n	800630c <UART_SetConfig+0x1014>
 80062cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d0:	e01c      	b.n	800630c <UART_SetConfig+0x1014>
 80062d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d6:	e019      	b.n	800630c <UART_SetConfig+0x1014>
 80062d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062dc:	e016      	b.n	800630c <UART_SetConfig+0x1014>
 80062de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062e2:	e013      	b.n	800630c <UART_SetConfig+0x1014>
 80062e4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80062e8:	e010      	b.n	800630c <UART_SetConfig+0x1014>
 80062ea:	f640 43cc 	movw	r3, #3276	; 0xccc
 80062ee:	e00d      	b.n	800630c <UART_SetConfig+0x1014>
 80062f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f4:	e00a      	b.n	800630c <UART_SetConfig+0x1014>
 80062f6:	f241 5355 	movw	r3, #5461	; 0x1555
 80062fa:	e007      	b.n	800630c <UART_SetConfig+0x1014>
 80062fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006300:	e004      	b.n	800630c <UART_SetConfig+0x1014>
 8006302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006306:	e001      	b.n	800630c <UART_SetConfig+0x1014>
 8006308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6852      	ldr	r2, [r2, #4]
 8006310:	0852      	lsrs	r2, r2, #1
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	b29b      	uxth	r3, r3
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e002      	b.n	8006328 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	74fb      	strb	r3, [r7, #19]
        break;
 8006326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b0f      	cmp	r3, #15
 800632c:	d908      	bls.n	8006340 <UART_SetConfig+0x1048>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006334:	d204      	bcs.n	8006340 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e001      	b.n	8006344 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	74fb      	strb	r3, [r7, #19]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006360:	7cfb      	ldrb	r3, [r7, #19]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800636c:	00f42400 	.word	0x00f42400
 8006370:	0001e848 	.word	0x0001e848
 8006374:	0003d090 	.word	0x0003d090
 8006378:	0007a120 	.word	0x0007a120
 800637c:	000f4240 	.word	0x000f4240
 8006380:	00145855 	.word	0x00145855
 8006384:	00186a00 	.word	0x00186a00
 8006388:	001e8480 	.word	0x001e8480
 800638c:	0028b0aa 	.word	0x0028b0aa
 8006390:	003d0900 	.word	0x003d0900
 8006394:	007a1200 	.word	0x007a1200

08006398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01a      	beq.n	80064ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006496:	d10a      	bne.n	80064ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80064ec:	f7fc f806 	bl	80024fc <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d10e      	bne.n	800651e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f82c 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e022      	b.n	8006564 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b04      	cmp	r3, #4
 800652a:	d10e      	bne.n	800654a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f816 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e00c      	b.n	8006564 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e02c      	b.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d028      	beq.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb ffb9 	bl	80024fc <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <UART_WaitOnFlagUntilTimeout+0x30>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11d      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00f      	b.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d0c3      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_UARTEx_DisableFifoMode+0x16>
 8006612:	2302      	movs	r3, #2
 8006614:	e027      	b.n	8006666 <HAL_UARTEx_DisableFifoMode+0x66>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2224      	movs	r2, #36	; 0x24
 8006622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006686:	2302      	movs	r3, #2
 8006688:	e02d      	b.n	80066e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2224      	movs	r2, #36	; 0x24
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f850 	bl	800676c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006702:	2302      	movs	r3, #2
 8006704:	e02d      	b.n	8006762 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2224      	movs	r2, #36	; 0x24
 8006712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f812 	bl	800676c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006774:	4a2f      	ldr	r2, [pc, #188]	; (8006834 <UARTEx_SetNbDataToProcess+0xc8>)
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800677e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006782:	4a2d      	ldr	r2, [pc, #180]	; (8006838 <UARTEx_SetNbDataToProcess+0xcc>)
 8006784:	f107 030c 	add.w	r3, r7, #12
 8006788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800678c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067a8:	e03d      	b.n	8006826 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067aa:	2308      	movs	r3, #8
 80067ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ae:	2308      	movs	r3, #8
 80067b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	0e5b      	lsrs	r3, r3, #25
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	0f5b      	lsrs	r3, r3, #29
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80067d2:	7fbb      	ldrb	r3, [r7, #30]
 80067d4:	7f3a      	ldrb	r2, [r7, #28]
 80067d6:	f107 0120 	add.w	r1, r7, #32
 80067da:	440a      	add	r2, r1
 80067dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	7f3a      	ldrb	r2, [r7, #28]
 80067e6:	f107 0120 	add.w	r1, r7, #32
 80067ea:	440a      	add	r2, r1
 80067ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	7f7a      	ldrb	r2, [r7, #29]
 8006800:	f107 0120 	add.w	r1, r7, #32
 8006804:	440a      	add	r2, r1
 8006806:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800680a:	fb02 f303 	mul.w	r3, r2, r3
 800680e:	7f7a      	ldrb	r2, [r7, #29]
 8006810:	f107 0120 	add.w	r1, r7, #32
 8006814:	440a      	add	r2, r1
 8006816:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800681a:	fb93 f3f2 	sdiv	r3, r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006826:	bf00      	nop
 8006828:	3724      	adds	r7, #36	; 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	08009630 	.word	0x08009630
 8006838:	08009638 	.word	0x08009638

0800683c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3301      	adds	r3, #1
 800684e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d000      	beq.n	800685a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8006858:	e04a      	b.n	80068f0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	3302      	adds	r3, #2
 800685e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	f640 4301 	movw	r3, #3073	; 0xc01
 800686c:	429a      	cmp	r2, r3
 800686e:	d000      	beq.n	8006872 <PeerToPeer_Event_Handler+0x36>
          break;
 8006870:	e03d      	b.n	80068ee <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3302      	adds	r3, #2
 8006876:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	885b      	ldrh	r3, [r3, #2]
 800687c:	b29b      	uxth	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <PeerToPeer_Event_Handler+0xc0>)
 8006882:	889b      	ldrh	r3, [r3, #4]
 8006884:	3302      	adds	r3, #2
 8006886:	429a      	cmp	r2, r3
 8006888:	d118      	bne.n	80068bc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	7a1b      	ldrb	r3, [r3, #8]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800689c:	2300      	movs	r3, #0
 800689e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f002 fbd1 	bl	800904c <P2PS_STM_App_Notification>
        break;
 80068aa:	e01f      	b.n	80068ec <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80068ac:	2301      	movs	r3, #1
 80068ae:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	4618      	mov	r0, r3
 80068b6:	f002 fbc9 	bl	800904c <P2PS_STM_App_Notification>
        break;
 80068ba:	e017      	b.n	80068ec <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	885b      	ldrh	r3, [r3, #2]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <PeerToPeer_Event_Handler+0xc0>)
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	3301      	adds	r3, #1
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d10e      	bne.n	80068ec <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	3308      	adds	r3, #8
 80068e0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f002 fbb0 	bl	800904c <P2PS_STM_App_Notification>
        break;
 80068ec:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 80068ee:	bf00      	nop
  }

  return(return_value);
 80068f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80068f4:	4618      	mov	r0, r3
 80068f6:	3728      	adds	r7, #40	; 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200000cc 	.word	0x200000cc

08006900 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006906:	484a      	ldr	r0, [pc, #296]	; (8006a30 <P2PS_STM_Init+0x130>)
 8006908:	f000 f920 	bl	8006b4c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800690c:	238f      	movs	r3, #143	; 0x8f
 800690e:	703b      	strb	r3, [r7, #0]
 8006910:	23e5      	movs	r3, #229	; 0xe5
 8006912:	707b      	strb	r3, [r7, #1]
 8006914:	23b3      	movs	r3, #179	; 0xb3
 8006916:	70bb      	strb	r3, [r7, #2]
 8006918:	23d5      	movs	r3, #213	; 0xd5
 800691a:	70fb      	strb	r3, [r7, #3]
 800691c:	232e      	movs	r3, #46	; 0x2e
 800691e:	713b      	strb	r3, [r7, #4]
 8006920:	237f      	movs	r3, #127	; 0x7f
 8006922:	717b      	strb	r3, [r7, #5]
 8006924:	234a      	movs	r3, #74	; 0x4a
 8006926:	71bb      	strb	r3, [r7, #6]
 8006928:	2398      	movs	r3, #152	; 0x98
 800692a:	71fb      	strb	r3, [r7, #7]
 800692c:	232a      	movs	r3, #42	; 0x2a
 800692e:	723b      	strb	r3, [r7, #8]
 8006930:	2348      	movs	r3, #72	; 0x48
 8006932:	727b      	strb	r3, [r7, #9]
 8006934:	237a      	movs	r3, #122	; 0x7a
 8006936:	72bb      	strb	r3, [r7, #10]
 8006938:	23cc      	movs	r3, #204	; 0xcc
 800693a:	72fb      	strb	r3, [r7, #11]
 800693c:	2340      	movs	r3, #64	; 0x40
 800693e:	733b      	strb	r3, [r7, #12]
 8006940:	23fe      	movs	r3, #254	; 0xfe
 8006942:	737b      	strb	r3, [r7, #13]
 8006944:	2300      	movs	r3, #0
 8006946:	73bb      	strb	r3, [r7, #14]
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800694c:	4639      	mov	r1, r7
 800694e:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <P2PS_STM_Init+0x134>)
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2308      	movs	r3, #8
 8006954:	2201      	movs	r2, #1
 8006956:	2002      	movs	r0, #2
 8006958:	f000 fcb3 	bl	80072c2 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800695c:	2319      	movs	r3, #25
 800695e:	703b      	strb	r3, [r7, #0]
 8006960:	23ed      	movs	r3, #237	; 0xed
 8006962:	707b      	strb	r3, [r7, #1]
 8006964:	2382      	movs	r3, #130	; 0x82
 8006966:	70bb      	strb	r3, [r7, #2]
 8006968:	23ae      	movs	r3, #174	; 0xae
 800696a:	70fb      	strb	r3, [r7, #3]
 800696c:	23ed      	movs	r3, #237	; 0xed
 800696e:	713b      	strb	r3, [r7, #4]
 8006970:	2321      	movs	r3, #33	; 0x21
 8006972:	717b      	strb	r3, [r7, #5]
 8006974:	234c      	movs	r3, #76	; 0x4c
 8006976:	71bb      	strb	r3, [r7, #6]
 8006978:	239d      	movs	r3, #157	; 0x9d
 800697a:	71fb      	strb	r3, [r7, #7]
 800697c:	2341      	movs	r3, #65	; 0x41
 800697e:	723b      	strb	r3, [r7, #8]
 8006980:	2345      	movs	r3, #69	; 0x45
 8006982:	727b      	strb	r3, [r7, #9]
 8006984:	2322      	movs	r3, #34	; 0x22
 8006986:	72bb      	strb	r3, [r7, #10]
 8006988:	238e      	movs	r3, #142	; 0x8e
 800698a:	72fb      	strb	r3, [r7, #11]
 800698c:	2341      	movs	r3, #65	; 0x41
 800698e:	733b      	strb	r3, [r7, #12]
 8006990:	23fe      	movs	r3, #254	; 0xfe
 8006992:	737b      	strb	r3, [r7, #13]
 8006994:	2300      	movs	r3, #0
 8006996:	73bb      	strb	r3, [r7, #14]
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <P2PS_STM_Init+0x134>)
 800699e:	8818      	ldrh	r0, [r3, #0]
 80069a0:	463a      	mov	r2, r7
 80069a2:	4b25      	ldr	r3, [pc, #148]	; (8006a38 <P2PS_STM_Init+0x138>)
 80069a4:	9305      	str	r3, [sp, #20]
 80069a6:	2301      	movs	r3, #1
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	230a      	movs	r3, #10
 80069ac:	9303      	str	r3, [sp, #12]
 80069ae:	2301      	movs	r3, #1
 80069b0:	9302      	str	r3, [sp, #8]
 80069b2:	2300      	movs	r3, #0
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	2306      	movs	r3, #6
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2302      	movs	r3, #2
 80069bc:	2102      	movs	r1, #2
 80069be:	f000 fd2f 	bl	8007420 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80069c2:	2319      	movs	r3, #25
 80069c4:	703b      	strb	r3, [r7, #0]
 80069c6:	23ed      	movs	r3, #237	; 0xed
 80069c8:	707b      	strb	r3, [r7, #1]
 80069ca:	2382      	movs	r3, #130	; 0x82
 80069cc:	70bb      	strb	r3, [r7, #2]
 80069ce:	23ae      	movs	r3, #174	; 0xae
 80069d0:	70fb      	strb	r3, [r7, #3]
 80069d2:	23ed      	movs	r3, #237	; 0xed
 80069d4:	713b      	strb	r3, [r7, #4]
 80069d6:	2321      	movs	r3, #33	; 0x21
 80069d8:	717b      	strb	r3, [r7, #5]
 80069da:	234c      	movs	r3, #76	; 0x4c
 80069dc:	71bb      	strb	r3, [r7, #6]
 80069de:	239d      	movs	r3, #157	; 0x9d
 80069e0:	71fb      	strb	r3, [r7, #7]
 80069e2:	2341      	movs	r3, #65	; 0x41
 80069e4:	723b      	strb	r3, [r7, #8]
 80069e6:	2345      	movs	r3, #69	; 0x45
 80069e8:	727b      	strb	r3, [r7, #9]
 80069ea:	2322      	movs	r3, #34	; 0x22
 80069ec:	72bb      	strb	r3, [r7, #10]
 80069ee:	238e      	movs	r3, #142	; 0x8e
 80069f0:	72fb      	strb	r3, [r7, #11]
 80069f2:	2342      	movs	r3, #66	; 0x42
 80069f4:	733b      	strb	r3, [r7, #12]
 80069f6:	23fe      	movs	r3, #254	; 0xfe
 80069f8:	737b      	strb	r3, [r7, #13]
 80069fa:	2300      	movs	r3, #0
 80069fc:	73bb      	strb	r3, [r7, #14]
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006a02:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <P2PS_STM_Init+0x134>)
 8006a04:	8818      	ldrh	r0, [r3, #0]
 8006a06:	463a      	mov	r2, r7
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <P2PS_STM_Init+0x13c>)
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	230a      	movs	r3, #10
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	2301      	movs	r3, #1
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2302      	movs	r3, #2
 8006a22:	2102      	movs	r1, #2
 8006a24:	f000 fcfc 	bl	8007420 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8006a28:	bf00      	nop
}
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	0800683d 	.word	0x0800683d
 8006a34:	200000cc 	.word	0x200000cc
 8006a38:	200000ce 	.word	0x200000ce
 8006a3c:	200000d0 	.word	0x200000d0

08006a40 <BLS_Init>:
 */

/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
__weak void BLS_Init( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return;
 8006a44:	bf00      	nop
}
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0
  return;
 8006a52:	bf00      	nop
}
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <DIS_Init>:
__weak void DIS_Init( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return;
 8006a60:	bf00      	nop
}
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  return;
 8006a6e:	bf00      	nop
}
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return;
 8006a7c:	bf00      	nop
}
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HRS_Init>:
__weak void HRS_Init( void )
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  return;
 8006a8a:	bf00      	nop
}
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HTS_Init>:
__weak void HTS_Init( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  return;
 8006a98:	bf00      	nop
}
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <IAS_Init>:
__weak void IAS_Init( void )
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  return;
 8006aa6:	bf00      	nop
}
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <LLS_Init>:
__weak void LLS_Init( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  return;
 8006ab4:	bf00      	nop
}
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <TPS_Init>:
__weak void TPS_Init( void )
{
 8006abe:	b480      	push	{r7}
 8006ac0:	af00      	add	r7, sp, #0
  return;
 8006ac2:	bf00      	nop
}
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return;
 8006ad0:	bf00      	nop
}
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <MESH_Init>:
__weak void MESH_Init( void )
{
 8006ada:	b480      	push	{r7}
 8006adc:	af00      	add	r7, sp, #0
  return;
 8006ade:	bf00      	nop
}
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return;
 8006aec:	bf00      	nop
}
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <SVCCTL_Init+0x4c>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006b02:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <SVCCTL_Init+0x50>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */

  BLS_Init();
 8006b08:	f7ff ff9a 	bl	8006a40 <BLS_Init>

  CRS_STM_Init();
 8006b0c:	f7ff ff9f 	bl	8006a4e <CRS_STM_Init>

  DIS_Init();
 8006b10:	f7ff ffa4 	bl	8006a5c <DIS_Init>

  EDS_STM_Init();
 8006b14:	f7ff ffa9 	bl	8006a6a <EDS_STM_Init>

  HIDS_Init();
 8006b18:	f7ff ffae 	bl	8006a78 <HIDS_Init>

  HRS_Init();
 8006b1c:	f7ff ffb3 	bl	8006a86 <HRS_Init>

  HTS_Init();
 8006b20:	f7ff ffb8 	bl	8006a94 <HTS_Init>

  IAS_Init();
 8006b24:	f7ff ffbd 	bl	8006aa2 <IAS_Init>

  LLS_Init();
 8006b28:	f7ff ffc2 	bl	8006ab0 <LLS_Init>

  TPS_Init();
 8006b2c:	f7ff ffc7 	bl	8006abe <TPS_Init>

  P2PS_STM_Init();
 8006b30:	f7ff fee6 	bl	8006900 <P2PS_STM_Init>

  OTAS_STM_Init();
 8006b34:	f7ff ffca 	bl	8006acc <OTAS_STM_Init>

  SVCCTL_InitCustomSvc();
 8006b38:	f7ff ffd6 	bl	8006ae8 <SVCCTL_InitCustomSvc>
  
  MESH_Init();
 8006b3c:	f7ff ffcd 	bl	8006ada <MESH_Init>

  return;
 8006b40:	bf00      	nop
}
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200000d4 	.word	0x200000d4
 8006b48:	200000f4 	.word	0x200000f4

08006b4c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <SVCCTL_RegisterSvcHandler+0x30>)
 8006b56:	7f1b      	ldrb	r3, [r3, #28]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <SVCCTL_RegisterSvcHandler+0x30>)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <SVCCTL_RegisterSvcHandler+0x30>)
 8006b64:	7f1b      	ldrb	r3, [r3, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <SVCCTL_RegisterSvcHandler+0x30>)
 8006b6c:	771a      	strb	r2, [r3, #28]

  return;
 8006b6e:	bf00      	nop
}
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	200000d4 	.word	0x200000d4

08006b80 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d000      	beq.n	8006b9c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8006b9a:	e025      	b.n	8006be8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb0:	d000      	beq.n	8006bb4 <SVCCTL_UserEvtRx+0x34>
          break;
 8006bb2:	e018      	b.n	8006be6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	757b      	strb	r3, [r7, #21]
 8006bb8:	e00d      	b.n	8006bd6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006bba:	7d7b      	ldrb	r3, [r7, #21]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <SVCCTL_UserEvtRx+0xa0>)
 8006bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006bd0:	7d7b      	ldrb	r3, [r7, #21]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	757b      	strb	r3, [r7, #21]
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <SVCCTL_UserEvtRx+0xa0>)
 8006bd8:	7f1b      	ldrb	r3, [r3, #28]
 8006bda:	7d7a      	ldrb	r2, [r7, #21]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d3ec      	bcc.n	8006bba <SVCCTL_UserEvtRx+0x3a>
          break;
 8006be0:	e000      	b.n	8006be4 <SVCCTL_UserEvtRx+0x64>
              break;
 8006be2:	bf00      	nop
          break;
 8006be4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8006be6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d009      	beq.n	8006c02 <SVCCTL_UserEvtRx+0x82>
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d00a      	beq.n	8006c08 <SVCCTL_UserEvtRx+0x88>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 ff6e 	bl	8008ad8 <SVCCTL_App_Notification>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75bb      	strb	r3, [r7, #22]
      break;
 8006c00:	e008      	b.n	8006c14 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75bb      	strb	r3, [r7, #22]
      break;
 8006c06:	e005      	b.n	8006c14 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	75bb      	strb	r3, [r7, #22]
      break;
 8006c0c:	e002      	b.n	8006c14 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	75bb      	strb	r3, [r7, #22]
      break;
 8006c12:	bf00      	nop
  }

  return (return_status);
 8006c14:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200000d4 	.word	0x200000d4

08006c24 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	2218      	movs	r2, #24
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 ff30 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c3c:	233f      	movs	r3, #63	; 0x3f
 8006c3e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006c40:	2381      	movs	r3, #129	; 0x81
 8006c42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 ffaa 	bl	8007bac <hci_send_req>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da01      	bge.n	8006c62 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006c5e:	23ff      	movs	r3, #255	; 0xff
 8006c60:	e005      	b.n	8006c6e <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	e000      	b.n	8006c6e <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8006c76:	b5b0      	push	{r4, r5, r7, lr}
 8006c78:	b0ce      	sub	sp, #312	; 0x138
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	4610      	mov	r0, r2
 8006c82:	4619      	mov	r1, r3
 8006c84:	1dfb      	adds	r3, r7, #7
 8006c86:	462a      	mov	r2, r5
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	1d3b      	adds	r3, r7, #4
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	1cbb      	adds	r3, r7, #2
 8006c92:	4602      	mov	r2, r0
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	1dbb      	adds	r3, r7, #6
 8006c98:	460a      	mov	r2, r1
 8006c9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006c9c:	f107 0310 	add.w	r3, r7, #16
 8006ca0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006ca4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006ca8:	3308      	adds	r3, #8
 8006caa:	f107 0210 	add.w	r2, r7, #16
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006cb4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006cb8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3309      	adds	r3, #9
 8006cc0:	f107 0210 	add.w	r2, r7, #16
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cca:	f107 030f 	add.w	r3, r7, #15
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8006cd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cdc:	1dfa      	adds	r2, r7, #7
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8006cec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cf0:	1d3a      	adds	r2, r7, #4
 8006cf2:	8812      	ldrh	r2, [r2, #0]
 8006cf4:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8006d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d06:	1cba      	adds	r2, r7, #2
 8006d08:	8812      	ldrh	r2, [r2, #0]
 8006d0a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d12:	3302      	adds	r3, #2
 8006d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8006d18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d1c:	1dba      	adds	r2, r7, #6
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d26:	3301      	adds	r3, #1
 8006d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8006d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d30:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006d34:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8006d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d44:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d48:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8006d54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d58:	3308      	adds	r3, #8
 8006d5a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006d5e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fe8a 	bl	8007a7c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006d68:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006d6c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d70:	4413      	add	r3, r2
 8006d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8006d76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d7a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d7e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8006d8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d94:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fe6f 	bl	8007a7c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006d9e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006da2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006da6:	4413      	add	r3, r2
 8006da8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8006dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006db4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dba:	3302      	adds	r3, #2
 8006dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8006dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006dc8:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dce:	3302      	adds	r3, #2
 8006dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006dd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dd8:	2218      	movs	r2, #24
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe5d 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006de2:	233f      	movs	r3, #63	; 0x3f
 8006de4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006de8:	2383      	movs	r3, #131	; 0x83
 8006dea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006dee:	f107 0310 	add.w	r3, r7, #16
 8006df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006dfe:	f107 030f 	add.w	r3, r7, #15
 8006e02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 feca 	bl	8007bac <hci_send_req>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da01      	bge.n	8006e22 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8006e1e:	23ff      	movs	r3, #255	; 0xff
 8006e20:	e009      	b.n	8006e36 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8006e22:	f107 030f 	add.w	r3, r7, #15
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8006e2c:	f107 030f 	add.w	r3, r7, #15
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	e000      	b.n	8006e36 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bdb0      	pop	{r4, r5, r7, pc}

08006e40 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b0cc      	sub	sp, #304	; 0x130
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4602      	mov	r2, r0
 8006e48:	1dfb      	adds	r3, r7, #7
 8006e4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006e4c:	f107 0310 	add.w	r3, r7, #16
 8006e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e54:	f107 030f 	add.w	r3, r7, #15
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8006e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e66:	1dfa      	adds	r2, r7, #7
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e7a:	2218      	movs	r2, #24
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fe0c 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e84:	233f      	movs	r3, #63	; 0x3f
 8006e86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006e8a:	2385      	movs	r3, #133	; 0x85
 8006e8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ea0:	f107 030f 	add.w	r3, r7, #15
 8006ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006eae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fe79 	bl	8007bac <hci_send_req>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da01      	bge.n	8006ec4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8006ec0:	23ff      	movs	r3, #255	; 0xff
 8006ec2:	e009      	b.n	8006ed8 <aci_gap_set_io_capability+0x98>
  if (status) 
 8006ec4:	f107 030f 	add.w	r3, r7, #15
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <aci_gap_set_io_capability+0x96>
  {
    return status;
 8006ece:	f107 030f 	add.w	r3, r7, #15
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	e000      	b.n	8006ed8 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8006ee2:	b5b0      	push	{r4, r5, r7, lr}
 8006ee4:	b0cc      	sub	sp, #304	; 0x130
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	4605      	mov	r5, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	1dfb      	adds	r3, r7, #7
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	1dbb      	adds	r3, r7, #6
 8006ef8:	4622      	mov	r2, r4
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	1d7b      	adds	r3, r7, #5
 8006efe:	4602      	mov	r2, r0
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	460a      	mov	r2, r1
 8006f06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f10:	f107 030f 	add.w	r3, r7, #15
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	1dfa      	adds	r2, r7, #7
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8006f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f36:	1dba      	adds	r2, r7, #6
 8006f38:	7812      	ldrb	r2, [r2, #0]
 8006f3a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f40:	3301      	adds	r3, #1
 8006f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	1d7a      	adds	r2, r7, #5
 8006f4c:	7812      	ldrb	r2, [r2, #0]
 8006f4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f54:	3301      	adds	r3, #1
 8006f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8006f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5e:	1d3a      	adds	r2, r7, #4
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006f76:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006f8a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f90:	3301      	adds	r3, #1
 8006f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8006f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006f9e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8006faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fae:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006fb2:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fba:	3304      	adds	r3, #4
 8006fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8006fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006fc8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fce:	3301      	adds	r3, #1
 8006fd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006fd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fd8:	2218      	movs	r2, #24
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fd5d 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fe2:	233f      	movs	r3, #63	; 0x3f
 8006fe4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006fe8:	2386      	movs	r3, #134	; 0x86
 8006fea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fee:	f107 0310 	add.w	r3, r7, #16
 8006ff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ffa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ffe:	f107 030f 	add.w	r3, r7, #15
 8007002:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007006:	2301      	movs	r3, #1
 8007008:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800700c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fdca 	bl	8007bac <hci_send_req>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	da01      	bge.n	8007022 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800701e:	23ff      	movs	r3, #255	; 0xff
 8007020:	e009      	b.n	8007036 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8007022:	f107 030f 	add.w	r3, r7, #15
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800702c:	f107 030f 	add.w	r3, r7, #15
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	e000      	b.n	8007036 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800703c:	46bd      	mov	sp, r7
 800703e:	bdb0      	pop	{r4, r5, r7, pc}

08007040 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b0cd      	sub	sp, #308	; 0x134
 8007044:	af00      	add	r7, sp, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	463a      	mov	r2, r7
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	1dfb      	adds	r3, r7, #7
 8007052:	4622      	mov	r2, r4
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	1dbb      	adds	r3, r7, #6
 8007058:	4602      	mov	r2, r0
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	1d7b      	adds	r3, r7, #5
 800705e:	460a      	mov	r2, r1
 8007060:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007062:	f107 0310 	add.w	r3, r7, #16
 8007066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800706a:	f107 0308 	add.w	r3, r7, #8
 800706e:	2207      	movs	r2, #7
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd12 	bl	8007a9c <Osal_MemSet>
  int index_input = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800707e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007082:	1dfa      	adds	r2, r7, #7
 8007084:	7812      	ldrb	r2, [r2, #0]
 8007086:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800708c:	3301      	adds	r3, #1
 800708e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8007092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007096:	1dba      	adds	r2, r7, #6
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a0:	3301      	adds	r3, #1
 80070a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	1d7a      	adds	r2, r7, #5
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80070b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b4:	3301      	adds	r3, #1
 80070b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80070ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070be:	2218      	movs	r2, #24
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fcea 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80070c8:	233f      	movs	r3, #63	; 0x3f
 80070ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80070ce:	238a      	movs	r3, #138	; 0x8a
 80070d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80070ec:	2307      	movs	r3, #7
 80070ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80070f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fd57 	bl	8007bac <hci_send_req>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	da01      	bge.n	8007108 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007104:	23ff      	movs	r3, #255	; 0xff
 8007106:	e021      	b.n	800714c <aci_gap_init+0x10c>
  if (resp.Status) 
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <aci_gap_init+0xda>
  {
    return resp.Status;
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	e018      	b.n	800714c <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800711a:	f107 0308 	add.w	r3, r7, #8
 800711e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007122:	b29a      	uxth	r2, r3
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800712a:	f107 0308 	add.w	r3, r7, #8
 800712e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007138:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007148:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}

08007156 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b0cc      	sub	sp, #304	; 0x130
 800715a:	af00      	add	r7, sp, #0
 800715c:	4602      	mov	r2, r0
 800715e:	463b      	mov	r3, r7
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	1dfb      	adds	r3, r7, #7
 8007164:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007166:	f107 0310 	add.w	r3, r7, #16
 800716a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800716e:	f107 030f 	add.w	r3, r7, #15
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800717c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007180:	1dfa      	adds	r2, r7, #7
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800718a:	3301      	adds	r3, #1
 800718c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	1c58      	adds	r0, r3, #1
 8007196:	1dfb      	adds	r3, r7, #7
 8007198:	781a      	ldrb	r2, [r3, #0]
 800719a:	463b      	mov	r3, r7
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	f000 fc6d 	bl	8007a7c <Osal_MemCpy>
  index_input += AdvDataLen;
 80071a2:	1dfb      	adds	r3, r7, #7
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80071aa:	4413      	add	r3, r2
 80071ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80071b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071b4:	2218      	movs	r2, #24
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fc6f 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80071be:	233f      	movs	r3, #63	; 0x3f
 80071c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80071c4:	238e      	movs	r3, #142	; 0x8e
 80071c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071ca:	f107 0310 	add.w	r3, r7, #16
 80071ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80071d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80071da:	f107 030f 	add.w	r3, r7, #15
 80071de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80071e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fcdc 	bl	8007bac <hci_send_req>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da01      	bge.n	80071fe <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80071fa:	23ff      	movs	r3, #255	; 0xff
 80071fc:	e009      	b.n	8007212 <aci_gap_update_adv_data+0xbc>
  if (status) 
 80071fe:	f107 030f 	add.w	r3, r7, #15
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <aci_gap_update_adv_data+0xba>
  {
    return status;
 8007208:	f107 030f 	add.w	r3, r7, #15
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	e000      	b.n	8007212 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	2218      	movs	r2, #24
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc34 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007234:	233f      	movs	r3, #63	; 0x3f
 8007236:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007238:	2392      	movs	r3, #146	; 0x92
 800723a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007240:	2301      	movs	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	2100      	movs	r1, #0
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fcae 	bl	8007bac <hci_send_req>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	da01      	bge.n	800725a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007256:	23ff      	movs	r3, #255	; 0xff
 8007258:	e005      	b.n	8007266 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	e000      	b.n	8007266 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b088      	sub	sp, #32
 8007272:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007278:	f107 0308 	add.w	r3, r7, #8
 800727c:	2218      	movs	r2, #24
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc0b 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007286:	233f      	movs	r3, #63	; 0x3f
 8007288:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800728a:	f240 1301 	movw	r3, #257	; 0x101
 800728e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007290:	1dfb      	adds	r3, r7, #7
 8007292:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007294:	2301      	movs	r3, #1
 8007296:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fc84 	bl	8007bac <hci_send_req>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da01      	bge.n	80072ae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80072aa:	23ff      	movs	r3, #255	; 0xff
 80072ac:	e005      	b.n	80072ba <aci_gatt_init+0x4c>
  if (status) 
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <aci_gatt_init+0x4a>
  {
    return status;
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	e000      	b.n	80072ba <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80072c2:	b590      	push	{r4, r7, lr}
 80072c4:	b0cf      	sub	sp, #316	; 0x13c
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	4604      	mov	r4, r0
 80072ca:	4638      	mov	r0, r7
 80072cc:	6001      	str	r1, [r0, #0]
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	1dfb      	adds	r3, r7, #7
 80072d4:	4622      	mov	r2, r4
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	1dbb      	adds	r3, r7, #6
 80072da:	4602      	mov	r2, r0
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	1d7b      	adds	r3, r7, #5
 80072e0:	460a      	mov	r2, r1
 80072e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80072ec:	1dfb      	adds	r3, r7, #7
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d007      	beq.n	8007304 <aci_gatt_add_service+0x42>
 80072f4:	1dfb      	adds	r3, r7, #7
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d101      	bne.n	8007300 <aci_gatt_add_service+0x3e>
 80072fc:	2311      	movs	r3, #17
 80072fe:	e002      	b.n	8007306 <aci_gatt_add_service+0x44>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <aci_gatt_add_service+0x44>
 8007304:	2303      	movs	r3, #3
 8007306:	f107 0210 	add.w	r2, r7, #16
 800730a:	4413      	add	r3, r2
 800730c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8007310:	f107 030c 	add.w	r3, r7, #12
 8007314:	2203      	movs	r2, #3
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fbbf 	bl	8007a9c <Osal_MemSet>
  int index_input = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8007324:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007328:	1dfa      	adds	r2, r7, #7
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800732e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007332:	3301      	adds	r3, #1
 8007334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8007338:	1dfb      	adds	r3, r7, #7
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d002      	beq.n	8007346 <aci_gatt_add_service+0x84>
 8007340:	2b02      	cmp	r3, #2
 8007342:	d004      	beq.n	800734e <aci_gatt_add_service+0x8c>
 8007344:	e007      	b.n	8007356 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8007346:	2302      	movs	r3, #2
 8007348:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800734c:	e005      	b.n	800735a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800734e:	2310      	movs	r3, #16
 8007350:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007354:	e001      	b.n	800735a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007356:	2347      	movs	r3, #71	; 0x47
 8007358:	e05d      	b.n	8007416 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800735a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800735e:	1c58      	adds	r0, r3, #1
 8007360:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007364:	463b      	mov	r3, r7
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	f000 fb88 	bl	8007a7c <Osal_MemCpy>
    index_input += size;
 800736c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007370:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007374:	4413      	add	r3, r2
 8007376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800737a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737e:	1dba      	adds	r2, r7, #6
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007388:	3301      	adds	r3, #1
 800738a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	1d7a      	adds	r2, r7, #5
 8007394:	7812      	ldrb	r2, [r2, #0]
 8007396:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 80073a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a6:	2218      	movs	r2, #24
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb76 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073b0:	233f      	movs	r3, #63	; 0x3f
 80073b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80073b6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80073ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073be:	f107 0310 	add.w	r3, r7, #16
 80073c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80073d6:	2303      	movs	r3, #3
 80073d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80073dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fbe2 	bl	8007bac <hci_send_req>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da01      	bge.n	80073f2 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80073ee:	23ff      	movs	r3, #255	; 0xff
 80073f0:	e011      	b.n	8007416 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	e008      	b.n	8007416 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800740c:	b29a      	uxth	r2, r3
 800740e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007412:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800741c:	46bd      	mov	sp, r7
 800741e:	bd90      	pop	{r4, r7, pc}

08007420 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b0d1      	sub	sp, #324	; 0x144
 8007424:	af00      	add	r7, sp, #0
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	f107 0108 	add.w	r1, r7, #8
 800742e:	600a      	str	r2, [r1, #0]
 8007430:	4619      	mov	r1, r3
 8007432:	f107 030e 	add.w	r3, r7, #14
 8007436:	4622      	mov	r2, r4
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	f107 030d 	add.w	r3, r7, #13
 800743e:	4602      	mov	r2, r0
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	1dbb      	adds	r3, r7, #6
 8007444:	460a      	mov	r2, r1
 8007446:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007448:	f107 0318 	add.w	r3, r7, #24
 800744c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007450:	f107 030d 	add.w	r3, r7, #13
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d008      	beq.n	800746c <aci_gatt_add_char+0x4c>
 800745a:	f107 030d 	add.w	r3, r7, #13
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d101      	bne.n	8007468 <aci_gatt_add_char+0x48>
 8007464:	2313      	movs	r3, #19
 8007466:	e002      	b.n	800746e <aci_gatt_add_char+0x4e>
 8007468:	2303      	movs	r3, #3
 800746a:	e000      	b.n	800746e <aci_gatt_add_char+0x4e>
 800746c:	2305      	movs	r3, #5
 800746e:	f107 0218 	add.w	r2, r7, #24
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	2203      	movs	r2, #3
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fb0b 	bl	8007a9c <Osal_MemSet>
  int index_input = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800748c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007490:	f107 020e 	add.w	r2, r7, #14
 8007494:	8812      	ldrh	r2, [r2, #0]
 8007496:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007498:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800749c:	3302      	adds	r3, #2
 800749e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80074a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80074a6:	f107 020d 	add.w	r2, r7, #13
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80074b8:	f107 030d 	add.w	r3, r7, #13
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d002      	beq.n	80074c8 <aci_gatt_add_char+0xa8>
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d004      	beq.n	80074d0 <aci_gatt_add_char+0xb0>
 80074c6:	e007      	b.n	80074d8 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80074c8:	2302      	movs	r3, #2
 80074ca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80074ce:	e005      	b.n	80074dc <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80074d6:	e001      	b.n	80074dc <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80074d8:	2347      	movs	r3, #71	; 0x47
 80074da:	e086      	b.n	80075ea <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80074dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80074e0:	1cd8      	adds	r0, r3, #3
 80074e2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	f000 fac6 	bl	8007a7c <Osal_MemCpy>
    index_input += size;
 80074f0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80074f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80074f8:	4413      	add	r3, r2
 80074fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80074fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007502:	1dba      	adds	r2, r7, #6
 8007504:	8812      	ldrh	r2, [r2, #0]
 8007506:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007508:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800750c:	3302      	adds	r3, #2
 800750e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8007512:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007516:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800751a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800751c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007520:	3301      	adds	r3, #1
 8007522:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8007526:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800752a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800752e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007530:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007534:	3301      	adds	r3, #1
 8007536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800753a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800753e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007542:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007548:	3301      	adds	r3, #1
 800754a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800754e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007552:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007556:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800755c:	3301      	adds	r3, #1
 800755e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8007562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007566:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800756a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800756c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007576:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800757a:	2218      	movs	r2, #24
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fa8c 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007584:	233f      	movs	r3, #63	; 0x3f
 8007586:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800758a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800758e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007592:	f107 0318 	add.w	r3, r7, #24
 8007596:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800759a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800759e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80075aa:	2303      	movs	r3, #3
 80075ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80075b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 faf8 	bl	8007bac <hci_send_req>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da01      	bge.n	80075c6 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80075c2:	23ff      	movs	r3, #255	; 0xff
 80075c4:	e011      	b.n	80075ea <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 80075c6:	f107 0314 	add.w	r3, r7, #20
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	e008      	b.n	80075ea <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80075d8:	f107 0314 	add.w	r3, r7, #20
 80075dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80075e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd90      	pop	{r4, r7, pc}

080075f4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80075f4:	b5b0      	push	{r4, r5, r7, lr}
 80075f6:	b0cc      	sub	sp, #304	; 0x130
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4605      	mov	r5, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	4610      	mov	r0, r2
 8007600:	4619      	mov	r1, r3
 8007602:	1dbb      	adds	r3, r7, #6
 8007604:	462a      	mov	r2, r5
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	4622      	mov	r2, r4
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	1cfb      	adds	r3, r7, #3
 8007610:	4602      	mov	r2, r0
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	1cbb      	adds	r3, r7, #2
 8007616:	460a      	mov	r2, r1
 8007618:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800761a:	f107 0310 	add.w	r3, r7, #16
 800761e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007622:	f107 030f 	add.w	r3, r7, #15
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	1dba      	adds	r2, r7, #6
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800763a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800763e:	3302      	adds	r3, #2
 8007640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	1d3a      	adds	r2, r7, #4
 800764a:	8812      	ldrh	r2, [r2, #0]
 800764c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800764e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007652:	3302      	adds	r3, #2
 8007654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 8007658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765c:	1cfa      	adds	r2, r7, #3
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007666:	3301      	adds	r3, #1
 8007668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	1cba      	adds	r2, r7, #2
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800767a:	3301      	adds	r3, #1
 800767c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8007680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007684:	1d98      	adds	r0, r3, #6
 8007686:	1cbb      	adds	r3, r7, #2
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007690:	f000 f9f4 	bl	8007a7c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007694:	1cbb      	adds	r3, r7, #2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800769c:	4413      	add	r3, r2
 800769e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80076a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a6:	2218      	movs	r2, #24
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f9f6 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80076b0:	233f      	movs	r3, #63	; 0x3f
 80076b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80076b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80076ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076ce:	f107 030f 	add.w	r3, r7, #15
 80076d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80076dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fa62 	bl	8007bac <hci_send_req>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da01      	bge.n	80076f2 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80076ee:	23ff      	movs	r3, #255	; 0xff
 80076f0:	e009      	b.n	8007706 <aci_gatt_update_char_value+0x112>
  if (status) 
 80076f2:	f107 030f 	add.w	r3, r7, #15
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <aci_gatt_update_char_value+0x110>
  {
    return status;
 80076fc:	f107 030f 	add.w	r3, r7, #15
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	e000      	b.n	8007706 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800770c:	46bd      	mov	sp, r7
 800770e:	bdb0      	pop	{r4, r5, r7, pc}

08007710 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b0cc      	sub	sp, #304	; 0x130
 8007714:	af00      	add	r7, sp, #0
 8007716:	463b      	mov	r3, r7
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	1dfb      	adds	r3, r7, #7
 800771c:	4602      	mov	r2, r0
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	1dbb      	adds	r3, r7, #6
 8007722:	460a      	mov	r2, r1
 8007724:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007726:	f107 0310 	add.w	r3, r7, #16
 800772a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800772e:	f107 030f 	add.w	r3, r7, #15
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800773c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007740:	1dfa      	adds	r2, r7, #7
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800774a:	3301      	adds	r3, #1
 800774c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	1dba      	adds	r2, r7, #6
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800775a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800775e:	3301      	adds	r3, #1
 8007760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	1c98      	adds	r0, r3, #2
 800776a:	1dbb      	adds	r3, r7, #6
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	463b      	mov	r3, r7
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	f000 f983 	bl	8007a7c <Osal_MemCpy>
  index_input += Length;
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800777e:	4413      	add	r3, r2
 8007780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007788:	2218      	movs	r2, #24
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f000 f985 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007792:	233f      	movs	r3, #63	; 0x3f
 8007794:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007798:	230c      	movs	r3, #12
 800779a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800779e:	f107 0310 	add.w	r3, r7, #16
 80077a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077ae:	f107 030f 	add.w	r3, r7, #15
 80077b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80077bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f9f2 	bl	8007bac <hci_send_req>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da01      	bge.n	80077d2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	e009      	b.n	80077e6 <aci_hal_write_config_data+0xd6>
  if (status) 
 80077d2:	f107 030f 	add.w	r3, r7, #15
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <aci_hal_write_config_data+0xd4>
  {
    return status;
 80077dc:	f107 030f 	add.w	r3, r7, #15
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	e000      	b.n	80077e6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b0cc      	sub	sp, #304	; 0x130
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4602      	mov	r2, r0
 80077f8:	1dfb      	adds	r3, r7, #7
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	1dbb      	adds	r3, r7, #6
 80077fe:	460a      	mov	r2, r1
 8007800:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007802:	f107 0310 	add.w	r3, r7, #16
 8007806:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800780a:	f107 030f 	add.w	r3, r7, #15
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 8007818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781c:	1dfa      	adds	r2, r7, #7
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007826:	3301      	adds	r3, #1
 8007828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	1dba      	adds	r2, r7, #6
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800783a:	3301      	adds	r3, #1
 800783c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007844:	2218      	movs	r2, #24
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f927 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 800784e:	233f      	movs	r3, #63	; 0x3f
 8007850:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007854:	230f      	movs	r3, #15
 8007856:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800785a:	f107 0310 	add.w	r3, r7, #16
 800785e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800786a:	f107 030f 	add.w	r3, r7, #15
 800786e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800787c:	2100      	movs	r1, #0
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f994 	bl	8007bac <hci_send_req>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	da01      	bge.n	800788e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800788a:	23ff      	movs	r3, #255	; 0xff
 800788c:	e009      	b.n	80078a2 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800788e:	f107 030f 	add.w	r3, r7, #15
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 8007898:	f107 030f 	add.w	r3, r7, #15
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	e000      	b.n	80078a2 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b0cc      	sub	sp, #304	; 0x130
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4602      	mov	r2, r0
 80078b4:	1dbb      	adds	r3, r7, #6
 80078b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80078b8:	f107 0310 	add.w	r3, r7, #16
 80078bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80078c0:	f107 030f 	add.w	r3, r7, #15
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 80078ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d2:	1dba      	adds	r2, r7, #6
 80078d4:	8812      	ldrh	r2, [r2, #0]
 80078d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80078d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078dc:	3302      	adds	r3, #2
 80078de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80078e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078e6:	2218      	movs	r2, #24
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f8d6 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80078f0:	233f      	movs	r3, #63	; 0x3f
 80078f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80078f6:	2318      	movs	r3, #24
 80078f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078fc:	f107 0310 	add.w	r3, r7, #16
 8007900:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007908:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800790c:	f107 030f 	add.w	r3, r7, #15
 8007910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007914:	2301      	movs	r3, #1
 8007916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800791a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f943 	bl	8007bac <hci_send_req>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	da01      	bge.n	8007930 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800792c:	23ff      	movs	r3, #255	; 0xff
 800792e:	e009      	b.n	8007944 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 8007930:	f107 030f 	add.w	r3, r7, #15
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800793a:	f107 030f 	add.w	r3, r7, #15
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	e000      	b.n	8007944 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	2218      	movs	r2, #24
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f000 f89b 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x03;
 8007966:	2303      	movs	r3, #3
 8007968:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800796a:	2303      	movs	r3, #3
 800796c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800796e:	1dfb      	adds	r3, r7, #7
 8007970:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f915 	bl	8007bac <hci_send_req>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	da01      	bge.n	800798c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007988:	23ff      	movs	r3, #255	; 0xff
 800798a:	e005      	b.n	8007998 <hci_reset+0x4a>
  if (status) 
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <hci_reset+0x48>
  {
    return status;
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	e000      	b.n	8007998 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b0cd      	sub	sp, #308	; 0x134
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	1dfb      	adds	r3, r7, #7
 80079ae:	4622      	mov	r2, r4
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	1dbb      	adds	r3, r7, #6
 80079b4:	4602      	mov	r2, r0
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	1d7b      	adds	r3, r7, #5
 80079ba:	460a      	mov	r2, r1
 80079bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80079be:	f107 0310 	add.w	r3, r7, #16
 80079c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079c6:	f107 030f 	add.w	r3, r7, #15
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 80079d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d8:	1dfa      	adds	r2, r7, #7
 80079da:	7812      	ldrb	r2, [r2, #0]
 80079dc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e2:	3301      	adds	r3, #1
 80079e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 80079e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ec:	1dba      	adds	r2, r7, #6
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80079f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079f6:	3301      	adds	r3, #1
 80079f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 80079fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a00:	1d7a      	adds	r2, r7, #5
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8007a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a14:	2218      	movs	r2, #24
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f83f 	bl	8007a9c <Osal_MemSet>
  rq.ogf = 0x08;
 8007a1e:	2308      	movs	r3, #8
 8007a20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007a24:	2331      	movs	r3, #49	; 0x31
 8007a26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a3a:	f107 030f 	add.w	r3, r7, #15
 8007a3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8007a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f8ac 	bl	8007bac <hci_send_req>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da01      	bge.n	8007a5e <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007a5a:	23ff      	movs	r3, #255	; 0xff
 8007a5c:	e009      	b.n	8007a72 <hci_le_set_default_phy+0xd2>
  if (status) 
 8007a5e:	f107 030f 	add.w	r3, r7, #15
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <hci_le_set_default_phy+0xd0>
  {
    return status;
 8007a68:	f107 030f 	add.w	r3, r7, #15
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	e000      	b.n	8007a72 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 fd99 	bl	80095c4 <memcpy>
 8007a92:	4603      	mov	r3, r0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 fd94 	bl	80095da <memset>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold a command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ac4:	f107 030c 	add.w	r3, r7, #12
 8007ac8:	61fb      	str	r3, [r7, #28]

 ((TL_CmdPacket_t *)pCmdPacket)->cmdserial.cmd.cmdcode = SHCI_OPCODE_C2_BLE_INIT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f042 0266 	orr.w	r2, r2, #102	; 0x66
 8007ad2:	725a      	strb	r2, [r3, #9]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f062 0203 	orn	r2, r2, #3
 8007ada:	729a      	strb	r2, [r3, #10]

 ((TL_CmdPacket_t *)pCmdPacket)->cmdserial.cmd.plen = sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ) ;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2221      	movs	r2, #33	; 0x21
 8007ae0:	72da      	strb	r2, [r3, #11]

  shci_send( (TL_CmdPacket_t *)pCmdPacket, p_rsp );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9e9 	bl	8007ebc <shci_send>

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	330b      	adds	r3, #11
 8007aee:	78db      	ldrb	r3, [r3, #3]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <hci_init+0x30>)
 8007b08:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007b0a:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <hci_init+0x34>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007b10:	4806      	ldr	r0, [pc, #24]	; (8007b2c <hci_init+0x34>)
 8007b12:	f000 fa81 	bl	8008018 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f8c4 	bl	8007ca8 <TlInit>

  return;
 8007b20:	bf00      	nop
}
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000414 	.word	0x20000414
 8007b2c:	200003ec 	.word	0x200003ec

08007b30 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b36:	e024      	b.n	8007b82 <hci_user_evt_proc+0x52>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007b38:	f107 030c 	add.w	r3, r7, #12
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4818      	ldr	r0, [pc, #96]	; (8007ba0 <hci_user_evt_proc+0x70>)
 8007b40:	f000 ff19 	bl	8008976 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b44:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <hci_user_evt_proc+0x74>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8007b4a:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <hci_user_evt_proc+0x78>)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <hci_user_evt_proc+0x36>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <hci_user_evt_proc+0x78>)
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	1d3a      	adds	r2, r7, #4
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007b60:	793a      	ldrb	r2, [r7, #4]
 8007b62:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <hci_user_evt_proc+0x74>)
 8007b64:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <hci_user_evt_proc+0x74>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <hci_user_evt_proc+0x48>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fc01 	bl	8008378 <TL_MM_EvtDone>
 8007b76:	e004      	b.n	8007b82 <hci_user_evt_proc+0x52>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <hci_user_evt_proc+0x70>)
 8007b7e:	f000 fe93 	bl	80088a8 <LST_insert_head>
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b82:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <hci_user_evt_proc+0x70>)
 8007b84:	f000 fe70 	bl	8008868 <LST_is_empty>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <hci_user_evt_proc+0x68>
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <hci_user_evt_proc+0x74>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1d0      	bne.n	8007b38 <hci_user_evt_proc+0x8>
    }
  }

  return;
 8007b96:	bf00      	nop
 8007b98:	bf00      	nop
}
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	200000fc 	.word	0x200000fc
 8007ba4:	2000010c 	.word	0x2000010c
 8007ba8:	200003ec 	.word	0x200003ec

08007bac <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, BOOL async)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  TL_CcEvt_t  *pcommand_complete_event;
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;

  Cmd_SetStatus(HCI_TL_CmdBusy);
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f000 f8d9 	bl	8007d70 <Cmd_SetStatus>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc8:	b21a      	sxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	029b      	lsls	r3, r3, #10
 8007bd0:	b21b      	sxth	r3, r3
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	83fb      	strh	r3, [r7, #30]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	8bfb      	ldrh	r3, [r7, #30]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 f89d 	bl	8007d24 <SendCmd>

  while(CmdGetStatus() == HCI_TL_CmdBusy)
 8007bea:	e050      	b.n	8007c8e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007bec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007bf0:	f001 f9ea 	bl	8008fc8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007bf4:	e045      	b.n	8007c82 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007bf6:	f107 030c 	add.w	r3, r7, #12
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4829      	ldr	r0, [pc, #164]	; (8007ca4 <hci_send_req+0xf8>)
 8007bfe:	f000 feba 	bl	8008976 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7a5b      	ldrb	r3, [r3, #9]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d115      	bne.n	8007c36 <hci_send_req+0x8a>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	330b      	adds	r3, #11
 8007c0e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	885b      	ldrh	r3, [r3, #2]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	8bfa      	ldrh	r2, [r7, #30]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d104      	bne.n	8007c26 <hci_send_req+0x7a>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d029      	beq.n	8007c82 <hci_send_req+0xd6>
        {
          Cmd_SetStatus(HCI_TL_CmdAvailable);
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f000 f89e 	bl	8007d70 <Cmd_SetStatus>
 8007c34:	e025      	b.n	8007c82 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	330b      	adds	r3, #11
 8007c3a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8bfa      	ldrh	r2, [r7, #30]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d114      	bne.n	8007c74 <hci_send_req+0xc8>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	7a9b      	ldrb	r3, [r3, #10]
 8007c4e:	3b03      	subs	r3, #3
 8007c50:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	bfa8      	it	ge
 8007c5c:	461a      	movge	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6918      	ldr	r0, [r3, #16]
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	1cd9      	adds	r1, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f001 fca8 	bl	80095c4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <hci_send_req+0xd6>
        {
          Cmd_SetStatus(HCI_TL_CmdAvailable);
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	f000 f877 	bl	8007d70 <Cmd_SetStatus>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c82:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <hci_send_req+0xf8>)
 8007c84:	f000 fdf0 	bl	8008868 <LST_is_empty>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0b3      	beq.n	8007bf6 <hci_send_req+0x4a>
  while(CmdGetStatus() == HCI_TL_CmdBusy)
 8007c8e:	f000 f83d 	bl	8007d0c <CmdGetStatus>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0a9      	beq.n	8007bec <hci_send_req+0x40>
        }
      }
    }
  }

  return 0;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000040c 	.word	0x2000040c

08007ca8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007cb0:	4810      	ldr	r0, [pc, #64]	; (8007cf4 <TlInit+0x4c>)
 8007cb2:	f000 fdc9 	bl	8008848 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007cb6:	4a10      	ldr	r2, [pc, #64]	; (8007cf8 <TlInit+0x50>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007cbc:	480f      	ldr	r0, [pc, #60]	; (8007cfc <TlInit+0x54>)
 8007cbe:	f000 fdc3 	bl	8008848 <LST_init_head>

  Cmd_SetStatus(HCI_TL_CmdAvailable);
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	f000 f854 	bl	8007d70 <Cmd_SetStatus>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <TlInit+0x58>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <TlInit+0x5c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <TlInit+0x44>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <TlInit+0x60>)
 8007cdc:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <TlInit+0x5c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f107 0208 	add.w	r2, r7, #8
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4798      	blx	r3
  }

  return;
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
}
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000040c 	.word	0x2000040c
 8007cf8:	20000108 	.word	0x20000108
 8007cfc:	200000fc 	.word	0x200000fc
 8007d00:	2000010c 	.word	0x2000010c
 8007d04:	200003ec 	.word	0x200003ec
 8007d08:	08007dc1 	.word	0x08007dc1

08007d0c <CmdGetStatus>:

static HCI_TL_CmdStatus_t CmdGetStatus(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  return HCICmdStatus;
 8007d10:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <CmdGetStatus+0x14>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b2db      	uxtb	r3, r3
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20000104 	.word	0x20000104

08007d24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	603a      	str	r2, [r7, #0]
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	460b      	mov	r3, r1
 8007d32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <SendCmd+0x44>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	88fa      	ldrh	r2, [r7, #6]
 8007d3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <SendCmd+0x44>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	797a      	ldrb	r2, [r7, #5]
 8007d44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <SendCmd+0x44>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	797a      	ldrb	r2, [r7, #5]
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fc37 	bl	80095c4 <memcpy>

  hciContext.io.Send(0,0);
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <SendCmd+0x48>)
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4798      	blx	r3

  return;
 8007d60:	bf00      	nop
}
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20000108 	.word	0x20000108
 8007d6c:	200003ec 	.word	0x200003ec

08007d70 <Cmd_SetStatus>:

static void Cmd_SetStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <Cmd_SetStatus+0x48>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007d88:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <Cmd_SetStatus+0x48>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4798      	blx	r3
    }
    HCICmdStatus = HCI_TL_CmdBusy;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <Cmd_SetStatus+0x4c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007d96:	e00b      	b.n	8007db0 <Cmd_SetStatus+0x40>
    HCICmdStatus = HCI_TL_CmdAvailable;
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <Cmd_SetStatus+0x4c>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <Cmd_SetStatus+0x48>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <Cmd_SetStatus+0x48>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2001      	movs	r0, #1
 8007dac:	4798      	blx	r3
  return;
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
}
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000414 	.word	0x20000414
 8007dbc:	20000104 	.word	0x20000104

08007dc0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7a5b      	ldrb	r3, [r3, #9]
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d003      	beq.n	8007dd8 <TlEvtReceived+0x18>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7a5b      	ldrb	r3, [r3, #9]
 8007dd4:	2b0e      	cmp	r3, #14
 8007dd6:	d107      	bne.n	8007de8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4809      	ldr	r0, [pc, #36]	; (8007e00 <TlEvtReceived+0x40>)
 8007ddc:	f000 fd88 	bl	80088f0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007de0:	2000      	movs	r0, #0
 8007de2:	f001 f8e6 	bl	8008fb2 <hci_cmd_resp_release>
 8007de6:	e006      	b.n	8007df6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4806      	ldr	r0, [pc, #24]	; (8007e04 <TlEvtReceived+0x44>)
 8007dec:	f000 fd80 	bl	80088f0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007df0:	4804      	ldr	r0, [pc, #16]	; (8007e04 <TlEvtReceived+0x44>)
 8007df2:	f001 f8d2 	bl	8008f9a <hci_notify_asynch_evt>
  }

  return;
 8007df6:	bf00      	nop
}
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	2000040c 	.word	0x2000040c
 8007e04:	200000fc 	.word	0x200000fc

08007e08 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <shci_init+0x30>)
 8007e18:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007e1a:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <shci_init+0x34>)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007e20:	4806      	ldr	r0, [pc, #24]	; (8007e3c <shci_init+0x34>)
 8007e22:	f000 f90d 	bl	8008040 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f87c 	bl	8007f28 <TlInit>

  return;
 8007e30:	bf00      	nop
}
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000438 	.word	0x20000438
 8007e3c:	20000418 	.word	0x20000418

08007e40 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievtbuffer;
  tSHCI_UserEvtRxParam UserEvtRxParam;

  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007e46:	e024      	b.n	8007e92 <shci_user_evt_proc+0x52>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4818      	ldr	r0, [pc, #96]	; (8007eb0 <shci_user_evt_proc+0x70>)
 8007e50:	f000 fd91 	bl	8008976 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007e54:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <shci_user_evt_proc+0x74>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 8007e5a:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <shci_user_evt_proc+0x78>)
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <shci_user_evt_proc+0x36>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <shci_user_evt_proc+0x78>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	1d3a      	adds	r2, r7, #4
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007e70:	793a      	ldrb	r2, [r7, #4]
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <shci_user_evt_proc+0x74>)
 8007e74:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <shci_user_evt_proc+0x74>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <shci_user_evt_proc+0x48>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fa79 	bl	8008378 <TL_MM_EvtDone>
 8007e86:	e004      	b.n	8007e92 <shci_user_evt_proc+0x52>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4808      	ldr	r0, [pc, #32]	; (8007eb0 <shci_user_evt_proc+0x70>)
 8007e8e:	f000 fd0b 	bl	80088a8 <LST_insert_head>
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007e92:	4807      	ldr	r0, [pc, #28]	; (8007eb0 <shci_user_evt_proc+0x70>)
 8007e94:	f000 fce8 	bl	8008868 <LST_is_empty>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <shci_user_evt_proc+0x68>
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <shci_user_evt_proc+0x74>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1d0      	bne.n	8007e48 <shci_user_evt_proc+0x8>
    }
  }

  return;
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
}
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000110 	.word	0x20000110
 8007eb4:	20000120 	.word	0x20000120
 8007eb8:	20000418 	.word	0x20000418

08007ebc <shci_send>:

  return;
}

void shci_send( TL_CmdPacket_t * p_cmd, TL_EvtPacket_t * p_rsp )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f000 f860 	bl	8007f8c <Cmd_SetStatus>

  memcpy(&(pCmdBuffer->cmdserial), &(p_cmd->cmdserial), p_cmd->cmdserial.cmd.plen + TL_CMD_HDR_SIZE );
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <shci_send+0x64>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f103 0008 	add.w	r0, r3, #8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f103 0108 	add.w	r1, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	7adb      	ldrb	r3, [r3, #11]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f001 fb6f 	bl	80095c4 <memcpy>

  shciContext.io.Send(0,0);
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <shci_send+0x68>)
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2100      	movs	r1, #0
 8007eec:	2000      	movs	r0, #0
 8007eee:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007ef0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007ef4:	f7f8 fb7b 	bl	80005ee <shci_cmd_resp_wait>

  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f103 0008 	add.w	r0, r3, #8
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <shci_send+0x64>)
 8007f00:	6819      	ldr	r1, [r3, #0]
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <shci_send+0x64>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	789b      	ldrb	r3, [r3, #2]
 8007f08:	3303      	adds	r3, #3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f001 fb5a 	bl	80095c4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007f10:	2001      	movs	r0, #1
 8007f12:	f000 f83b 	bl	8007f8c <Cmd_SetStatus>

  return;
 8007f16:	bf00      	nop
}
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	2000011c 	.word	0x2000011c
 8007f24:	20000418 	.word	0x20000418

08007f28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007f30:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <TlInit+0x4c>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007f36:	4810      	ldr	r0, [pc, #64]	; (8007f78 <TlInit+0x50>)
 8007f38:	f000 fc86 	bl	8008848 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f000 f825 	bl	8007f8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <TlInit+0x54>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007f48:	4b0d      	ldr	r3, [pc, #52]	; (8007f80 <TlInit+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00c      	beq.n	8007f6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007f54:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <TlInit+0x5c>)
 8007f56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <TlInit+0x60>)
 8007f5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007f5c:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <TlInit+0x58>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f107 020c 	add.w	r2, r7, #12
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
  }

  return;
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
}
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	2000011c 	.word	0x2000011c
 8007f78:	20000110 	.word	0x20000110
 8007f7c:	20000120 	.word	0x20000120
 8007f80:	20000418 	.word	0x20000418
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007ff5 	.word	0x08007ff5

08007f8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10b      	bne.n	8007fb4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <Cmd_SetStatus+0x48>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <Cmd_SetStatus+0x48>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <Cmd_SetStatus+0x4c>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007fb2:	e00b      	b.n	8007fcc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007fb4:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <Cmd_SetStatus+0x4c>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <Cmd_SetStatus+0x48>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007fc2:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <Cmd_SetStatus+0x48>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	4798      	blx	r3
  return;
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
}
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000438 	.word	0x20000438
 8007fd8:	20000118 	.word	0x20000118

08007fdc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7f8 faf7 	bl	80005d8 <shci_cmd_resp_release>

  return;
 8007fea:	bf00      	nop
}
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4805      	ldr	r0, [pc, #20]	; (8008014 <TlUserEvtReceived+0x20>)
 8008000:	f000 fc76 	bl	80088f0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008004:	4803      	ldr	r0, [pc, #12]	; (8008014 <TlUserEvtReceived+0x20>)
 8008006:	f7f8 fadb 	bl	80005c0 <shci_notify_asynch_evt>

  return;
 800800a:	bf00      	nop
}
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000110 	.word	0x20000110

08008018 <hci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a05      	ldr	r2, [pc, #20]	; (8008038 <hci_register_io_bus+0x20>)
 8008024:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a04      	ldr	r2, [pc, #16]	; (800803c <hci_register_io_bus+0x24>)
 800802a:	611a      	str	r2, [r3, #16]

  return;
 800802c:	bf00      	nop
}
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	080080cd 	.word	0x080080cd
 800803c:	08008135 	.word	0x08008135

08008040 <shci_register_io_bus>:

void shci_register_io_bus(tSHciIO* fops)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a05      	ldr	r2, [pc, #20]	; (8008060 <shci_register_io_bus+0x20>)
 800804c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <shci_register_io_bus+0x24>)
 8008052:	611a      	str	r2, [r3, #16]

  return;
 8008054:	bf00      	nop
}
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	080081a9 	.word	0x080081a9
 8008064:	080081fd 	.word	0x080081fd

08008068 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800806c:	f001 f99e 	bl	80093ac <HW_IPCC_Enable>

  return;
 8008070:	bf00      	nop
}
 8008072:	bd80      	pop	{r7, pc}

08008074 <TL_Init>:


void TL_Init( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <TL_Init+0x38>)
 800807a:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <TL_Init+0x3c>)
 800807c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <TL_Init+0x38>)
 8008080:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <TL_Init+0x40>)
 8008082:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008084:	4b09      	ldr	r3, [pc, #36]	; (80080ac <TL_Init+0x38>)
 8008086:	4a0c      	ldr	r2, [pc, #48]	; (80080b8 <TL_Init+0x44>)
 8008088:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <TL_Init+0x38>)
 800808c:	4a0b      	ldr	r2, [pc, #44]	; (80080bc <TL_Init+0x48>)
 800808e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008090:	4b06      	ldr	r3, [pc, #24]	; (80080ac <TL_Init+0x38>)
 8008092:	4a0b      	ldr	r2, [pc, #44]	; (80080c0 <TL_Init+0x4c>)
 8008094:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008096:	4b05      	ldr	r3, [pc, #20]	; (80080ac <TL_Init+0x38>)
 8008098:	4a0a      	ldr	r2, [pc, #40]	; (80080c4 <TL_Init+0x50>)
 800809a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <TL_Init+0x38>)
 800809e:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <TL_Init+0x54>)
 80080a0:	619a      	str	r2, [r3, #24]

  HW_IPCC_Init();
 80080a2:	f001 f989 	bl	80093b8 <HW_IPCC_Init>

  return;
 80080a6:	bf00      	nop
}
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20030000 	.word	0x20030000
 80080b0:	2003001c 	.word	0x2003001c
 80080b4:	2003003c 	.word	0x2003003c
 80080b8:	2003004c 	.word	0x2003004c
 80080bc:	20030058 	.word	0x20030058
 80080c0:	20030060 	.word	0x20030060
 80080c4:	2003007c 	.word	0x2003007c
 80080c8:	20030080 	.word	0x20030080

080080cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80080d8:	4811      	ldr	r0, [pc, #68]	; (8008120 <TL_BLE_Init+0x54>)
 80080da:	f000 fbb5 	bl	8008848 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <TL_BLE_Init+0x58>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <TL_BLE_Init+0x5c>)
 80080f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4a08      	ldr	r2, [pc, #32]	; (8008120 <TL_BLE_Init+0x54>)
 80080fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008100:	f001 f970 	bl	80093e4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a08      	ldr	r2, [pc, #32]	; (800812c <TL_BLE_Init+0x60>)
 800810a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a07      	ldr	r2, [pc, #28]	; (8008130 <TL_BLE_Init+0x64>)
 8008112:	6013      	str	r3, [r2, #0]

  return 0;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20030a18 	.word	0x20030a18
 8008124:	20030000 	.word	0x20030000
 8008128:	20030a08 	.word	0x20030a08
 800812c:	20000444 	.word	0x20000444
 8008130:	20000448 	.word	0x20000448

08008134 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <TL_BLE_SendCmd+0x24>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2201      	movs	r2, #1
 8008148:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800814a:	f001 f955 	bl	80093f8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20030000 	.word	0x20030000

0800815c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008162:	e009      	b.n	8008178 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4808      	ldr	r0, [pc, #32]	; (800818c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800816a:	f000 fc04 	bl	8008976 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800816e:	4b08      	ldr	r3, [pc, #32]	; (8008190 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008178:	4804      	ldr	r0, [pc, #16]	; (800818c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800817a:	f000 fb75 	bl	8008868 <LST_is_empty>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0ef      	beq.n	8008164 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008184:	bf00      	nop
}
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20030a18 	.word	0x20030a18
 8008190:	20000444 	.word	0x20000444

08008194 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4798      	blx	r3

  return;
 800819e:	bf00      	nop
}
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000448 	.word	0x20000448

080081a8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80081b4:	480d      	ldr	r0, [pc, #52]	; (80081ec <TL_SYS_Init+0x44>)
 80081b6:	f000 fb47 	bl	8008848 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80081ba:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <TL_SYS_Init+0x48>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a08      	ldr	r2, [pc, #32]	; (80081ec <TL_SYS_Init+0x44>)
 80081cc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80081ce:	f001 f935 	bl	800943c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <TL_SYS_Init+0x4c>)
 80081d8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4a06      	ldr	r2, [pc, #24]	; (80081f8 <TL_SYS_Init+0x50>)
 80081e0:	6013      	str	r3, [r2, #0]

  return 0;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20030a20 	.word	0x20030a20
 80081f0:	20030000 	.word	0x20030000
 80081f4:	2000044c 	.word	0x2000044c
 80081f8:	20000450 	.word	0x20000450

080081fc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <TL_SYS_SendCmd+0x24>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2210      	movs	r2, #16
 8008210:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8008212:	f001 f91d 	bl	8009450 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20030000 	.word	0x20030000

08008224 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a04      	ldr	r2, [pc, #16]	; (8008240 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800822e:	68d2      	ldr	r2, [r2, #12]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	4610      	mov	r0, r2
 8008234:	4798      	blx	r3

  return;
 8008236:	bf00      	nop
}
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	2000044c 	.word	0x2000044c
 8008240:	20030000 	.word	0x20030000

08008244 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800824a:	e009      	b.n	8008260 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800824c:	1d3b      	adds	r3, r7, #4
 800824e:	4619      	mov	r1, r3
 8008250:	4808      	ldr	r0, [pc, #32]	; (8008274 <HW_IPCC_SYS_EvtNot+0x30>)
 8008252:	f000 fb90 	bl	8008976 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <HW_IPCC_SYS_EvtNot+0x34>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008260:	4804      	ldr	r0, [pc, #16]	; (8008274 <HW_IPCC_SYS_EvtNot+0x30>)
 8008262:	f000 fb01 	bl	8008868 <LST_is_empty>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0ef      	beq.n	800824c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800826c:	bf00      	nop
}
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20030a20 	.word	0x20030a20
 8008278:	20000450 	.word	0x20000450

0800827c <HW_IPCC_OT_CmdEvtNot>:

  return;
}

void HW_IPCC_OT_CmdEvtNot(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f81c 	bl	80082c4 <TL_OT_CmdEvtReceived>

  return;
 800828c:	bf00      	nop
}
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20030000 	.word	0x20030000

08008294 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8008298:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <HW_IPCC_THREAD_EvtNot+0x14>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f81a 	bl	80082d8 <TL_THREAD_NotReceived>

  return;
 80082a4:	bf00      	nop
}
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20030000 	.word	0x20030000

080082ac <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 f818 	bl	80082ec <TL_THREAD_CliNotReceived>

  return;
 80082bc:	bf00      	nop
}
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20030000 	.word	0x20030000

080082c4 <TL_OT_CmdEvtReceived>:

__weak void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer  ){};
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TL_THREAD_NotReceived>:
__weak void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer ){};
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <TL_THREAD_CliNotReceived>:
__weak void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer ){};
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008308:	4817      	ldr	r0, [pc, #92]	; (8008368 <TL_MM_Init+0x68>)
 800830a:	f000 fa9d 	bl	8008848 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800830e:	4817      	ldr	r0, [pc, #92]	; (800836c <TL_MM_Init+0x6c>)
 8008310:	f000 fa9a 	bl	8008848 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <TL_MM_Init+0x70>)
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	4a16      	ldr	r2, [pc, #88]	; (8008374 <TL_MM_Init+0x74>)
 800831a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800831c:	4b15      	ldr	r3, [pc, #84]	; (8008374 <TL_MM_Init+0x74>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6892      	ldr	r2, [r2, #8]
 8008324:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <TL_MM_Init+0x74>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	68d2      	ldr	r2, [r2, #12]
 800832e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008330:	4b10      	ldr	r3, [pc, #64]	; (8008374 <TL_MM_Init+0x74>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a0c      	ldr	r2, [pc, #48]	; (8008368 <TL_MM_Init+0x68>)
 8008336:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008338:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <TL_MM_Init+0x74>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008342:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <TL_MM_Init+0x74>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6852      	ldr	r2, [r2, #4]
 800834a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800834c:	4b09      	ldr	r3, [pc, #36]	; (8008374 <TL_MM_Init+0x74>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6912      	ldr	r2, [r2, #16]
 8008354:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <TL_MM_Init+0x74>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6952      	ldr	r2, [r2, #20]
 800835e:	619a      	str	r2, [r3, #24]

  return;
 8008360:	bf00      	nop
}
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	2003008c 	.word	0x2003008c
 800836c:	2000043c 	.word	0x2000043c
 8008370:	20030000 	.word	0x20030000
 8008374:	20000454 	.word	0x20000454

08008378 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4805      	ldr	r0, [pc, #20]	; (8008398 <TL_MM_EvtDone+0x20>)
 8008384:	f000 fab4 	bl	80088f0 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008388:	4804      	ldr	r0, [pc, #16]	; (800839c <TL_MM_EvtDone+0x24>)
 800838a:	f001 f8ab 	bl	80094e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800838e:	bf00      	nop
}
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	2000043c 	.word	0x2000043c
 800839c:	080083a1 	.word	0x080083a1

080083a0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083a6:	e00c      	b.n	80083c2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	480a      	ldr	r0, [pc, #40]	; (80083d8 <SendFreeBuf+0x38>)
 80083ae:	f000 fae2 	bl	8008976 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <SendFreeBuf+0x3c>)
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fa97 	bl	80088f0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083c2:	4805      	ldr	r0, [pc, #20]	; (80083d8 <SendFreeBuf+0x38>)
 80083c4:	f000 fa50 	bl	8008868 <LST_is_empty>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0ec      	beq.n	80083a8 <SendFreeBuf+0x8>
  }

  return;
 80083ce:	bf00      	nop
}
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	2000043c 	.word	0x2000043c
 80083dc:	20030000 	.word	0x20030000

080083e0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <TL_TRACES_Init+0x1c>)
 80083e6:	f000 fa2f 	bl	8008848 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80083ea:	4b05      	ldr	r3, [pc, #20]	; (8008400 <TL_TRACES_Init+0x20>)
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	4a03      	ldr	r2, [pc, #12]	; (80083fc <TL_TRACES_Init+0x1c>)
 80083f0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80083f2:	f001 f8ad 	bl	8009550 <HW_IPCC_TRACES_Init>

  return;
 80083f6:	bf00      	nop
}
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20030094 	.word	0x20030094
 8008400:	20030000 	.word	0x20030000

08008404 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800840a:	e008      	b.n	800841e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800840c:	1d3b      	adds	r3, r7, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4808      	ldr	r0, [pc, #32]	; (8008434 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008412:	f000 fab0 	bl	8008976 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f80d 	bl	8008438 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008420:	f000 fa22 	bl	8008868 <LST_is_empty>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f0      	beq.n	800840c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800842a:	bf00      	nop
}
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20030094 	.word	0x20030094

08008438 <TL_TRACES_EvtReceived>:

__weak void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <LPM_SetConf>:
__weak void LPM_EnterOffMode(void);
__weak void LPM_ExitOffMode(void);

/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <LPM_SetConf+0x24>)
 800845a:	701a      	strb	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	785a      	ldrb	r2, [r3, #1]
 8008460:	4b03      	ldr	r3, [pc, #12]	; (8008470 <LPM_SetConf+0x24>)
 8008462:	705a      	strb	r2, [r3, #1]

  return;
 8008464:	bf00      	nop
}
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	2000045c 	.word	0x2000045c

08008474 <LPM_SetOffMode>:

void LPM_SetOffMode(uint32_t id, LPM_OffModeSel_t mode)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	613b      	str	r3, [r7, #16]
  return(result);
 8008486:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800848a:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <LPM_SetOffMode+0x2e>
  {
    LowPowerModeSel &= (~id);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	43da      	mvns	r2, r3
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <LPM_SetOffMode+0x50>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4013      	ands	r3, r2
 800849c:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <LPM_SetOffMode+0x50>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e005      	b.n	80084ae <LPM_SetOffMode+0x3a>
  }
  else
  {
    LowPowerModeSel |= id;
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <LPM_SetOffMode+0x50>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <LPM_SetOffMode+0x50>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
 80084b8:	bf00      	nop
}
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	20000458 	.word	0x20000458

080084c8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <OTP_Read+0x48>)
 80084d4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80084d6:	e002      	b.n	80084de <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3b08      	subs	r3, #8
 80084dc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	79fa      	ldrb	r2, [r7, #7]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d003      	beq.n	80084f2 <OTP_Read+0x2a>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4a09      	ldr	r2, [pc, #36]	; (8008514 <OTP_Read+0x4c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d1f2      	bne.n	80084d8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3307      	adds	r3, #7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d001      	beq.n	8008502 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008502:	68fb      	ldr	r3, [r7, #12]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	1fff73f8 	.word	0x1fff73f8
 8008514:	1fff7000 	.word	0x1fff7000

08008518 <SCH_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void SCH_Run( uint32_t mask_bm )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08a      	sub	sp, #40	; 0x28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008520:	f3ef 8310 	mrs	r3, PRIMASK
 8008524:	613b      	str	r3, [r7, #16]
  return(result);
 8008526:	693b      	ldr	r3, [r7, #16]
  uint32_t bit_nbr;
  uint32_t counter;
  uint32_t current_task_set;
  uint32_t super_mask_backup;

  BACKUP_PRIMASK();
 8008528:	623b      	str	r3, [r7, #32]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by SCH_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800852a:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <SCH_Run+0x17c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	61fb      	str	r3, [r7, #28]
  SuperMask &= mask_bm;
 8008530:	4b58      	ldr	r3, [pc, #352]	; (8008694 <SCH_Run+0x17c>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4013      	ands	r3, r2
 8008538:	4a56      	ldr	r2, [pc, #344]	; (8008694 <SCH_Run+0x17c>)
 800853a:	6013      	str	r3, [r2, #0]
  /**
   * There are two independent mask to check:
   * TaskMask that comes from SCH_PauseTask() / SCH_ResumeTask
   * SuperMask that comes from SCH_Run
   */
  while(TaskSet & TaskMask & SuperMask)
 800853c:	e07e      	b.n	800863c <SCH_Run+0x124>
  {
    counter = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from SCH_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8008542:	e002      	b.n	800854a <SCH_Run+0x32>
    {
      counter++;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	3301      	adds	r3, #1
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800854a:	4a53      	ldr	r2, [pc, #332]	; (8008698 <SCH_Run+0x180>)
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008552:	4b52      	ldr	r3, [pc, #328]	; (800869c <SCH_Run+0x184>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	401a      	ands	r2, r3
 8008558:	4b4e      	ldr	r3, [pc, #312]	; (8008694 <SCH_Run+0x17c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4013      	ands	r3, r2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0f0      	beq.n	8008544 <SCH_Run+0x2c>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008562:	4a4d      	ldr	r2, [pc, #308]	; (8008698 <SCH_Run+0x180>)
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800856a:	4b4c      	ldr	r3, [pc, #304]	; (800869c <SCH_Run+0x184>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	401a      	ands	r2, r3
 8008570:	4b48      	ldr	r3, [pc, #288]	; (8008694 <SCH_Run+0x17c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4013      	ands	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8008578:	4a47      	ldr	r2, [pc, #284]	; (8008698 <SCH_Run+0x180>)
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4413      	add	r3, r2
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	4013      	ands	r3, r2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <SCH_Run+0x80>
    {
      TaskPrio[counter].round_robin = (~0);
 800858a:	4a43      	ldr	r2, [pc, #268]	; (8008698 <SCH_Run+0x180>)
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	f04f 32ff 	mov.w	r2, #4294967295
 8008596:	605a      	str	r2, [r3, #4]
    }

    /** read the flag index of the task to be executed */
    bit_nbr = COUNT_LEAD_ZERO(current_task_set & TaskPrio[counter].round_robin);
 8008598:	4a3f      	ldr	r2, [pc, #252]	; (8008698 <SCH_Run+0x180>)
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	4413      	add	r3, r2
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	fab3 f383 	clz	r3, r3
 80085aa:	617b      	str	r3, [r7, #20]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (31 - bit_nbr));
 80085ac:	4a3a      	ldr	r2, [pc, #232]	; (8008698 <SCH_Run+0x180>)
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4413      	add	r3, r2
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	f1c2 021f 	rsb	r2, r2, #31
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f202 	lsl.w	r2, r1, r2
 80085c2:	43d2      	mvns	r2, r2
 80085c4:	401a      	ands	r2, r3
 80085c6:	4934      	ldr	r1, [pc, #208]	; (8008698 <SCH_Run+0x180>)
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	440b      	add	r3, r1
 80085ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80085d0:	b672      	cpsid	i

    DISABLE_IRQ();
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (31 - bit_nbr));
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f1c3 031f 	rsb	r3, r3, #31
 80085d8:	2201      	movs	r2, #1
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	43db      	mvns	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	4b2f      	ldr	r3, [pc, #188]	; (80086a0 <SCH_Run+0x188>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4013      	ands	r3, r2
 80085e8:	4a2d      	ldr	r2, [pc, #180]	; (80086a0 <SCH_Run+0x188>)
 80085ea:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = SCH_CONF_PRIO_NBR; counter; counter--)
 80085ec:	2301      	movs	r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
 80085f0:	e015      	b.n	800861e <SCH_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (31 - bit_nbr));
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4a28      	ldr	r2, [pc, #160]	; (8008698 <SCH_Run+0x180>)
 80085f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f1c3 031f 	rsb	r3, r3, #31
 8008602:	2101      	movs	r1, #1
 8008604:	fa01 f303 	lsl.w	r3, r1, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	3b01      	subs	r3, #1
 8008610:	400a      	ands	r2, r1
 8008612:	4921      	ldr	r1, [pc, #132]	; (8008698 <SCH_Run+0x180>)
 8008614:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = SCH_CONF_PRIO_NBR; counter; counter--)
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	3b01      	subs	r3, #1
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <SCH_Run+0xda>
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f383 8810 	msr	PRIMASK, r3
    }
    RESTORE_PRIMASK();
    /** Execute the task */
    TaskCb[31 - bit_nbr]();
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f1c3 031f 	rsb	r3, r3, #31
 8008634:	4a1b      	ldr	r2, [pc, #108]	; (80086a4 <SCH_Run+0x18c>)
 8008636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863a:	4798      	blx	r3
  while(TaskSet & TaskMask & SuperMask)
 800863c:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <SCH_Run+0x188>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	4b16      	ldr	r3, [pc, #88]	; (800869c <SCH_Run+0x184>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	401a      	ands	r2, r3
 8008646:	4b13      	ldr	r3, [pc, #76]	; (8008694 <SCH_Run+0x17c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	f47f af76 	bne.w	800853e <SCH_Run+0x26>
  __ASM volatile ("cpsid i" : : : "memory");
 8008652:	b672      	cpsid	i
  }

  DISABLE_IRQ();
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8008654:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <SCH_Run+0x188>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <SCH_Run+0x184>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	401a      	ands	r2, r3
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <SCH_Run+0x17c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <SCH_Run+0x162>
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <SCH_Run+0x190>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <SCH_Run+0x194>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4013      	ands	r3, r2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <SCH_Run+0x162>
  {
    SCH_Idle();
 8008676:	f7f7 ff90 	bl	800059a <SCH_Idle>
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();

  /** restore the mask from SCH_Run() */
  SuperMask = super_mask_backup;
 8008684:	4a03      	ldr	r2, [pc, #12]	; (8008694 <SCH_Run+0x17c>)
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	6013      	str	r3, [r2, #0]

  return;
 800868a:	bf00      	nop
}
 800868c:	3728      	adds	r7, #40	; 0x28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	2000001c 	.word	0x2000001c
 8008698:	2000047c 	.word	0x2000047c
 800869c:	20000018 	.word	0x20000018
 80086a0:	20000460 	.word	0x20000460
 80086a4:	2000046c 	.word	0x2000046c
 80086a8:	20000464 	.word	0x20000464
 80086ac:	20000468 	.word	0x20000468

080086b0 <SCH_RegTask>:

/**
 *  this function can be nested
 */
void SCH_RegTask( uint32_t task_id , void (*task)( void ) )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80086ba:	f3ef 8310 	mrs	r3, PRIMASK
 80086be:	60fb      	str	r3, [r7, #12]
  return(result);
 80086c0:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80086c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086c4:	b672      	cpsid	i

  DISABLE_IRQ();

  TaskCb[task_id] = task;
 80086c6:	4908      	ldr	r1, [pc, #32]	; (80086e8 <SCH_RegTask+0x38>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  return;
 80086da:	bf00      	nop
}
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	2000046c 	.word	0x2000046c

080086ec <SCH_SetTask>:

/**
 *  this function can be nested
 */
void SCH_SetTask( uint32_t task_id_bm , uint32_t task_prio )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80086f6:	f3ef 8310 	mrs	r3, PRIMASK
 80086fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80086fc:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80086fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008700:	b672      	cpsid	i

  DISABLE_IRQ();

  TaskSet |= task_id_bm;
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <SCH_SetTask+0x4c>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4313      	orrs	r3, r2
 800870a:	4a0b      	ldr	r2, [pc, #44]	; (8008738 <SCH_SetTask+0x4c>)
 800870c:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800870e:	4a0b      	ldr	r2, [pc, #44]	; (800873c <SCH_SetTask+0x50>)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	431a      	orrs	r2, r3
 800871a:	4908      	ldr	r1, [pc, #32]	; (800873c <SCH_SetTask+0x50>)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  return;
 800872c:	bf00      	nop
}
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20000460 	.word	0x20000460
 800873c:	2000047c 	.word	0x2000047c

08008740 <SCH_PauseTask>:

/**
 *  this function can be nested
 */
void SCH_PauseTask( uint32_t task_id_bm )
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008748:	f3ef 8310 	mrs	r3, PRIMASK
 800874c:	60fb      	str	r3, [r7, #12]
  return(result);
 800874e:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 8008750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008752:	b672      	cpsid	i

  DISABLE_IRQ();

  TaskMask &= (~task_id_bm);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	43da      	mvns	r2, r3
 8008758:	4b07      	ldr	r3, [pc, #28]	; (8008778 <SCH_PauseTask+0x38>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4013      	ands	r3, r2
 800875e:	4a06      	ldr	r2, [pc, #24]	; (8008778 <SCH_PauseTask+0x38>)
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  return;
 800876c:	bf00      	nop
}
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	20000018 	.word	0x20000018

0800877c <SCH_ResumeTask>:

/**
 *  this function can be nested
 */
void SCH_ResumeTask( uint32_t task_id_bm )
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008784:	f3ef 8310 	mrs	r3, PRIMASK
 8008788:	60fb      	str	r3, [r7, #12]
  return(result);
 800878a:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 800878c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800878e:	b672      	cpsid	i

  DISABLE_IRQ();

  TaskMask |= task_id_bm;
 8008790:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <SCH_ResumeTask+0x38>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4313      	orrs	r3, r2
 8008798:	4a06      	ldr	r2, [pc, #24]	; (80087b4 <SCH_ResumeTask+0x38>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  return;
 80087a6:	bf00      	nop
}
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000018 	.word	0x20000018

080087b8 <SCH_SetEvt>:

/**
 *  this function can be nested
 */
void SCH_SetEvt( uint32_t evt_id_bm )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80087c0:	f3ef 8310 	mrs	r3, PRIMASK
 80087c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087c6:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80087c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087ca:	b672      	cpsid	i

  DISABLE_IRQ();

  EvtSet |= evt_id_bm;
 80087cc:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <SCH_SetEvt+0x38>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <SCH_SetEvt+0x38>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  return;
 80087e2:	bf00      	nop
}
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20000464 	.word	0x20000464

080087f4 <SCH_WaitEvt>:

/**
 *  this function can be nested
 */
void SCH_WaitEvt( uint32_t evt_id_bm )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t event_waited_id_backup;

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <SCH_WaitEvt+0x4c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
  EvtWaited = evt_id_bm;
 8008802:	4a0f      	ldr	r2, [pc, #60]	; (8008840 <SCH_WaitEvt+0x4c>)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8008808:	e004      	b.n	8008814 <SCH_WaitEvt+0x20>
  {
    SCH_EvtIdle(EvtWaited);
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <SCH_WaitEvt+0x4c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7f7 feca 	bl	80005a8 <SCH_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8008814:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <SCH_WaitEvt+0x50>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <SCH_WaitEvt+0x4c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0f3      	beq.n	800880a <SCH_WaitEvt+0x16>
  }
  EvtSet &= (~EvtWaited);
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <SCH_WaitEvt+0x4c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	43da      	mvns	r2, r3
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <SCH_WaitEvt+0x50>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4013      	ands	r3, r2
 800882e:	4a05      	ldr	r2, [pc, #20]	; (8008844 <SCH_WaitEvt+0x50>)
 8008830:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008832:	4a03      	ldr	r2, [pc, #12]	; (8008840 <SCH_WaitEvt+0x4c>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6013      	str	r3, [r2, #0]

  return;
 8008838:	bf00      	nop
}
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000468 	.word	0x20000468
 8008844:	20000464 	.word	0x20000464

08008848 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	605a      	str	r2, [r3, #4]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	60fb      	str	r3, [r7, #12]
  return(result);
 8008876:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800887a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d102      	bne.n	800888c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
 800888a:	e001      	b.n	8008890 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
}
 800889c:	4618      	mov	r0, r3
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80088b2:	f3ef 8310 	mrs	r3, PRIMASK
 80088b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80088b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088bc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80088fa:	f3ef 8310 	mrs	r3, PRIMASK
 80088fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008900:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008904:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008940:	f3ef 8310 	mrs	r3, PRIMASK
 8008944:	60fb      	str	r3, [r7, #12]
  return(result);
 8008946:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800894a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6852      	ldr	r2, [r2, #4]
 800895e:	605a      	str	r2, [r3, #4]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008980:	f3ef 8310 	mrs	r3, PRIMASK
 8008984:	60fb      	str	r3, [r7, #12]
  return(result);
 8008986:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800898a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff ffcd 	bl	8008938 <LST_remove_node>
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089a8:	bf00      	nop
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <LL_FLASH_GetUDN+0x14>)
 80089b6:	681b      	ldr	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	1fff7580 	.word	0x1fff7580

080089c8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x05
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x05)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80089cc:	4b03      	ldr	r3, [pc, #12]	; (80089dc <LL_FLASH_GetDeviceID+0x14>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	b2db      	uxtb	r3, r3
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	1fff7584 	.word	0x1fff7584

080089e0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80089e4:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <LL_FLASH_GetSTCompanyID+0x14>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	0a1b      	lsrs	r3, r3, #8
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	1fff7584 	.word	0x1fff7584

080089f8 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80089f8:	b5b0      	push	{r4, r5, r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	/* Initialize the LCD */
	LCD_Init();
 80089fe:	f7f7 fe01 	bl	8000604 <LCD_Init>
	/* Display the application LCD */
	LCD_BLE_PrintLogo();
 8008a02:	f7f7 fe25 	bl	8000650 <LCD_BLE_PrintLogo>
	/* Display the local device's name */
	LCD_BLE_PrintLocalName(local_name);
 8008a06:	4829      	ldr	r0, [pc, #164]	; (8008aac <APP_BLE_Init+0xb4>)
 8008a08:	f7f7 fe02 	bl	8000610 <LCD_BLE_PrintLocalName>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008a0c:	4b28      	ldr	r3, [pc, #160]	; (8008ab0 <APP_BLE_Init+0xb8>)
 8008a0e:	463c      	mov	r4, r7
 8008a10:	461d      	mov	r5, r3
 8008a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a1e:	c407      	stmia	r4!, {r0, r1, r2}
 8008a20:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8008a22:	f000 f8eb 	bl	8008bfc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  LPM_SetOffMode(1 << CFG_LPM_APP_BLE, LPM_OffMode_Dis);
 8008a26:	2100      	movs	r1, #0
 8008a28:	2002      	movs	r0, #2
 8008a2a:	f7ff fd23 	bl	8008474 <LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  SCH_RegTask(CFG_TASK_HCI_ASYNCH_EVT_ID, hci_user_evt_proc);
 8008a2e:	4921      	ldr	r1, [pc, #132]	; (8008ab4 <APP_BLE_Init+0xbc>)
 8008a30:	2002      	movs	r0, #2
 8008a32:	f7ff fe3d 	bl	80086b0 <SCH_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8008a36:	463b      	mov	r3, r7
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff f83f 	bl	8007abc <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008a3e:	f000 f8f3 	bl	8008c28 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008a42:	f7fe f859 	bl	8006af8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008a46:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <APP_BLE_Init+0xc0>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008a4e:	4b1a      	ldr	r3, [pc, #104]	; (8008ab8 <APP_BLE_Init+0xc0>)
 8008a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a54:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  SCH_RegTask(CFG_TASK_ADV_CANCEL_ID, Adv_Cancel);
 8008a56:	4919      	ldr	r1, [pc, #100]	; (8008abc <APP_BLE_Init+0xc4>)
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f7ff fe29 	bl	80086b0 <SCH_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8008a5e:	2006      	movs	r0, #6
 8008a60:	f7fe ff24 	bl	80078ac <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8008a64:	f000 fb1e 	bl	80090a4 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8008a68:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <APP_BLE_Init+0xc8>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	4915      	ldr	r1, [pc, #84]	; (8008ac4 <APP_BLE_Init+0xcc>)
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f7f8 fb24 	bl	80010bc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8008a74:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <APP_BLE_Init+0xd0>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	4914      	ldr	r1, [pc, #80]	; (8008acc <APP_BLE_Init+0xd4>)
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f7f8 fb1e 	bl	80010bc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008a80:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <APP_BLE_Init+0xc0>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008a88:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <APP_BLE_Init+0xc0>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8008a90:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <APP_BLE_Init+0xd8>)
 8008a92:	2280      	movs	r2, #128	; 0x80
 8008a94:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <APP_BLE_Init+0xdc>)
 8008a98:	22a0      	movs	r2, #160	; 0xa0
 8008a9a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	f000 f99d 	bl	8008ddc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8008aa2:	bf00      	nop
}
 8008aa4:	3730      	adds	r7, #48	; 0x30
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	0800a51c 	.word	0x0800a51c
 8008ab0:	08009640 	.word	0x08009640
 8008ab4:	08007b31 	.word	0x08007b31
 8008ab8:	20000124 	.word	0x20000124
 8008abc:	08008f49 	.word	0x08008f49
 8008ac0:	08008f7d 	.word	0x08008f7d
 8008ac4:	200001b5 	.word	0x200001b5
 8008ac8:	08008f8d 	.word	0x08008f8d
 8008acc:	200001b6 	.word	0x200001b6
 8008ad0:	200001b8 	.word	0x200001b8
 8008ad4:	200001ba 	.word	0x200001ba

08008ad8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	61fb      	str	r3, [r7, #28]

  switch (event_pckt->evt)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b3e      	cmp	r3, #62	; 0x3e
 8008aec:	d024      	beq.n	8008b38 <SVCCTL_App_Notification+0x60>
 8008aee:	2bff      	cmp	r3, #255	; 0xff
 8008af0:	d056      	beq.n	8008ba0 <SVCCTL_App_Notification+0xc8>
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d000      	beq.n	8008af8 <SVCCTL_App_Notification+0x20>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 8008af6:	e075      	b.n	8008be4 <SVCCTL_App_Notification+0x10c>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3302      	adds	r3, #2
 8008afc:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	4b3a      	ldr	r3, [pc, #232]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d106      	bne.n	8008b1c <SVCCTL_App_Notification+0x44>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008b0e:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008b14:	4b36      	ldr	r3, [pc, #216]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f000 f95d 	bl	8008ddc <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8008b22:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008b28:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b2a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008b2c:	4b31      	ldr	r3, [pc, #196]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b2e:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 8008b30:	4830      	ldr	r0, [pc, #192]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b32:	f000 faa3 	bl	800907c <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8008b36:	e055      	b.n	8008be4 <SVCCTL_App_Notification+0x10c>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	617b      	str	r3, [r7, #20]
      switch (meta_evt->subevent)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d002      	beq.n	8008b4c <SVCCTL_App_Notification+0x74>
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d028      	beq.n	8008b9c <SVCCTL_App_Notification+0xc4>
          break;
 8008b4a:	e028      	b.n	8008b9e <SVCCTL_App_Notification+0xc6>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008b52:	4b27      	ldr	r3, [pc, #156]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b54:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f8 fb25 	bl	80011a8 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008b5e:	4b24      	ldr	r3, [pc, #144]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b60:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d104      	bne.n	8008b72 <SVCCTL_App_Notification+0x9a>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008b68:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b6a:	2206      	movs	r2, #6
 8008b6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8008b70:	e003      	b.n	8008b7a <SVCCTL_App_Notification+0xa2>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008b72:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b74:	2205      	movs	r2, #5
 8008b76:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008b80:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 8008b82:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b84:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8008b86:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008b8c:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <SVCCTL_App_Notification+0x118>)
 8008b8e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008b90:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b92:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8008b94:	4817      	ldr	r0, [pc, #92]	; (8008bf4 <SVCCTL_App_Notification+0x11c>)
 8008b96:	f000 fa71 	bl	800907c <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8008b9a:	e000      	b.n	8008b9e <SVCCTL_App_Notification+0xc6>
          break;
 8008b9c:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8008b9e:	e021      	b.n	8008be4 <SVCCTL_App_Notification+0x10c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	3302      	adds	r3, #2
 8008ba4:	61bb      	str	r3, [r7, #24]
      switch (blue_evt->ecode)
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f240 4207 	movw	r2, #1031	; 0x407
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d013      	beq.n	8008bdc <SVCCTL_App_Notification+0x104>
 8008bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bb8:	d012      	beq.n	8008be0 <SVCCTL_App_Notification+0x108>
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d000      	beq.n	8008bc0 <SVCCTL_App_Notification+0xe8>
      break; /* EVT_VENDOR */
 8008bbe:	e010      	b.n	8008be2 <SVCCTL_App_Notification+0x10a>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	480c      	ldr	r0, [pc, #48]	; (8008bf8 <SVCCTL_App_Notification+0x120>)
 8008bc6:	f7f9 ffc7 	bl	8002b58 <HAL_GPIO_WritePin>
        HAL_Delay(5);
 8008bca:	2005      	movs	r0, #5
 8008bcc:	f7f9 fcae 	bl	800252c <HAL_Delay>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4808      	ldr	r0, [pc, #32]	; (8008bf8 <SVCCTL_App_Notification+0x120>)
 8008bd6:	f7f9 ffbf 	bl	8002b58 <HAL_GPIO_WritePin>
        break; /* RADIO_ACTIVITY_EVENT */
 8008bda:	e002      	b.n	8008be2 <SVCCTL_App_Notification+0x10a>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8008bdc:	bf00      	nop
 8008bde:	e000      	b.n	8008be2 <SVCCTL_App_Notification+0x10a>
      break;
 8008be0:	bf00      	nop
      break; /* EVT_VENDOR */
 8008be2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008be4:	2301      	movs	r3, #1
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000124 	.word	0x20000124
 8008bf4:	20000794 	.word	0x20000794
 8008bf8:	48000400 	.word	0x48000400

08008bfc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <Ble_Tl_Init+0x20>)
 8008c04:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <Ble_Tl_Init+0x24>)
 8008c08:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4805      	ldr	r0, [pc, #20]	; (8008c24 <Ble_Tl_Init+0x28>)
 8008c10:	f7fe ff72 	bl	8007af8 <hci_init>

  return;
 8008c14:	bf00      	nop
}
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	2003009c 	.word	0x2003009c
 8008c20:	08009017 	.word	0x08009017
 8008c24:	08008fdf 	.word	0x08008fdf

08008c28 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 8008c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c2a:	b091      	sub	sp, #68	; 0x44
 8008c2c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8008c2e:	2300      	movs	r3, #0
 8008c30:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8008c32:	f7fe fe8c 	bl	800794e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8008c36:	f000 f943 	bl	8008ec0 <BleGetBdAddress>
 8008c3a:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	2106      	movs	r1, #6
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7fe fd65 	bl	8007710 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	795a      	ldrb	r2, [r3, #5]
 8008c4a:	4b5e      	ldr	r3, [pc, #376]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c4c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	791a      	ldrb	r2, [r3, #4]
 8008c52:	4b5c      	ldr	r3, [pc, #368]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c54:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	78da      	ldrb	r2, [r3, #3]
 8008c5a:	4b5a      	ldr	r3, [pc, #360]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c5c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	789a      	ldrb	r2, [r3, #2]
 8008c62:	4b58      	ldr	r3, [pc, #352]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c64:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	785a      	ldrb	r2, [r3, #1]
 8008c6a:	4b56      	ldr	r3, [pc, #344]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c6c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	4b54      	ldr	r3, [pc, #336]	; (8008dc4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008c74:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8008c76:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8008c7a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8008c7c:	f7ff fe98 	bl	80089b0 <LL_FLASH_GetUDN>
 8008c80:	4603      	mov	r3, r0
 8008c82:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8008c84:	f107 0308 	add.w	r3, r7, #8
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2106      	movs	r1, #6
 8008c8c:	202e      	movs	r0, #46	; 0x2e
 8008c8e:	f7fe fd3f 	bl	8007710 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8008c92:	4a4d      	ldr	r2, [pc, #308]	; (8008dc8 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8008c94:	2110      	movs	r1, #16
 8008c96:	2018      	movs	r0, #24
 8008c98:	f7fe fd3a 	bl	8007710 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008c9c:	4a4b      	ldr	r2, [pc, #300]	; (8008dcc <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8008c9e:	2110      	movs	r1, #16
 8008ca0:	2008      	movs	r0, #8
 8008ca2:	f7fe fd35 	bl	8007710 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008ca6:	2118      	movs	r1, #24
 8008ca8:	2001      	movs	r0, #1
 8008caa:	f7fe fda1 	bl	80077f0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8008cae:	f7fe fade 	bl	800726e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008cb6:	7ffb      	ldrb	r3, [r7, #31]
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8008cbe:	7ffb      	ldrb	r3, [r7, #31]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01e      	beq.n	8008d02 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 8008cc4:	4b42      	ldr	r3, [pc, #264]	; (8008dd0 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8008cc6:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8008cc8:	f107 0216 	add.w	r2, r7, #22
 8008ccc:	7ff8      	ldrb	r0, [r7, #31]
 8008cce:	f107 0312 	add.w	r3, r7, #18
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	2207      	movs	r2, #7
 8008cde:	2100      	movs	r1, #0
 8008ce0:	f7fe f9ae 	bl	8007040 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008ce4:	8afc      	ldrh	r4, [r7, #22]
 8008ce6:	8abd      	ldrh	r5, [r7, #20]
 8008ce8:	69b8      	ldr	r0, [r7, #24]
 8008cea:	f7f7 fa49 	bl	8000180 <strlen>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f7fe fc79 	bl	80075f4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008d02:	8af8      	ldrh	r0, [r7, #22]
 8008d04:	8a79      	ldrh	r1, [r7, #18]
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f7fe fc71 	bl	80075f4 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008d12:	2202      	movs	r2, #2
 8008d14:	2102      	movs	r1, #2
 8008d16:	2000      	movs	r0, #0
 8008d18:	f7fe fe42 	bl	80079a0 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008d1c:	4b2d      	ldr	r3, [pc, #180]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008d22:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe f88a 	bl	8006e40 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008d2c:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8008d32:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8008d38:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d3a:	2208      	movs	r2, #8
 8008d3c:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8008d3e:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d40:	2210      	movs	r2, #16
 8008d42:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8008d44:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8008d4a:	4b22      	ldr	r3, [pc, #136]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d4c:	4a22      	ldr	r2, [pc, #136]	; (8008dd8 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8008d4e:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8008d50:	4b20      	ldr	r3, [pc, #128]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d5c:	e00b      	b.n	8008d76 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8008d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d62:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d64:	4413      	add	r3, r2
 8008d66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d6a:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d70:	3301      	adds	r3, #1
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d7a:	2b0f      	cmp	r3, #15
 8008d7c:	d9ef      	bls.n	8008d5e <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d80:	789d      	ldrb	r5, [r3, #2]
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d84:	785e      	ldrb	r6, [r3, #1]
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d88:	7d5b      	ldrb	r3, [r3, #21]
 8008d8a:	4a12      	ldr	r2, [pc, #72]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d8c:	7d92      	ldrb	r2, [r2, #22]
 8008d8e:	4911      	ldr	r1, [pc, #68]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d90:	7d09      	ldrb	r1, [r1, #20]
 8008d92:	4810      	ldr	r0, [pc, #64]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008d94:	6980      	ldr	r0, [r0, #24]
 8008d96:	2400      	movs	r4, #0
 8008d98:	9404      	str	r4, [sp, #16]
 8008d9a:	9003      	str	r0, [sp, #12]
 8008d9c:	9102      	str	r1, [sp, #8]
 8008d9e:	9201      	str	r2, [sp, #4]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	2300      	movs	r3, #0
 8008da4:	2200      	movs	r2, #0
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	f7fe f89a 	bl	8006ee2 <aci_gap_set_authentication_requirement>
  );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008db0:	789b      	ldrb	r3, [r3, #2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8008db6:	f7fe fa31 	bl	800721c <aci_gap_configure_whitelist>
   }
}
 8008dba:	bf00      	nop
 8008dbc:	372c      	adds	r7, #44	; 0x2c
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000020 	.word	0x20000020
 8008dc8:	0800a4fc 	.word	0x0800a4fc
 8008dcc:	0800a50c 	.word	0x0800a50c
 8008dd0:	08009670 	.word	0x08009670
 8008dd4:	20000124 	.word	0x20000124
 8008dd8:	0001b207 	.word	0x0001b207

08008ddc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af08      	add	r7, sp, #32
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008de6:	2342      	movs	r3, #66	; 0x42
 8008de8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d106      	bne.n	8008dfe <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8008df0:	4b2c      	ldr	r3, [pc, #176]	; (8008ea4 <Adv_Request+0xc8>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8008df6:	4b2c      	ldr	r3, [pc, #176]	; (8008ea8 <Adv_Request+0xcc>)
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	81bb      	strh	r3, [r7, #12]
 8008dfc:	e005      	b.n	8008e0a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8008dfe:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8008e02:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8008e04:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008e08:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008e0a:	4b28      	ldr	r3, [pc, #160]	; (8008eac <Adv_Request+0xd0>)
 8008e0c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f8 f9c9 	bl	80011a8 <HW_TS_Stop>

#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("First index in %d state \n",
    BleApplicationContext.Device_Connection_Status);
#endif
    if ((New_Status == APP_BLE_LP_ADV)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d10d      	bne.n	8008e38 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8008e1c:	4b23      	ldr	r3, [pc, #140]	; (8008eac <Adv_Request+0xd0>)
 8008e1e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d004      	beq.n	8008e30 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8008e26:	4b21      	ldr	r3, [pc, #132]	; (8008eac <Adv_Request+0xd0>)
 8008e28:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d103      	bne.n	8008e38 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8008e30:	f7fd fef8 	bl	8006c24 <aci_gap_set_non_discoverable>
 8008e34:	4603      	mov	r3, r0
 8008e36:	72fb      	strb	r3, [r7, #11]
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
#endif
        }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008e38:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <Adv_Request+0xd0>)
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008e40:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <Adv_Request+0xd0>)
 8008e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e46:	89b8      	ldrh	r0, [r7, #12]
 8008e48:	89f9      	ldrh	r1, [r7, #14]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	9206      	str	r2, [sp, #24]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	9205      	str	r2, [sp, #20]
 8008e52:	4a17      	ldr	r2, [pc, #92]	; (8008eb0 <Adv_Request+0xd4>)
 8008e54:	9204      	str	r2, [sp, #16]
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <Adv_Request+0xd8>)
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	2300      	movs	r3, #0
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	2300      	movs	r3, #0
 8008e66:	4602      	mov	r2, r0
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f7fd ff04 	bl	8006c76 <aci_gap_set_discoverable>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8008e72:	4911      	ldr	r1, [pc, #68]	; (8008eb8 <Adv_Request+0xdc>)
 8008e74:	200e      	movs	r0, #14
 8008e76:	f7fe f96e 	bl	8007156 <aci_gap_update_adv_data>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d107      	bne.n	8008e9a <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising " );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8008e8a:	4b08      	ldr	r3, [pc, #32]	; (8008eac <Adv_Request+0xd0>)
 8008e8c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008e90:	490a      	ldr	r1, [pc, #40]	; (8008ebc <Adv_Request+0xe0>)
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f8 fa12 	bl	80012bc <HW_TS_Start>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
#endif
      }
    }

  return;
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
}
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200001b8 	.word	0x200001b8
 8008ea8:	200001ba 	.word	0x200001ba
 8008eac:	20000124 	.word	0x20000124
 8008eb0:	2000014d 	.word	0x2000014d
 8008eb4:	0800a51c 	.word	0x0800a51c
 8008eb8:	20000020 	.word	0x20000020
 8008ebc:	0001e046 	.word	0x0001e046

08008ec0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008ec6:	f7ff fd73 	bl	80089b0 <LL_FLASH_GetUDN>
 8008eca:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d023      	beq.n	8008f1c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008ed4:	f7ff fd84 	bl	80089e0 <LL_FLASH_GetSTCompanyID>
 8008ed8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008eda:	f7ff fd75 	bl	80089c8 <LL_FLASH_GetDeviceID>
 8008ede:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <BleGetBdAddress+0x80>)
 8008ee6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <BleGetBdAddress+0x80>)
 8008ef0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <BleGetBdAddress+0x80>)
 8008efa:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <BleGetBdAddress+0x80>)
 8008f02:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	4b0d      	ldr	r3, [pc, #52]	; (8008f40 <BleGetBdAddress+0x80>)
 8008f0a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	0a1b      	lsrs	r3, r3, #8
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <BleGetBdAddress+0x80>)
 8008f14:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008f16:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <BleGetBdAddress+0x80>)
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e00b      	b.n	8008f34 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f7ff fad3 	bl	80084c8 <OTP_Read>
 8008f22:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e001      	b.n	8008f34 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <BleGetBdAddress+0x84>)
 8008f32:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8008f34:	697b      	ldr	r3, [r7, #20]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000484 	.word	0x20000484
 8008f44:	0800a4f4 	.word	0x0800a4f4

08008f48 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <Adv_Cancel+0x30>)
 8008f50:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008f54:	2b05      	cmp	r3, #5
 8008f56:	d00a      	beq.n	8008f6e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008f5c:	f7fd fe62 	bl	8006c24 <aci_gap_set_non_discoverable>
 8008f60:	4603      	mov	r3, r0
 8008f62:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <Adv_Cancel+0x30>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
}
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000124 	.word	0x20000124

08008f7c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  SCH_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8008f80:	2100      	movs	r1, #0
 8008f82:	2001      	movs	r0, #1
 8008f84:	f7ff fbb2 	bl	80086ec <SCH_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8008f88:	bf00      	nop
}
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8008f90:	bf00      	nop
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  SCH_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	2004      	movs	r0, #4
 8008fa6:	f7ff fba1 	bl	80086ec <SCH_SetTask>
  return;
 8008faa:	bf00      	nop
}
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  SCH_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008fba:	2002      	movs	r0, #2
 8008fbc:	f7ff fbfc 	bl	80087b8 <SCH_SetEvt>
  return;
 8008fc0:	bf00      	nop
}
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  SCH_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8008fd0:	2002      	movs	r0, #2
 8008fd2:	f7ff fc0f 	bl	80087f4 <SCH_WaitEvt>
  return;
 8008fd6:	bf00      	nop
}
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fd fdc5 	bl	8006b80 <SVCCTL_UserEvtRx>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8009006:	e002      	b.n	800900e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	4603      	mov	r3, r0
 800901e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <BLE_StatusNot+0x16>
 8009026:	2b01      	cmp	r3, #1
 8009028:	d006      	beq.n	8009038 <BLE_StatusNot+0x22>
      SCH_ResumeTask(task_id_list);

      break;

    default:
      break;
 800902a:	e00b      	b.n	8009044 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800902c:	2307      	movs	r3, #7
 800902e:	60fb      	str	r3, [r7, #12]
      SCH_PauseTask(task_id_list);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f7ff fb85 	bl	8008740 <SCH_PauseTask>
      break;
 8009036:	e005      	b.n	8009044 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009038:	2307      	movs	r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
      SCH_ResumeTask(task_id_list);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff fb9d 	bl	800877c <SCH_ResumeTask>
      break;
 8009042:	bf00      	nop
  }
  return;
 8009044:	bf00      	nop
}
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d004      	beq.n	8009066 <P2PS_STM_App_Notification+0x1a>
 800905c:	2b03      	cmp	r3, #3
 800905e:	d004      	beq.n	800906a <P2PS_STM_App_Notification+0x1e>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8009064:	e004      	b.n	8009070 <P2PS_STM_App_Notification+0x24>
      break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <P2PS_STM_App_Notification+0x24>
      break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <P2PS_STM_App_Notification+0x24>
      break;
 800906e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8009070:	bf00      	nop
}
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <P2PS_APP_Notification+0x16>
 800908c:	2b01      	cmp	r3, #1
 800908e:	d002      	beq.n	8009096 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8009090:	e002      	b.n	8009098 <P2PS_APP_Notification+0x1c>
    break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <P2PS_APP_Notification+0x1c>
    break;
 8009096:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8009098:	bf00      	nop
}
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80090a8:	bf00      	nop
}
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
	...

080090b4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <LL_PWR_EnableBootC2+0x1c>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4a04      	ldr	r2, [pc, #16]	; (80090d0 <LL_PWR_EnableBootC2+0x1c>)
 80090be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c2:	60d3      	str	r3, [r2, #12]
}
 80090c4:	bf00      	nop
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	58000400 	.word	0x58000400

080090d4 <LL_AHB3_GRP1_EnableClock>:
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80090dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80090ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4013      	ands	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090f8:	68fb      	ldr	r3, [r7, #12]
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f043 0201 	orr.w	r2, r3, #1
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	041b      	lsls	r3, r3, #16
 8009158:	43db      	mvns	r3, r3
 800915a:	401a      	ands	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	605a      	str	r2, [r3, #4]
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	041b      	lsls	r3, r3, #16
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	605a      	str	r2, [r3, #4]
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	43db      	mvns	r3, r3
 80091a2:	401a      	ands	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
}
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	609a      	str	r2, [r3, #8]
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	041a      	lsls	r2, r3, #16
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	609a      	str	r2, [r3, #8]
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	4013      	ands	r3, r2
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d101      	bne.n	800922c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	4013      	ands	r3, r2
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d101      	bne.n	8009256 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
	if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8009268:	2104      	movs	r1, #4
 800926a:	482a      	ldr	r0, [pc, #168]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 800926c:	f7ff ffe5 	bl	800923a <LL_C2_IPCC_IsActiveFlag_CHx>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <HW_IPCC_Rx_Handler+0x26>
 8009276:	4b27      	ldr	r3, [pc, #156]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	43db      	mvns	r3, r3
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HW_IPCC_Rx_Handler+0x26>
	{
		HW_IPCC_THREAD_NotEvtHandler();
 8009284:	f000 f916 	bl	80094b4 <HW_IPCC_THREAD_NotEvtHandler>
 8009288:	e041      	b.n	800930e <HW_IPCC_Rx_Handler+0xaa>
	}
	else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800928a:	2101      	movs	r1, #1
 800928c:	4821      	ldr	r0, [pc, #132]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 800928e:	f7ff ffd4 	bl	800923a <LL_C2_IPCC_IsActiveFlag_CHx>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <HW_IPCC_Rx_Handler+0x46>
 8009298:	4b1e      	ldr	r3, [pc, #120]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <HW_IPCC_Rx_Handler+0x46>
	{
		HW_IPCC_BLE_EvtHandler();
 80092a4:	f000 f8b2 	bl	800940c <HW_IPCC_BLE_EvtHandler>
 80092a8:	e031      	b.n	800930e <HW_IPCC_Rx_Handler+0xaa>
	}
	else if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80092aa:	2102      	movs	r1, #2
 80092ac:	4819      	ldr	r0, [pc, #100]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092ae:	f7ff ffc4 	bl	800923a <LL_C2_IPCC_IsActiveFlag_CHx>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <HW_IPCC_Rx_Handler+0x68>
 80092b8:	4b16      	ldr	r3, [pc, #88]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	43db      	mvns	r3, r3
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HW_IPCC_Rx_Handler+0x68>
	{
		HW_IPCC_SYS_EvtHandler();
 80092c6:	f000 f8dd 	bl	8009484 <HW_IPCC_SYS_EvtHandler>
 80092ca:	e020      	b.n	800930e <HW_IPCC_Rx_Handler+0xaa>
	}
	else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80092cc:	2108      	movs	r1, #8
 80092ce:	4811      	ldr	r0, [pc, #68]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092d0:	f7ff ffb3 	bl	800923a <LL_C2_IPCC_IsActiveFlag_CHx>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HW_IPCC_Rx_Handler+0x8a>
 80092da:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	43db      	mvns	r3, r3
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <HW_IPCC_Rx_Handler+0x8a>
	{
		HW_IPCC_TRACES_EvtHandler();
 80092e8:	f000 f93c 	bl	8009564 <HW_IPCC_TRACES_EvtHandler>
 80092ec:	e00f      	b.n	800930e <HW_IPCC_Rx_Handler+0xaa>
	}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80092ee:	2110      	movs	r1, #16
 80092f0:	4808      	ldr	r0, [pc, #32]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092f2:	f7ff ffa2 	bl	800923a <LL_C2_IPCC_IsActiveFlag_CHx>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HW_IPCC_Rx_Handler+0xac>
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <HW_IPCC_Rx_Handler+0xb0>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	43db      	mvns	r3, r3
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800930a:	f000 f8df 	bl	80094cc <HW_IPCC_THREAD_CliNotEvtHandler>
  }

	return;
 800930e:	bf00      	nop
 8009310:	bf00      	nop
}
 8009312:	bd80      	pop	{r7, pc}
 8009314:	58000c00 	.word	0x58000c00

08009318 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
	if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800931c:	2104      	movs	r1, #4
 800931e:	4822      	ldr	r0, [pc, #136]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009320:	f7ff ff76 	bl	8009210 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <HW_IPCC_Tx_Handler+0x26>
 800932a:	4b1f      	ldr	r3, [pc, #124]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	43db      	mvns	r3, r3
 8009330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HW_IPCC_Tx_Handler+0x26>
	{
		HW_IPCC_OT_CmdEvtHandler();
 8009338:	f000 f8b0 	bl	800949c <HW_IPCC_OT_CmdEvtHandler>
 800933c:	e031      	b.n	80093a2 <HW_IPCC_Tx_Handler+0x8a>
	}
	else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800933e:	2102      	movs	r1, #2
 8009340:	4819      	ldr	r0, [pc, #100]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009342:	f7ff ff65 	bl	8009210 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HW_IPCC_Tx_Handler+0x48>
 800934c:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	43db      	mvns	r3, r3
 8009352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <HW_IPCC_Tx_Handler+0x48>
	{
		HW_IPCC_SYS_CmdEvtHandler();
 800935a:	f000 f887 	bl	800946c <HW_IPCC_SYS_CmdEvtHandler>
 800935e:	e020      	b.n	80093a2 <HW_IPCC_Tx_Handler+0x8a>
	}
	else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009360:	2108      	movs	r1, #8
 8009362:	4811      	ldr	r0, [pc, #68]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009364:	f7ff ff54 	bl	8009210 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <HW_IPCC_Tx_Handler+0x6a>
 800936e:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	43db      	mvns	r3, r3
 8009374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <HW_IPCC_Tx_Handler+0x6a>
	{
		HW_IPCC_MM_FreeBufHandler();
 800937c:	f000 f8d4 	bl	8009528 <HW_IPCC_MM_FreeBufHandler>
 8009380:	e00f      	b.n	80093a2 <HW_IPCC_Tx_Handler+0x8a>
	}
    else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009382:	2120      	movs	r1, #32
 8009384:	4808      	ldr	r0, [pc, #32]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009386:	f7ff ff43 	bl	8009210 <LL_C1_IPCC_IsActiveFlag_CHx>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <HW_IPCC_Tx_Handler+0x8c>
 8009390:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HW_IPCC_Tx_Handler+0x90>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	43db      	mvns	r3, r3
 8009396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <HW_IPCC_Tx_Handler+0x8c>
    {
        HW_IPCC_BLE_AclDataEvtHandler();
 800939e:	f000 f841 	bl	8009424 <HW_IPCC_BLE_AclDataEvtHandler>
    }
	return;
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
}
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	58000c00 	.word	0x58000c00

080093ac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
	LL_PWR_EnableBootC2();
 80093b0:	f7ff fe80 	bl	80090b4 <LL_PWR_EnableBootC2>

	return;
 80093b4:	bf00      	nop
}
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80093bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80093c0:	f7ff fe88 	bl	80090d4 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_EnableIT_RXO( IPCC );
 80093c4:	4806      	ldr	r0, [pc, #24]	; (80093e0 <HW_IPCC_Init+0x28>)
 80093c6:	f7ff feae 	bl	8009126 <LL_C1_IPCC_EnableIT_RXO>
	LL_C1_IPCC_EnableIT_TXF( IPCC );
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <HW_IPCC_Init+0x28>)
 80093cc:	f7ff fe9b 	bl	8009106 <LL_C1_IPCC_EnableIT_TXF>

	HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80093d0:	202c      	movs	r0, #44	; 0x2c
 80093d2:	f7f9 fa0c 	bl	80027ee <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80093d6:	202d      	movs	r0, #45	; 0x2d
 80093d8:	f7f9 fa09 	bl	80027ee <HAL_NVIC_EnableIRQ>

	return;
 80093dc:	bf00      	nop
}
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	58000c00 	.word	0x58000c00

080093e4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80093e8:	2101      	movs	r1, #1
 80093ea:	4802      	ldr	r0, [pc, #8]	; (80093f4 <HW_IPCC_BLE_Init+0x10>)
 80093ec:	f7ff fed0 	bl	8009190 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 80093f0:	bf00      	nop
}
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	58000c00 	.word	0x58000c00

080093f8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
	LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80093fc:	2101      	movs	r1, #1
 80093fe:	4802      	ldr	r0, [pc, #8]	; (8009408 <HW_IPCC_BLE_SendCmd+0x10>)
 8009400:	f7ff fef7 	bl	80091f2 <LL_C1_IPCC_SetFlag_CHx>

	return;
 8009404:	bf00      	nop
}
 8009406:	bd80      	pop	{r7, pc}
 8009408:	58000c00 	.word	0x58000c00

0800940c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
	HW_IPCC_BLE_RxEvtNot();
 8009410:	f7fe fea4 	bl	800815c <HW_IPCC_BLE_RxEvtNot>

	LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009414:	2101      	movs	r1, #1
 8009416:	4802      	ldr	r0, [pc, #8]	; (8009420 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009418:	f7ff fedd 	bl	80091d6 <LL_C1_IPCC_ClearFlag_CHx>

	return;
 800941c:	bf00      	nop
}
 800941e:	bd80      	pop	{r7, pc}
 8009420:	58000c00 	.word	0x58000c00

08009424 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009428:	2120      	movs	r1, #32
 800942a:	4803      	ldr	r0, [pc, #12]	; (8009438 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800942c:	f7ff fe9e 	bl	800916c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009430:	f7fe feb0 	bl	8008194 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009434:	bf00      	nop
}
 8009436:	bd80      	pop	{r7, pc}
 8009438:	58000c00 	.word	0x58000c00

0800943c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009440:	2102      	movs	r1, #2
 8009442:	4802      	ldr	r0, [pc, #8]	; (800944c <HW_IPCC_SYS_Init+0x10>)
 8009444:	f7ff fea4 	bl	8009190 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 8009448:	bf00      	nop
}
 800944a:	bd80      	pop	{r7, pc}
 800944c:	58000c00 	.word	0x58000c00

08009450 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
	LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009454:	2102      	movs	r1, #2
 8009456:	4804      	ldr	r0, [pc, #16]	; (8009468 <HW_IPCC_SYS_SendCmd+0x18>)
 8009458:	f7ff fecb 	bl	80091f2 <LL_C1_IPCC_SetFlag_CHx>
	LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800945c:	2102      	movs	r1, #2
 800945e:	4802      	ldr	r0, [pc, #8]	; (8009468 <HW_IPCC_SYS_SendCmd+0x18>)
 8009460:	f7ff fe71 	bl	8009146 <LL_C1_IPCC_EnableTransmitChannel>

	return;
 8009464:	bf00      	nop
}
 8009466:	bd80      	pop	{r7, pc}
 8009468:	58000c00 	.word	0x58000c00

0800946c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
	LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009470:	2102      	movs	r1, #2
 8009472:	4803      	ldr	r0, [pc, #12]	; (8009480 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009474:	f7ff fe7a 	bl	800916c <LL_C1_IPCC_DisableTransmitChannel>

	HW_IPCC_SYS_CmdEvtNot();
 8009478:	f7fe fed4 	bl	8008224 <HW_IPCC_SYS_CmdEvtNot>

	return;
 800947c:	bf00      	nop
}
 800947e:	bd80      	pop	{r7, pc}
 8009480:	58000c00 	.word	0x58000c00

08009484 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
	HW_IPCC_SYS_EvtNot();
 8009488:	f7fe fedc 	bl	8008244 <HW_IPCC_SYS_EvtNot>

	LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800948c:	2102      	movs	r1, #2
 800948e:	4802      	ldr	r0, [pc, #8]	; (8009498 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009490:	f7ff fea1 	bl	80091d6 <LL_C1_IPCC_ClearFlag_CHx>

	return;
 8009494:	bf00      	nop
}
 8009496:	bd80      	pop	{r7, pc}
 8009498:	58000c00 	.word	0x58000c00

0800949c <HW_IPCC_OT_CmdEvtHandler>:

  return;
}

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
	LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80094a0:	2104      	movs	r1, #4
 80094a2:	4803      	ldr	r0, [pc, #12]	; (80094b0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80094a4:	f7ff fe62 	bl	800916c <LL_C1_IPCC_DisableTransmitChannel>

	HW_IPCC_OT_CmdEvtNot();
 80094a8:	f7fe fee8 	bl	800827c <HW_IPCC_OT_CmdEvtNot>

	return;
 80094ac:	bf00      	nop
}
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	58000c00 	.word	0x58000c00

080094b4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
	LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80094b8:	2104      	movs	r1, #4
 80094ba:	4803      	ldr	r0, [pc, #12]	; (80094c8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80094bc:	f7ff fe7a 	bl	80091b4 <LL_C1_IPCC_DisableReceiveChannel>

	HW_IPCC_THREAD_EvtNot();
 80094c0:	f7fe fee8 	bl	8008294 <HW_IPCC_THREAD_EvtNot>

	return;
 80094c4:	bf00      	nop
}
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	58000c00 	.word	0x58000c00

080094cc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80094d0:	2110      	movs	r1, #16
 80094d2:	4803      	ldr	r0, [pc, #12]	; (80094e0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80094d4:	f7ff fe6e 	bl	80091b4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80094d8:	f7fe fee8 	bl	80082ac <HW_IPCC_THREAD_CliEvtNot>

  return;
 80094dc:	bf00      	nop
}
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	58000c00 	.word	0x58000c00

080094e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80094ec:	2108      	movs	r1, #8
 80094ee:	480c      	ldr	r0, [pc, #48]	; (8009520 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80094f0:	f7ff fe8e 	bl	8009210 <LL_C1_IPCC_IsActiveFlag_CHx>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d007      	beq.n	800950a <HW_IPCC_MM_SendFreeBuf+0x26>
	{
		FreeBufCb = cb;
 80094fa:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6013      	str	r3, [r2, #0]
		LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009500:	2108      	movs	r1, #8
 8009502:	4807      	ldr	r0, [pc, #28]	; (8009520 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009504:	f7ff fe1f 	bl	8009146 <LL_C1_IPCC_EnableTransmitChannel>
		cb();

		LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
	}

	return;
 8009508:	e006      	b.n	8009518 <HW_IPCC_MM_SendFreeBuf+0x34>
		cb();
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4798      	blx	r3
		LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800950e:	2108      	movs	r1, #8
 8009510:	4803      	ldr	r0, [pc, #12]	; (8009520 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009512:	f7ff fe6e 	bl	80091f2 <LL_C1_IPCC_SetFlag_CHx>
	return;
 8009516:	bf00      	nop
}
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	58000c00 	.word	0x58000c00
 8009524:	2000048c 	.word	0x2000048c

08009528 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
	LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800952c:	2108      	movs	r1, #8
 800952e:	4806      	ldr	r0, [pc, #24]	; (8009548 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009530:	f7ff fe1c 	bl	800916c <LL_C1_IPCC_DisableTransmitChannel>

	FreeBufCb();
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4798      	blx	r3

	LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800953a:	2108      	movs	r1, #8
 800953c:	4802      	ldr	r0, [pc, #8]	; (8009548 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800953e:	f7ff fe58 	bl	80091f2 <LL_C1_IPCC_SetFlag_CHx>

	return;
 8009542:	bf00      	nop
}
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	58000c00 	.word	0x58000c00
 800954c:	2000048c 	.word	0x2000048c

08009550 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009554:	2108      	movs	r1, #8
 8009556:	4802      	ldr	r0, [pc, #8]	; (8009560 <HW_IPCC_TRACES_Init+0x10>)
 8009558:	f7ff fe1a 	bl	8009190 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 800955c:	bf00      	nop
}
 800955e:	bd80      	pop	{r7, pc}
 8009560:	58000c00 	.word	0x58000c00

08009564 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
	HW_IPCC_TRACES_EvtNot();
 8009568:	f7fe ff4c 	bl	8008404 <HW_IPCC_TRACES_EvtNot>

	LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800956c:	2108      	movs	r1, #8
 800956e:	4802      	ldr	r0, [pc, #8]	; (8009578 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009570:	f7ff fe31 	bl	80091d6 <LL_C1_IPCC_ClearFlag_CHx>

	return;
 8009574:	bf00      	nop
}
 8009576:	bd80      	pop	{r7, pc}
 8009578:	58000c00 	.word	0x58000c00

0800957c <__libc_init_array>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0d      	ldr	r6, [pc, #52]	; (80095b4 <__libc_init_array+0x38>)
 8009580:	4c0d      	ldr	r4, [pc, #52]	; (80095b8 <__libc_init_array+0x3c>)
 8009582:	1ba4      	subs	r4, r4, r6
 8009584:	10a4      	asrs	r4, r4, #2
 8009586:	2500      	movs	r5, #0
 8009588:	42a5      	cmp	r5, r4
 800958a:	d109      	bne.n	80095a0 <__libc_init_array+0x24>
 800958c:	4e0b      	ldr	r6, [pc, #44]	; (80095bc <__libc_init_array+0x40>)
 800958e:	4c0c      	ldr	r4, [pc, #48]	; (80095c0 <__libc_init_array+0x44>)
 8009590:	f000 f82c 	bl	80095ec <_init>
 8009594:	1ba4      	subs	r4, r4, r6
 8009596:	10a4      	asrs	r4, r4, #2
 8009598:	2500      	movs	r5, #0
 800959a:	42a5      	cmp	r5, r4
 800959c:	d105      	bne.n	80095aa <__libc_init_array+0x2e>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095a4:	4798      	blx	r3
 80095a6:	3501      	adds	r5, #1
 80095a8:	e7ee      	b.n	8009588 <__libc_init_array+0xc>
 80095aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095ae:	4798      	blx	r3
 80095b0:	3501      	adds	r5, #1
 80095b2:	e7f2      	b.n	800959a <__libc_init_array+0x1e>
 80095b4:	0800a52c 	.word	0x0800a52c
 80095b8:	0800a52c 	.word	0x0800a52c
 80095bc:	0800a52c 	.word	0x0800a52c
 80095c0:	0800a530 	.word	0x0800a530

080095c4 <memcpy>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	1e43      	subs	r3, r0, #1
 80095c8:	440a      	add	r2, r1
 80095ca:	4291      	cmp	r1, r2
 80095cc:	d100      	bne.n	80095d0 <memcpy+0xc>
 80095ce:	bd10      	pop	{r4, pc}
 80095d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d8:	e7f7      	b.n	80095ca <memcpy+0x6>

080095da <memset>:
 80095da:	4402      	add	r2, r0
 80095dc:	4603      	mov	r3, r0
 80095de:	4293      	cmp	r3, r2
 80095e0:	d100      	bne.n	80095e4 <memset+0xa>
 80095e2:	4770      	bx	lr
 80095e4:	f803 1b01 	strb.w	r1, [r3], #1
 80095e8:	e7f9      	b.n	80095de <memset+0x4>
	...

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
